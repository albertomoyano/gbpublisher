' Gambas class file

Private rutaApp As String = User.Home & "/.gbadoc"
Public NombreProyecto As String
Public RutaProyecto As String
Public $Bash As Process' es público para compartirlo en las operaciones
Private ContenidoArt As Result
Private ContenidoBib As Result
Private ContenidoAut As Result
Public sRutaArchivoAbierto As String
Public TipoProyectoActual As Integer

Public Sub Form_Open()

  'creamos el directorio oculto del programa y revisamos la BBDD
  m_InicioCierre.DirectorioOcultoApp()

  If Not File.RealPath(rutaApp & "/gbadoc.sqlite") Then
    Message.Info("No se encontró la base de datos. Se hará una copia de una base de datos vacía.")
    Copy "vacia-gbadoc.sqlite" To rutaApp & "/gbadoc.sqlite"
  End If

  ' abrimos la conexión a la red
  m_OnOff_y_Red.OnRed

  ' habilitamos bash en la terminal
  $Bash = TerminalViewProyecto.Shell("/usr/bin/bash")

  TimerHOY.Delay = 1000
  TimerHOY.Stop' detenemos el reloj
  TextHoraParcial.Text = "00:00:00"

  TextAreaProyecto.Visible = True
  HBoxGuardarTextArea.Visible = False
  PictureBoxProyecto.Visible = False
  PictureBoxProyecto.Picture = Null

End

Public Sub DirViewProyecto_Click()' Evento click en DirView actualiza los archivos que se muestran en FileViewProyecto

  Dim bloquear As Boolean = False

  If Not bloquear Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

End

Public Sub Watcher_Change()' Evento que se ejecuta cuando se detecta un cambio en el directorio

  DirViewProyecto.Root = File.Dir(txtProyecto.Text)' reforzamos la indicación de la ruta
  DirViewProyecto.Refresh
  FileViewProyecto.Refresh

End

Public Sub btnVerProyectos_Click()' Cambiar visibilidad del TabPanel2 según el estado del botón

  If btnVerProyectos.Value Then
    ' Verificar si hay un proyecto seleccionado (filtro)
    If Trim(txtProyecto.Text) = "" Then
      ' No hay proyecto seleccionado, mostrar advertencia
      Message.Warning("No tiene ningún proyecto seleccionado.", "Aceptar")

      ' Desactivar el botón ya que no se puede mostrar el panel
      btnVerProyectos.Value = False

      Return
    End If

    ' Si hay proyecto seleccionado, mostrar el panel
    PanelProyectos.Visible = True
  Else
    ' Ocultar el panel
    PanelProyectos.Visible = False
  End If

End Sub

Public Sub ControlarCarpetas()' Lista de directorios que se deben confirmar al abrir un archivo

  Dim directorios As String[] = ["articulos", "articulos/respaldo", "docs", "docs/css", "docs/js", "docs/fonts", "docs/images", "files", "media", "correcciones", "originales", "salidas", "salidas/xml", "salidas/tex", "salidas/html", "salidas/tapa", "salidas/pdf", "salidas/epub", "salidas/xml/xml-indesign", "salidas/xml/xml-scielo", "salidas/xml/xml-pmd", "salidas/xml/xml-crossref", "salidas/xml/xml-doaj", ".github", ".github/workflows"]

  ' Crear los directorios si no existen
  For Each directorio As String In directorios
    If Not Exist(File.Dir(txtProyecto.Text) & "/" & directorio) Then
      Mkdir File.Dir(txtProyecto.Text) & "/" & directorio
    End If
  Next

End

Public Sub Form_Close()

  m_InicioCierre.CerrarTodo()

End

Public Sub btnCrearCarpeta_Click()

  If DirViewProyecto.Current = "" Then
    Message.Warning("Seleccioná un directorio en el árbol primero.")
    Return
  Endif

  ' Guardamos la ruta actual como destino
  f_AgregarCarpeta.RutaDestino = DirViewProyecto.Current
  f_AgregarCarpeta.ShowModal

  ' Si se creó la carpeta, actualizamos el FileView
  If f_AgregarCarpeta.CarpetaCreada Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

  DirViewProyecto.Reload

End

Public Sub btnBorrarCarpeta_Click()

  Dim ruta As String = DirViewProyecto.Current

  ' Verificar que la ruta existe y es una carpeta
  If Not Exist(ruta) Or Not IsDir(ruta) Then
    Message.Warning("La ruta seleccionada no es una carpeta válida.")
    Return
  End If

  ' Confirmar acción
  If Message.Question("¿Seguro que deseas borrar la carpeta y TODO su contenido, incluyendo subcarpetas y archivos?", "Sí", "Cancelar") <> 1 Then
    Return
  End If

  ' Intentar borrar la carpeta
  If BorrarCarpeta(ruta) Then
    DirViewProyecto.Reload
    Message.Info("Carpeta borrada exitosamente.")
  Else
    Message.Error("No se pudo borrar la carpeta completamente.")
  End If

End

Private Function BorrarCarpeta(RutaCarpeta As String) As Boolean

  Dim archivos As String[]
  Dim archivo As String
  Dim rutaCompleta As String

  ' Obtener lista de archivos y carpetas
  Try archivos = Dir(RutaCarpeta, "*", gb.File + gb.Directory)
  If Error Then
    Print "Error al leer carpeta: " & RutaCarpeta & " - " & Error.Text
    Return False
  End If

  ' Procesar cada elemento
  For Each archivo In archivos
    ' Saltar las entradas "." y ".."
    If archivo = "." Or archivo = ".." Then Continue

    rutaCompleta = RutaCarpeta &/ archivo

    If IsDir(rutaCompleta) Then
      ' Es una subcarpeta, llamada recursiva
      If Not BorrarCarpeta(rutaCompleta) Then
        Return False
      End If
    Else
      ' Es un archivo, borrarlo
      Try Kill rutaCompleta
      If Error Then
        Print "Error al borrar archivo: " & rutaCompleta & " - " & Error.Text
        Return False
      End If
    End If
  Next

  ' Finalmente, borrar la carpeta vacía
  Try Rmdir RutaCarpeta
  If Error Then
    Print "Error al borrar carpeta: " & RutaCarpeta & " - " & Error.Text
    Return False
  End If

  Return True

End Function

Public Sub btnAgregarArchivo_Click()' Evento para agregar archivo
  ' Mostrar formulario de creación

  f_AgregarArchivo.RutaDestino = DirViewProyecto.Current
  f_AgregarArchivo.ShowModal
  ' Si se creó, actualizamos la vista
  If f_AgregarArchivo.ArchivoCreado Then
    FileViewProyecto.Dir = DirViewProyecto.Current
  Endif

  FileViewProyecto.Reload

End

Public Sub btnBorrarArchivo_Click()

  Dim archivoSeleccionado As String
  Dim rutaCompleta As String
  Dim respuesta As Integer

  ' Verificar que hay un archivo seleccionado
  If FileViewProyecto.Current = "" Then
    Message.Warning("No hay ningún archivo seleccionado")
    Return
  Endif

  ' Obtener el archivo seleccionado y su ruta completa
  archivoSeleccionado = FileViewProyecto.Current
  rutaCompleta = FileViewProyecto.Dir &/ archivoSeleccionado

  ' Mostrar alerta de confirmación
  respuesta = Message.Question("¿Está seguro que desea eliminar el archivo '" & archivoSeleccionado & "'?", "Eliminar", "Cancelar")

  ' Si confirma (OK), eliminar el archivo
  If respuesta = 1 Then
    Kill rutaCompleta
    If Error Then
      Message.Error("Error al eliminar el archivo: " & Error.Text)
    Else
      Message.Info("Archivo eliminado correctamente")
      ' Refrescar la vista
      FileViewProyecto.Reload
    Endif
  Endif

End

Public Sub btnVerIMAGEN_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesImagen As String[]

  ' Definir las extensiones de imagen permitidas
  aExtensionesImagen = ["png", "jpg", "jpeg", "gif", "bmp", "tiff", "tif", "webp"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de imagen válido
  If aExtensionesImagen.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es una imagen válida.\nExtensiones permitidas: ." & aExtensionesImagen.Join(", ."))
    Return
  Endif

  ' Cargar y mostrar la imagen
  Try PictureBoxProyecto.Picture = Picture.Load(sRutaCompleta)

  If Error Then
    ' Si hay error al cargar la imagen
    PictureBoxProyecto.Picture = Null
    PictureBoxProyecto.Visible = False
    TextAreaProyecto.Visible = True
    HBoxGuardarTextArea.Visible = True
  Else
    ' Si la imagen se cargó correctamente
    PictureBoxProyecto.Visible = True
    TextAreaProyecto.Visible = False
    HBoxGuardarTextArea.Visible = False
  Endif

  If Error Then
    Message.Error("Error al cargar la imagen:\n" & Error.Text)
    ' Limpiar el ImageView en caso de error
    PictureBoxProyecto.Picture = Null
  Endif

End

Public Sub btnVerTexto_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesPermitidas As String[]

  ' Definir las extensiones de archivos de texto permitidas
  aExtensionesPermitidas = ["md", "yaml", "json", "lua", "txt", "sh", "bib"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current
  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de texto válido
  If aExtensionesPermitidas.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es un archivo de texto válido.\nExtensiones permitidas: " & aExtensionesPermitidas.Join(", "))
    Return
  Endif

  ' Cargar el contenido del archivo de texto
  Try TextAreaProyecto.Text = File.Load(sRutaCompleta)
  sRutaArchivoAbierto = sRutaCompleta

  If Error Then
    ' Si hay error al cargar el archivo
    TextAreaProyecto.Text = ""
    PictureBoxProyecto.Visible = True
    TextAreaProyecto.Visible = False
    HBoxGuardarTextArea.Visible = False
    Message.Error("Error al cargar el archivo de texto:\n" & Error.Text)
  Else
    ' Si el texto se cargó correctamente
    PictureBoxProyecto.Visible = False
    TextAreaProyecto.Visible = True
    HBoxGuardarTextArea.Visible = True
  Endif

End

Public Sub menuEPUB_Click() ' construir epub para revista

  ' exportar archivo bib
  m_FuncionesExportar.ExportarBibTeX()

  ' exportar archivo metadatos

  ' exportar archivo cabecera

  ' Dim sAsciiDoc As String
  '
  ' sAsciiDoc = "asciidoctor-epub3 -r asciidoctor-bibtex -o salidas/epub/" & NombreProyecto & ".epub " & NombreProyecto & ".adoc"
  ' TerminalViewProyecto.Input(sAsciiDoc & "\n")

  ' === Validación con epubcheck ===
  Dim sEpubCheck As String

  sEpubCheck = "java -jar /usr/share/java/epubcheck.jar" & " " & RutaProyecto & "/salidas/epub/" & NombreProyecto & ".epub"
  TerminalViewProyecto.Input(sEpubCheck & "\n")

End

Public Sub menuPDFcompleto_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/pdf") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/pdf"
    DirViewProyecto.Reload
  End If

End

Public Sub menuHTMLcompleto_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/html") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/html"
    DirViewProyecto.Reload
  End If

End

Public Sub menuXMLpmd_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/xml") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/xml"
    DirViewProyecto.Reload
  End If

End

Public Sub menuSCIELO_Click()

  If Not Exist(File.Dir(txtProyecto.Text) & "/salidas/xml") Then
    Mkdir File.Dir(txtProyecto.Text) & "/salidas/xml"
    DirViewProyecto.Reload
  End If

End

Public Sub btnGuardarCambiosMetadatosRevista_Click()

  m_Metadatos.GuardarMetadatos()

End

Public Sub btnNuevoArticulo_Click()

  m_Articulos.ObtenerIdNuevoArticulo()

  btnNuevoArticulo.Visible = False
  btnGuardarArticulo.Visible = True
  btnGuardarCambiosArticulo.Visible = False
  btnBorrarArticulo.Visible = False

End

Public Sub btnGuardarArticulo_Click()

  m_Articulos.GuardarArticuloPrimeraVez()
  m_Articulos.RefrescarTableViewArticulos()
  m_Articulos.LimpiarTextboxArticulos()
  m_FuncionesGenericas.LlenarComboBoxArticulos()' mostramos articulos en autores y referencias

  btnNuevoArticulo.Visible = True
  btnGuardarArticulo.Visible = False
  btnGuardarCambiosArticulo.Visible = True
  btnBorrarArticulo.Visible = False

End

Public Sub btnGuardarCambiosArticulo_Click()

  m_Articulos.GuardarCambiosArticulo()
  m_Articulos.RefrescarTableViewArticulos()
  m_Articulos.LimpiarTextboxArticulos()
  m_FuncionesGenericas.LlenarComboBoxArticulos()' mostramos articulos en autores y referencias

  btnNuevoArticulo.Visible = True
  btnGuardarArticulo.Visible = False
  btnGuardarCambiosArticulo.Visible = False
  btnBorrarArticulo.Visible = False

End

Public Sub gbMetadatosArticulos_Data(Row As Integer, Column As Integer)

  If (ContenidoArt <> Null) Then
    If Row >= 0 And Row < ContenidoArt.Count Then
      ContenidoArt.MoveTo(Row)
      Try gbMetadatosArticulos.Data.Text = Str(ContenidoArt[Column])
    Endif
  Endif

  ' Color alternado para las filas
  If Row Mod 2 = 0 Then
    gbMetadatosArticulos.Data.Background = Color.RGB(230, 230, 230)
  Else
    gbMetadatosArticulos.Data.Background = Color.White
  Endif

End

Public Sub gbMetadatosArticulos_Click()

  ' configurar como se muestran los botones
  btnNuevoArticulo.Visible = True
  btnGuardarArticulo.Visible = False
  btnGuardarCambiosArticulo.Visible = True
  btnBorrarArticulo.Visible = True

  m_Articulos.MostrarArticulosEnTableViewArticulos(gbMetadatosArticulos.row)' en el evento Click de la celda pasar como parámetro la fila

End

Public Sub ComboBoxArticuloAsociado_Click()

  m_FuncionesGenericas.ComboBoxArticuloAsociado()

End

Public Sub gvReferenciasEnCurso_Data(Row As Integer, Column As Integer)

  If (ContenidoBib <> Null) Then
    If Row >= 0 And Row < ContenidoBib.Count Then
      ContenidoBib.MoveTo(Row)
      Try gvReferenciasEnCurso.Data.Text = Str(ContenidoBib[Column])
    Endif
  Endif

  ' Color alternado para las filas
  If Row Mod 2 = 0 Then
    gvReferenciasEnCurso.Data.Background = Color.RGB(230, 230, 230)
  Else
    gvReferenciasEnCurso.Data.Background = Color.White
  Endif

End

Public Sub gvReferenciasEnCurso_Click()
  ' configurar como se muestran los botones

  BtnNuevoBib.Visible = True
  btnGuardarBib.Visible = False
  btnGuardarCambiosBib.Visible = True
  BtnEliminarBib.Visible = True

  ' Mostrar los datos en los TextBox
  m_Bibtex.MostrarRefereciasEnTableViewBibtexEnCurso(gvReferenciasEnCurso.Row)

  ' Sincronizar el ComboBox con el ID del artículo (solo para revistas)
  If TipoProyectoActual = m_Constantes.TIPO_REVISTA_MD Then
    m_FuncionesGenericas.ActualizarComboBoxArticuloEnbibtexDesdeId()
  Endif

End

Public Sub BtnNuevoBib_Click()

  ' Verificar si hay un proyecto activo
  If Trim(txtProyecto.Text) = "" Then
    Message.Info("No hay un proyecto en curso. Por favor, abra o cree un proyecto antes de continuar.")
    Return
  Else
    ' limpiamos los textbox al iniciar una nueva carga
    m_Bibtex.LimpiarTextboxBibtex()
    m_Bibtex.RellenarComboBoxBibTeX()

    ' Solo si hay proyecto se ejecuta lo siguiente:
    Dim Idn As Integer
    Dim MaxId As Variant

    MaxId = m_OnOff_y_Red.meConn.Exec("SELECT MAX(id) FROM bibtex LIMIT 1")

    If MaxId["MAX(id)"] = Null Then
      Idn = 0
    Else
      Idn = CInt(MaxId["MAX(id)"]) + 1
    Endif

    idBibtex.Text = Idn
    idRevistaBibtex.Text = idMetadatoRevista.Text
    '
    If TipoProyectoActual = m_Constantes.TIPO_LIBRO_MD Or TipoProyectoActual = m_Constantes.TIPO_LIBRO_LATEX Then
      idArticuloBibtex.Text = "0" 'esto es para libros
    Endif
    '
    TabPanel5.Index = 1
    txtTMPbiblio.Enabled = True
    txtTMPbiblio.Font = Font["Monospace"]
    txtTMPbiblio.Background = Color.White
    txtTMPbiblio.SetFocus

    BtnNuevoBib.Visible = False
    btnGuardarBib.Visible = True
    btnGuardarCambiosBib.Visible = False
    BtnEliminarBib.Visible = False
  Endif

End

Public Sub btnGuardarBib_Click()

  ' Verificar que hay un artículo asociado (solo para revistas)
  If Trim(idArticuloBibtex.Text) = "" Then
    ' Si es revista, mostrar mensaje de error
    Message.Info("Debe tener un artículo asociado a esta referencia. No es posible guardar la entrada.")
    Return
  Endif

  ' Verificar que hay una texto en la clavebib
  If Trim(txtClaveBibtex.Text) = "" Then
    Message.Info("Debe generar una clave. No es posible guardar la entrada.")
    Return
  Endif

  If m_Bibtex.VerificarCaracteresInvalidos() Then Return

  If m_Bibtex.VerificacionBase() Then Return

  m_Bibtex.GuardarBibtexPrimeraVez()
  m_Bibtex.RefrescarTableViewBibtexEnCurso()
  m_Bibtex.LimpiarTextboxBibtex()
  m_Bibtex.RellenarComboBoxBibTeX()
  gvReferenciasEnCurso.Refresh

  txtTMPbiblio.Enabled = False
  txtTMPbiblio.Background = Color.Background
  txtTMPbiblio.Clear
  TabPanel5.Index = 0

  BtnNuevoBib.Visible = True
  btnGuardarBib.Visible = False
  btnGuardarCambiosBib.Visible = False
  BtnEliminarBib.Visible = False

Catch
  Message.Error("Se obtuvo el siguiente error al intentar guardar: <b>" & Error.Text & "</b>.")

End

Public Sub btnGuardarCambiosBib_Click()

  m_Bibtex.GuardarCambiosBibtex()
  m_Bibtex.RefrescarTableViewBibtexEnCurso()
  m_Bibtex.LimpiarTextboxBibtex()
  m_Bibtex.RellenarComboBoxBibTeX()
  gvReferenciasEnCurso.Refresh

  BtnNuevoBib.Visible = True
  btnGuardarBib.Visible = False
  btnGuardarCambiosBib.Visible = False
  BtnEliminarBib.Visible = False

End

Public Sub cmbTipoDeEntrada_Click()

  If cmbTipoDeEntrada.Text = "thesis" Then
    hbTesis.Visible = True
  Else
    hbTesis.Visible = False
    ' Limpiar el ComboBox cuando se oculta
    cmbTipoDeTesis.Text = ""
    cmbTipoDeTesis.Index = -1
  Endif

End

Public Sub btnGenerarClaveBib_Click()

  m_Bibtex.AgregarClaveBib()

End

Public Sub btnVerificarURL_Click()

  m_FuncionesGenericas.VerificarURLDesdeCampo(txtUrl)

End

Public Sub btnVerificarDOI_Click()

  m_FuncionesGenericas.VerificarDOI(txtDoi)

End

Public Sub btnChequearISBN_Click()

  Dim ISBN As String = txtISBN.Text

  If m_FuncionesGenericas.EsISBNValido(ISBN) Then
    Message.Info("El ISBN es válido.")
  Else
    Message.Warning("El ISBN no es válido.")
  End If

End

Public Sub btnChequearISSN_Click()

  Dim sISSN As String
  Dim sURL As String

  ' Obtener el texto del TextBox
  sISSN = txtIssn.Text

  ' Verificar que no esté vacío
  If Trim(sISSN) = "" Then
    Message.Error("Por favor, introduce un ISSN para buscar")
    Return
  Endif

  ' Validar formato ISSN y dígito de control
  If Not m_FuncionesGenericas.IsValidISSN(sISSN) Then
    Message.Error("El ISSN no es válido. Debe tener el formato XXXX-XXXX o XXXXXXXX y pasar la validación del dígito de control.")
    Return
  Endif

  ' Construir la URL de búsqueda para el portal ISSN
  ' $URL = "https://scholar.google.com/scholar?q=" & URL.Encode(sISSN)
  sURL = "https://portal.issn.org/resource/ISSN/" & Replace(sISSN, "-", "")

  ' Abrir la URL en el navegador predeterminado
  Desktop.Open(sURL)

End

Public Sub btnBuscarGoogle_Click()

  Dim sURL As String = Trim(txtUrl.Text)

  ' Verificar que no esté vacío
  If Trim(sURL) = "" Then
    Message.Error("Por favor, introduce un URL.")
    Return
  Endif

  ' Abrir la URL en el navegador predeterminado
  Desktop.Open(sURL)

End

Public Sub BtnBuscarAuthor_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtAuthor, gvReferenciasEnCurso)

End

Public Sub BtnBuscarBookAuthor_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtBookAuthor, gvReferenciasEnCurso)

End

Public Sub BtnBuscarEditor_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtEditor, gvReferenciasEnCurso)

End

Public Sub BtnBuscarTituloReferencia_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtTitle, gvReferenciasEnCurso)

End

Public Sub BtnBuscarBookTitle_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtBookTitle, gvReferenciasEnCurso)

End

Public Sub BtnBuscarMainTitle_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtMainTitle, gvReferenciasEnCurso)

End

' Ocultar el ComboBox cuando se hace clic en el formulario
Public Sub Form_Click()

  ComboBoxPublisher.Visible = False
  ComboBoxInstitution.Visible = False
  ComboBoxOrganization.Visible = False

End

Public Sub BtnBuscarClaveBib_Click()

  m_FuncionesGenericas.BuscarPorCampo(txtClaveBibtex, gvReferenciasEnCurso)

End

Public Sub btnEmpujarGitLocal_Click()

  Dim fecha As String
  Dim rutaGit As String

  fecha = Format(Date(), "dd-mm-yyyy") ' Obtener la fecha actual
  rutaGit = File.Dir(txtProyecto.Text) & "/.git"

  ' Verificar si el directorio existe
  If Not Exist(rutaGit) Then
    TerminalViewProyecto.Input("git init --initial-branch=main" & "\n")
    TerminalViewProyecto.Input("git add ." & "\n")
    TerminalViewProyecto.Input("git commit -m " & fecha & "\n")
    TerminalViewProyecto.SetFocus()
  Else
    TerminalViewProyecto.Input("git add ." & "\n")
    TerminalViewProyecto.Input("git commit -m " & fecha & "\n")
    TerminalViewProyecto.SetFocus()
  Endif

End

Public Sub btnEmpujarGitHubRemoto_Click()

  Dim fecha As String
  Dim usuario As String = Trim(txtUsuarioGit.Text)
  Dim IdGitHub As String
  Dim resultado As String
  Dim repoLocal As Boolean = False
  Dim repoConfigurado As Boolean = False
  Dim ramaMain As Boolean = False

  ' Obtener la fecha actual
  fecha = Format(Date(), "dd-mm-yyyy")

  ' Verificar si el nombre de usuario está vacío
  If usuario = "" Then
    Message.Error("Debe indicar su nombre de usuario en GitHub", "Ok")
    Return
  End If

  IdGitHub = "git@github.com:" & usuario & "/" & NombreProyecto & ".git"

  ' Verificar si el directorio actual es un repositorio Git
  resultado = Shell$(NombreProyecto & "/git rev-parse --is-inside-work-tree 2>/dev/null")
  If Trim(resultado) = "true" Then
    repoLocal = True
  Endif

  ' Si no es un repositorio, inicializarlo
  If Not repoLocal Then
    TerminalViewProyecto.Input("git init" & "\n")
  Endif

  ' Verificar si el repositorio ya tiene un origin configurado
  resultado = Shell$("git remote -v")
  If InStr(resultado, IdGitHub) > 0 Then
    repoConfigurado = True
  Endif

  ' Verificar si la rama actual es main
  resultado = Shell$("git branch --show-current")
  If Trim(resultado) = "main" Then
    ramaMain = True
  Endif

  ' Si el repo no está configurado, agregar origin
  If Not repoConfigurado Then
    TerminalViewProyecto.Input("git remote add origin " & IdGitHub & "\n")
  Endif

  ' Si la rama no es main, cambiar a main
  If Not ramaMain Then
    TerminalViewProyecto.Input("git branch -M main" & "\n")
  Endif

  ' Ejecutar los comandos principales
  TerminalViewProyecto.Input("git add ." & "\n")
  TerminalViewProyecto.Input("git commit -m '" & fecha & "'" & "\n")
  TerminalViewProyecto.Input("git push --set-upstream origin main" & "\n")
  TerminalViewProyecto.SetFocus()

End

Public Sub btnRefrescarGrid_Click()

  DirViewProyecto.Root = File.Dir(txtProyecto.Text)
  DirViewProyecto.Reload
  FileViewProyecto.Reload

End

' Ocultar el ComboBox cuando el TextBox pierde el foco
Public Sub txtPublisher_LostFocus()
  ' Usar un Timer para dar tiempo a que se procese el click del ComboBox

  TimerPublisher.Delay = 100
  TimerPublisher.Start()

End

' Ocultar el ComboBox cuando el TextBox pierde el foco
Public Sub txtInstitution_LostFocus()
  ' Usar un Timer para dar tiempo a que se procese el click del ComboBox

  TimerInstitution.Delay = 100
  TimerInstitution.Start()

End

' Ocultar el ComboBox cuando el TextBox pierde el foco
Public Sub txtOrganization_LostFocus()
  ' Usar un Timer para dar tiempo a que se procese el click del ComboBox

  TimerOrganization.Delay = 100
  TimerOrganization.Start()

End

' Método adicional para manejar cuando el usuario hace clic fuera del combo
Public Sub txtPublisher_GotFocus()
  ' Opcional: mostrar todos los resultados cuando el textbox obtiene el foco

  If Trim(txtPublisher.Text) <> "" Then
    m_FuncionesGenericas.BuscarEditorialDesdeTexto()
  Endif

End

' Método adicional para manejar cuando el usuario hace clic fuera del combo
Public Sub txtInstitution_GotFocus()
  ' Opcional: mostrar todos los resultados cuando el textbox obtiene el foco

  If Trim(txtInstitution.Text) <> "" Then
    m_FuncionesGenericas.BuscarInstitucionDesdeTexto()
  Endif

End

' Método adicional para manejar cuando el usuario hace clic fuera del combo
Public Sub txtOrganization_GotFocus()

  If Trim(txtOrganization.Text) <> "" Then
    m_FuncionesGenericas.BuscarInstitucionDesdeTexto()
  Endif

End

Public Sub btnBuscarTituloEnGoogle_Click()

  Dim sTITULO As String = Trim(txtTitle.Text)

  ' Verificar que no esté vacío
  If sTITULO = "" Then
    Message.Error("Por favor, introduce un título a buscar.")
    Return
  Endif

  ' Abrir la búsqueda en el navegador predeterminado
  Desktop.Open("https://www.google.com/search?q=" & sTITULO)

End

Public Sub btnChequearISSNRevista_Click()

  Dim sISSN As String
  Dim sURL As String

  ' Obtener el texto del TextBox
  sISSN = txtRevistaISSN.Text

  ' Verificar que no esté vacío
  If Trim(sISSN) = "" Then
    Message.Error("Por favor, introduce un ISSN para buscar")
    Return
  Endif

  ' Validar formato ISSN y dígito de control
  If Not m_FuncionesGenericas.IsValidISSN(sISSN) Then
    Message.Error("El ISSN no es válido. Debe tener el formato XXXX-XXXX o XXXXXXXX y pasar la validación del dígito de control.")
    Return
  Endif

  ' Construir la URL de búsqueda para el portal ISSN
  ' $URL = "https://scholar.google.com/scholar?q=" & URL.Encode(sISSN)
  sURL = "https://portal.issn.org/resource/ISSN/" & Replace(sISSN, "-", "")

  ' Abrir la URL en el navegador predeterminado
  Desktop.Open(sURL)

End

Public Sub btnVerificarURLetica_Click()

  m_FuncionesGenericas.VerificarURLDesdeCampo(txtRevistaPoliticaEticaURL)

End

Public Sub btnVerificarURLrevisores_Click()

  m_FuncionesGenericas.VerificarURLDesdeCampo(txtPoliticaRevisoresURL)

End

Public Sub btnVerificarURLopen_Click()

  m_FuncionesGenericas.VerificarURLDesdeCampo(txtPoliticaOpenAccessURL)

End

Public Sub btnVerificarDOIarticulo_Click()

  m_FuncionesGenericas.VerificarURLDesdeCampo(txtArticuloDoi)

End

Public Sub btnVerificarURLrevista_Click()

  m_FuncionesGenericas.VerificarURLDesdeCampo(txtRevistaURL)

End

Public Sub btnEditorxml_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesPermitidas As String[]

  ' Definir las extensiones de archivos de texto permitidas
  aExtensionesPermitidas = ["xml"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de texto válido
  If aExtensionesPermitidas.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es un archivo de texto válido.\nExtensiones permitidas: " & aExtensionesPermitidas.Join(", "))
    Return
  Endif

  ' Ejecutar XML Copy Editor con el archivo
  Try Exec ["xmlcopyeditor", sRutaCompleta] Wait
  ' ' Abrir el archivo de texto
  ' Try Desktop.Open(sRutaCompleta)

  ' Verificar si ocurrió un error
  If Error Then
    Message.Error("Error al abrir el archivo de texto:\n" & Error.Text)
  Endif

End

Public Sub btnLimpiarConsola_Click()

  TextBoxBuscarEnConsola.Clear
  TerminalViewProyecto.Input("clear" & "\n")

End

Public Sub btnChequearAbreviatura_Click()

  Dim sNLM As String
  Dim sURL As String

  ' Obtener el texto del TextBox
  sNLM = Trim(txtRevistaTitulo.Text)

  ' Verificar que no esté vacío
  If sNLM = "" Then
    Message.Error("Por favor, introduce el nombre de la revista para buscar.")
    Return
  Endif

  ' Reemplazar espacios por "+" para la URL
  sNLM = Replace(sNLM, " ", "+")

  ' Construir la URL con la búsqueda incluida
  sURL = "https://www.ncbi.nlm.nih.gov/nlmcatalog?term=" & sNLM

  ' Abrir la URL en el navegador predeterminado
  Desktop.Open(sURL)

End

Public Sub ComboBoxArticuloAsociadoEnbibtex_Click()

  m_FuncionesGenericas.ComboBoxArticuloAsociadoEnbibtex()

End

Public Sub gbMetadatosAutores_Data(Row As Integer, Column As Integer)

  If (ContenidoAut <> Null) Then
    If Row >= 0 And Row < ContenidoArt.Count Then
      ContenidoAut.MoveTo(Row)
      Try gbMetadatosAutores.Data.Text = Str(ContenidoAut[Column])
    Endif
  Endif

  ' Color alternado para las filas
  If Row Mod 2 = 0 Then
    gbMetadatosAutores.Data.Background = Color.RGB(230, 230, 230)
  Else
    gbMetadatosAutores.Data.Background = Color.White
  Endif

End

Public Sub btnNuevoAutor_Click()

  m_Autores.LimpiarTextboxAutores
  m_Autores.ObtenerIdNuevoAutor()
  ' m_Autores.RefrescarTableViewAutores()

  ' configurar como se muestran los botones
  btnNuevoAutor.Visible = False
  btnGuardarAutor.Visible = True
  btnGuardarCambiosAutor.Visible = False
  btnBorrarAutor.Visible = False

End

Public Sub btnGuardarAutor_Click()

  If idArticuloAutor.Text = "" Then
    Message.Info("Debe asociar un artículo.")
    Return
  Endif

  m_Autores.GuardarAutoresPrimeraVez()
  m_Autores.RefrescarTableViewAutores()
  m_Autores.LimpiarTextboxAutores

  ' configurar como se muestran los botones
  btnNuevoAutor.Visible = True
  btnGuardarAutor.Visible = False
  btnGuardarCambiosAutor.Visible = False
  btnBorrarAutor.Visible = False

End

Public Sub btnGuardarCambiosAutor_Click()

  m_Autores.GuardarCambiosAutores()
  m_Autores.ObtenerIdNuevoAutor()
  m_Autores.RefrescarTableViewAutores()
  m_Autores.LimpiarTextboxAutores

  ' configurar como se muestran los botones
  btnNuevoAutor.Visible = True
  btnGuardarAutor.Visible = False
  btnGuardarCambiosAutor.Visible = False
  btnBorrarAutor.Visible = False

End

Public Sub gbMetadatosAutores_Click()

  ' configurar como se muestran los botones
  btnNuevoAutor.Visible = True
  btnGuardarAutor.Visible = False
  btnGuardarCambiosAutor.Visible = True
  btnBorrarAutor.Visible = True

  ' Mostrar los datos en los TextBox
  m_Autores.MostrarMetadatosEnTableViewAutores(gbMetadatosAutores.Row)

  ' Sincronizar el ComboBox con el ID del artículo
  m_FuncionesGenericas.ActualizarComboBoxArticuloAsociadoDesdeId()

End

Public Sub btnGuardarCambiosEditor_Click()

  If sRutaArchivoAbierto = "" Or Not Exist(sRutaArchivoAbierto) Then
    Message.Warning("No hay un archivo válido cargado para guardar.")
    Return
  Endif

  ' Intentar guardar
  Try File.Save(sRutaArchivoAbierto, TextAreaProyecto.Text)

  If Error Then
    Message.Error("Error al guardar el archivo: " & Error.Text)
    Error.Clear
    Return
  Endif

  Message.Info("Archivo guardado correctamente.")

End

Public Sub menuSalir_Click()

  m_InicioCierre.CerrarTodo()

End

Public Sub menuBlockDeNotas_Click()

  f_BlockNotas.ShowModal()

End

Public Sub menuReslpaldarBBDD_Click()

  Dim sOrigen As String = User.Home & "/.gbadoc/gbadoc.sqlite"
  Dim sDestino As String
  Dim sDirectorioDestino As String
  Dim sNombreArchivo As String = "gbadoc_backup_" & Format(Now, "yyyymmdd_hhmmss") & ".sqlite"

  ' Verificar si el archivo existe
  If Not Exist(sOrigen) Then
    Message.Error("No se encontró el archivo de base de datos en: " & sOrigen)
    Return
  Endif

  ' Mostrar diálogo para seleccionar directorio
  Dialog.Title = "Seleccione la carpeta donde guardar la copia"
  If Dialog.SelectDirectory() <> 0 Then
    Return  ' Usuario canceló
  Endif

  sDirectorioDestino = Dialog.Path
  sDestino = sDirectorioDestino & "/" & sNombreArchivo

  ' Copiar el archivo
  Try Copy sOrigen To sDestino
  If Error Then
    Message.Error("Error al realizar la copia de seguridad: " & Error.Text)
    Return
  Endif

  Message.Info("Copia de seguridad creada en:" & gb.NewLine & sDestino)

End

Public Sub menuVerProyecto_Click()

  Dim sURL As String

  sURL = "https://albertomoyano.github.io/gbpublisher/"

  Desktop.Open(sURL)

End

Public Sub menuConversion_Click()

  f_Conversor.ShowModal()

End

Private Function URLEncode(sTexto As String) As String

  Dim sResultado As String = ""
  Dim i As Integer
  Dim c As String
  Dim code As Integer

  For i = 1 To Len(sTexto)
    c = Mid(sTexto, i, 1)
    code = Asc(c)

    Select Case c
      Case "A" To "Z", "a" To "z", "0" To "9", "-", "_", ".", "~"
        sResultado &= c
      Case " "
        sResultado &= "+"  ' o usar %20 si querés más precisión
      Case Else
        sResultado &= "%" & Hex(code, 2)
    End Select
  Next

  Return sResultado

End Function

Public Sub ButtonBuscarOrcidAutor_Click()

  Dim sNombre As String
  Dim sURL As String

  sNombre = txtAutorOrcid.Text

  If Trim(sNombre) = "" Then
    Message.Error("Por favor, introduce un nombre para buscar el ORCID")
    Return
  Endif

  sURL = "https://orcid.org/orcid-search/search?searchQuery=" & URLEncode(sNombre)

  Desktop.Open(sURL)

End

Public Sub menuAvisoLegal_Click()

  f_AvisoLegal.ShowModal()

End

Public Sub menuAbrirRevista_Click()

  TipoProyectoActual = m_Constantes.TIPO_REVISTA_MD
  AbrirProyecto(m_Constantes.TIPO_REVISTA_MD)

End

Public Sub menuAbrirLibroMD_Click()

  TipoProyectoActual = m_Constantes.TIPO_LIBRO_MD
  AbrirProyecto(m_Constantes.TIPO_LIBRO_MD)

End

Public Sub menuAbrirLibroLTX_Click()

  TipoProyectoActual = m_Constantes.TIPO_LIBRO_LATEX
  AbrirProyecto(m_Constantes.TIPO_LIBRO_LATEX)

End

Public Sub menuEPUBlibro_Click()' compilar epub libro

  ' Verificar que txtProyecto.Text no esté vacío
  If Trim(txtProyecto.Text) = "" Then
    Message.Warning("No se ha especificado un archivo de proyecto")
    Return
  Else
    Dim sExtension As String
    ' obtener la extensión del archivo
    sExtension = LCase(File.Ext(txtProyecto.Text))
    ' Ejecutar la función correspondiente según la extensión
    Select Case sExtension
      Case "tex"
        m_FuncionesExportar.GenerarEPUBlibroTEX()
      Case "md"
        m_FuncionesExportar.GenerarEPUBlibroMD()
      Default
        Message.Error("Extensión no soportada: " & sExtension & Chr(10) & "Solo se admiten archivos .tex y .md")
    End Select

  Endif

End

Public Sub menuPDFlibro_Click()

  ' Verificar que txtProyecto.Text no esté vacío
  If Trim(txtProyecto.Text) = "" Then
    Message.Warning("No se ha especificado un archivo de proyecto")
    Return
  Else
    Dim sExtension As String
    ' obtener la extensión del archivo
    sExtension = LCase(File.Ext(txtProyecto.Text))
    ' Ejecutar la función correspondiente según la extensión
    Select Case sExtension
      Case "tex"
        m_FuncionesExportar.GenerarPDFlibroTEX()
      Case "md"
        m_FuncionesExportar.GenerarPDFlibroMD()
      Default
        Message.Error("Extensión no soportada: " & sExtension & Chr(10) & "Solo se admiten archivos .tex y .md")
    End Select

  Endif

End

Public Sub btbBuscarTapita_Click()

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.png", ("Archivos png"), ("Todos los archivos")]
  Dialog.AutoExt = True
  Dialog.Path = RutaProyecto & "/media/"
  If Dialog.OpenFile() Then
    Return
  Else
    txtImagenTapita.Text = File.Name(Dialog.Path)
  Endif
Catch
  Message.Error("No se pudo abrir el archivo")

End

Public Sub AbrirProyecto(nTipoProyecto As Integer)

  Select Case nTipoProyecto
    Case m_Constantes.TIPO_REVISTA_MD
      Dialog.Title = "Abrir revista (Markdown)"
      Dialog.Filter = ["*.md", "Revista en Markdown"]
    Case m_Constantes.TIPO_LIBRO_MD
      Dialog.Title = "Abrir libro (Markdown)"
      Dialog.Filter = ["*.md", "Libro en Markdown"]
    Case m_Constantes.TIPO_LIBRO_LATEX
      Dialog.Title = "Abrir libro (LaTeX)"
      Dialog.Filter = ["*.tex", "Libro en LaTeX"]
  End Select

  Dialog.AutoExt = False  ' IMPORTANTE: No cambiar extensiones automáticamente
  Dialog.Path = User.Home

  If Dialog.OpenFile() Then Return

  ' Guardamos el tipo de proyecto para usar en otras condiciones
  TipoProyectoActual = nTipoProyecto

  ' Llamamos a la función correspondiente según el tipo
  Select Case nTipoProyecto
    Case m_Constantes.TIPO_REVISTA_MD
      AbrirRevistaMD()
    Case m_Constantes.TIPO_LIBRO_MD
      AbrirLibroMD()
    Case m_Constantes.TIPO_LIBRO_LATEX
      AbrirLibroTEX()
  End Select

End

Private Function ObtenerDescripcionTipo(iTipo As Integer) As String

  Select Case iTipo
    Case m_Constantes.TIPO_REVISTA_MD
      Return "Revista MD"
    Case m_Constantes.TIPO_LIBRO_MD
      Return "Libro MD"
    Case m_Constantes.TIPO_LIBRO_LATEX
      Return "Libro LaTeX"
    Default
      Return "Tipo desconocido (" & iTipo & ")"
  End Select

End

Public Sub AbrirRevistaMD()

  Dim sRutaSeleccionada As String = Dialog.Path

  ' VALIDAR EXTENSIÓN ANTES DE CONTINUAR
  Dim sExtension As String = LCase(File.Ext(sRutaSeleccionada))

  If sExtension <> "md" Then
    Message.Error("El archivo seleccionado no es un archivo markdown (.md)." & gb.NewLine &
      "Archivo: " & sRutaSeleccionada & gb.NewLine &
      "Extensión encontrada: ." & sExtension & gb.NewLine &
      "Use la función correspondiente para abrir archivos de ese tipo." & gb.NewLine & "\n" &
      "No se ejecutará ninguna acción.")
    Return
  Endif

  ' VALIDACIÓN ADICIONAL: Verificar que el archivo comience con 'r' (revista)
  Dim sNombreArchivo As String = LCase(File.Name(sRutaSeleccionada))
  If Left(sNombreArchivo, 1) <> "r" Then
    Message.Error("El archivo seleccionado no es una revista." & gb.NewLine &
      "Los archivos de revista deben comenzar con <b>r</b> (en minúscula)." & gb.NewLine &
      "Se intento abrir: <b>" & File.Name(sRutaSeleccionada) & "</b>")
    Return
  Endif

  ' *** AQUÍ: Detener y guardar el proyecto anterior (si existe) ***
  ' Solo detener si hay un proyecto activo (verificar que txtProyecto no esté vacío)
  If txtProyecto.Text <> "" Then
    m_Timer.DetenerContador()
  Endif

  txtProyecto.Text = sRutaSeleccionada
  NombreProyecto = File.Name(sRutaSeleccionada)
  RutaProyecto = File.Dir(sRutaSeleccionada)
  m_Metadatos.LimpiarCamposMetadatos()

  Dim sSQL As String
  Dim Contenido As Result
  Dim nuevoID As Integer

  ' Verificar si ya existe el proyecto
  sSQL = "SELECT id, intTipoProducto FROM revistas WHERE nombre_archivo = &1"
  Contenido = m_OnOff_y_Red.meConn.Exec(sSQL, NombreProyecto)

  If Contenido.Available Then
    ' El proyecto existe - verificar tipo ANTES de continuar
    Dim iTipoBD As Integer = Contenido["intTipoProducto"]

    ' CORRECCIÓN: Comparar con TIPO_REVISTA_MD, no TIPO_LIBRO_MD
    If iTipoBD <> m_Constantes.TIPO_REVISTA_MD Then
      Message.Error("El archivo seleccionado no corresponde con el tipo de producto elegido." & gb.NewLine &
        "Se esperaba: Revista MD" & gb.NewLine &  ' CORRECCIÓN: Decir "Revista MD"
        "Se encontró: " & ObtenerDescripcionTipo(iTipoBD))
      Return  ' CORRECCIÓN: Solo Return, no Me.Close()
    Endif

    Message.Info("El archivo '" & NombreProyecto & "' ya está registrado.")
    nuevoID = Contenido["id"]
  Else
    ' Proyecto nuevo - crear registro
    Dim ResultadoInsert As Result
    sSQL = "INSERT INTO revistas (nombre_archivo, intTipoProducto) VALUES (&1, &2)"
    ResultadoInsert = m_OnOff_y_Red.meConn.Exec(sSQL, NombreProyecto, m_Constantes.TIPO_REVISTA_MD)
    ' Obtener el ID insertado
    nuevoID = m_OnOff_y_Red.meConn.Exec("SELECT last_insert_rowid()")[0]
    Message.Info("Proyecto registrado con metadatos iniciales.")
  Endif

  ' precargamos el combox de los estilos para bib
  CargarCSLBibTeX()

  ' Cargar metadatos - verificar si la carga fue exitosa
  If Not m_Metadatos.CargarMetadatosDelProyecto(NombreProyecto) Then
    ' CORRECCIÓN: Solo Return, no Me.Close()
    Return
  Endif

  ' Mostrar los ID
  idMetadatoRevista.Text = nuevoID
  intTipoProducto.Text = m_Constantes.TIPO_REVISTA_MD

  ' Limpiar caché o entorno previo
  Shell Quote$("rm -rf " & User.Home & "/.local/share/org.gambas.*") & "\n" Wait

  ' bibtex
  m_Bibtex.LimpiarTextboxBibtex()
  m_Bibtex.RellenarComboBoxBibTeX()
  sSQL = "SELECT * FROM bibtex WHERE id_revista = &1 ORDER BY id DESC"
  ContenidoBib = m_OnOff_y_Red.meConn.Exec(sSQL, nuevoID)

  If ContenidoBib.Available Then
    gvReferenciasEnCurso.Clear
    gvReferenciasEnCurso.Rows.Count = ContenidoBib.Count
    m_Bibtex.ConfigurarTableViewBibtexEnCurso(gvReferenciasEnCurso)
    gvReferenciasEnCurso.Refresh
  Else
    gvReferenciasEnCurso.Rows.Count = 0
  Endif

  CargarScripts()

  ' Configurar interfaz para revista MD
  ConfigurarInterfazRevista()

  ' Finalmente, controlar estructura de carpetas
  ControlarCarpetas()

  ' Iniciamos el contador
  m_Timer.IniciarContadorReloj(nuevoID)

End

'   ' Libros, revista y artículos
'   ContenidoArt = m_OnOff_y_Red.meConn.Exec("SELECT * FROM articulos WHERE id_revistas=" & idMetadatoRevista.Text)
'   If Error Then
'     Message.Error("Error al cargar artículos: " & Error.Text)
'     Return
'   Else
'     gbMetadatosArticulos.Rows.Count = ContenidoArt.Count
'     m_Articulos.ConfigurarTableViewArticulos(gbMetadatosArticulos)
'     m_FuncionesGenericas.LlenarComboBoxArticulos()
'     '
'     ' Autores
'     ContenidoAut = m_OnOff_y_Red.meConn.Exec("SELECT * FROM autores WHERE id_revista = &1", FMain.idMetadatoRevista.Text)
'     If Error Then
'       Message.Error("Error al cargar autores: " & Error.Text)
'       Return
'     End If
'     '
'     FMain.gbMetadatosAutores.Rows.Count = ContenidoAut.Count
'     m_Autores.ConfigurarTableViewAutores(gbMetadatosAutores)
'     '

Public Sub AbrirLibroMD()

  Dim sRutaSeleccionada As String = Dialog.Path

  ' VALIDAR EXTENSIÓN ANTES DE CONTINUAR
  Dim sExtension As String = LCase(File.Ext(sRutaSeleccionada))

  If sExtension <> "md" Then
    Message.Error("El archivo seleccionado no es un archivo markdown (.md)." & gb.NewLine &
      "Archivo: " & sRutaSeleccionada & gb.NewLine &
      "Extensión encontrada: ." & sExtension & gb.NewLine &
      "Use la función correspondiente para abrir archivos de ese tipo.")
    Return  ' Solo salir de la función, no cerrar la aplicación
  Endif

  ' VALIDACIÓN ADICIONAL: Verificar que el archivo comience con 'l' (libro)
  Dim sNombreArchivo As String = LCase(File.Name(sRutaSeleccionada))
  If Left(sNombreArchivo, 1) <> "l" Then
    Message.Error("El archivo seleccionado no es un libro en markdown." & gb.NewLine &
      "Los archivos de libro deben comenzar con <b>l</b> (en minúscula)." & gb.NewLine &
      "Se intento abrir: <b>" & File.Name(sRutaSeleccionada) & "</b>")
    Return
  Endif

  ' *** AQUÍ: Detener y guardar el proyecto anterior (si existe) ***
  ' Solo detener si hay un proyecto activo (verificar que txtProyecto no esté vacío)
  If txtProyecto.Text <> "" Then
    m_Timer.DetenerContador()
  Endif

  txtProyecto.Text = sRutaSeleccionada
  NombreProyecto = File.Name(sRutaSeleccionada)
  RutaProyecto = File.Dir(sRutaSeleccionada)

  m_Metadatos.LimpiarCamposMetadatos()

  Dim sSQL As String
  Dim Contenido As Result
  Dim nuevoID As Integer

  ' Verificar si ya existe el proyecto
  sSQL = "SELECT id, intTipoProducto FROM revistas WHERE nombre_archivo = &1"
  Contenido = m_OnOff_y_Red.meConn.Exec(sSQL, NombreProyecto)

  If Contenido.Available Then
    ' El proyecto existe - verificar tipo ANTES de continuar
    Dim iTipoBD As Integer = Contenido["intTipoProducto"]

    If iTipoBD <> m_Constantes.TIPO_LIBRO_MD Then
      Message.Error("El archivo seleccionado no corresponde con el tipo de producto elegido." & gb.NewLine &
        "Se esperaba: Libro MD" & gb.NewLine &
        "Se encontró: " & ObtenerDescripcionTipo(iTipoBD))
      Return
    Endif

    Message.Info("El archivo '" & NombreProyecto & "' ya está registrado.")
    nuevoID = Contenido["id"]
  Else
    ' Proyecto nuevo - crear registro
    Dim ResultadoInsert As Result
    sSQL = "INSERT INTO revistas (nombre_archivo, intTipoProducto) VALUES (&1, &2)"
    ResultadoInsert = m_OnOff_y_Red.meConn.Exec(sSQL, NombreProyecto, m_Constantes.TIPO_LIBRO_MD)
    ' Obtener el ID insertado
    nuevoID = m_OnOff_y_Red.meConn.Exec("SELECT last_insert_rowid()")[0]
    Message.Info("Proyecto registrado con metadatos iniciales.")
  Endif

  ' precargamos el combox de los estilos para bib
  CargarCSLBibTeX()

  ' Cargar metadatos - verificar si la carga fue exitosa
  If Not m_Metadatos.CargarMetadatosDelProyecto(NombreProyecto) Then
    ' Si CargarMetadatosDelProyecto retorna False, solo salir
    Return
  Endif

  ' Mostrar los ID
  idMetadatoRevista.Text = nuevoID
  intTipoProducto.Text = m_Constantes.TIPO_LIBRO_MD

  ' Limpiar caché o entorno previo
  Shell Quote$("rm -rf " & User.Home & "/.local/share/org.gambas.*") & "\n" Wait

  ' bibtex
  m_Bibtex.LimpiarTextboxBibtex()
  m_Bibtex.RellenarComboBoxBibTeX()
  sSQL = "SELECT * FROM bibtex WHERE id_revista = &1 ORDER BY id DESC"
  ContenidoBib = m_OnOff_y_Red.meConn.Exec(sSQL, nuevoID)
  If ContenidoBib.Available Then
    gvReferenciasEnCurso.Clear
    gvReferenciasEnCurso.Rows.Count = ContenidoBib.Count
    m_Bibtex.ConfigurarTableViewBibtexEnCurso(gvReferenciasEnCurso)
    gvReferenciasEnCurso.Refresh
  Else
    gvReferenciasEnCurso.Rows.Count = 0
  Endif

  CargarScripts()

  ' Configurar interfaz para libro MD
  ConfigurarInterfazLibroMD()

  ' Finalmente, controlar estructura de carpetas
  ControlarCarpetas()

  ' Iniciamos el contador
  m_Timer.IniciarContadorReloj(nuevoID)

End

Public Sub AbrirLibroTEX()

  Dim sRutaSeleccionada As String = Dialog.Path

  ' VALIDAR EXTENSIÓN ANTES DE CONTINUAR
  Dim sExtension As String = LCase(File.Ext(sRutaSeleccionada))

  If sExtension <> "tex" Then
    Message.Error("El archivo seleccionado no es un archivo LaTeX (.tex)." & gb.NewLine &
      "Archivo: " & sRutaSeleccionada & gb.NewLine &
      "Extensión encontrada: ." & sExtension & gb.NewLine &
      "Use la función correspondiente para abrir archivos de ese tipo.")
    Return  ' Solo salir de la función, no cerrar la aplicación
  Endif

  ' VALIDACIÓN ADICIONAL: Verificar que el archivo comience con 'l' (libro)
  Dim sNombreArchivo As String = LCase(File.Name(sRutaSeleccionada))
  If Left(sNombreArchivo, 1) <> "l" Then
    Message.Error("El archivo seleccionado no es un libro en LaTeX." & gb.NewLine &
      "Los archivos de libro deben comenzar con <b>l</b> (en minúscula)." & gb.NewLine &
      "Se intento abrir: <b>" & File.Name(sRutaSeleccionada) & "</b>")
    Return
  Endif

  ' *** AQUÍ: Detener y guardar el proyecto anterior (si existe) ***
  ' Solo detener si hay un proyecto activo (verificar que txtProyecto no esté vacío)
  If txtProyecto.Text <> "" Then
    m_Timer.DetenerContador()
  Endif

  txtProyecto.Text = sRutaSeleccionada
  NombreProyecto = File.Name(sRutaSeleccionada)
  RutaProyecto = File.Dir(sRutaSeleccionada)

  m_Metadatos.LimpiarCamposMetadatos()

  Dim sSQL As String
  Dim Contenido As Result
  Dim nuevoID As Integer

  ' Verificar si ya existe el proyecto
  sSQL = "SELECT id, intTipoProducto FROM revistas WHERE nombre_archivo = &1"
  Contenido = m_OnOff_y_Red.meConn.Exec(sSQL, NombreProyecto)

  If Contenido.Available Then
    ' El proyecto existe - verificar tipo ANTES de continuar
    Dim iTipoBD As Integer = Contenido["intTipoProducto"]

    If iTipoBD <> m_Constantes.TIPO_LIBRO_LATEX Then
      Message.Error("El archivo seleccionado no corresponde con el tipo de producto elegido." & gb.NewLine &
        "Se esperaba: Libro LaTeX" & gb.NewLine &
        "Se encontró: " & ObtenerDescripcionTipo(iTipoBD))
      Return
    Endif

    Message.Info("El archivo '" & NombreProyecto & "' ya está registrado.")
    nuevoID = Contenido["id"]
  Else
    ' Proyecto nuevo - crear registro
    Dim ResultadoInsert As Result
    sSQL = "INSERT INTO revistas (nombre_archivo, intTipoProducto) VALUES (&1, &2)"
    ResultadoInsert = m_OnOff_y_Red.meConn.Exec(sSQL, NombreProyecto, m_Constantes.TIPO_LIBRO_LATEX)
    ' Obtener el ID insertado
    nuevoID = m_OnOff_y_Red.meConn.Exec("SELECT last_insert_rowid()")[0]
    Message.Info("Proyecto registrado con metadatos iniciales.")
  Endif

  ' Cargar metadatos - verificar si la carga fue exitosa
  If Not m_Metadatos.CargarMetadatosDelProyecto(NombreProyecto) Then
    ' Si CargarMetadatosDelProyecto retorna False, solo salir
    Return
  Endif

  ' Mostrar los ID
  idMetadatoRevista.Text = nuevoID
  intTipoProducto.Text = m_Constantes.TIPO_LIBRO_LATEX

  ' Limpiar caché o entorno previo
  Shell Quote$("rm -rf " & User.Home & "/.local/share/org.gambas.*") & "\n" Wait

  ' bibtex
  m_Bibtex.LimpiarTextboxBibtex()
  m_Bibtex.RellenarComboBoxBibTeX()
  sSQL = "SELECT * FROM bibtex WHERE id_revista = &1 ORDER BY id DESC"
  ContenidoBib = m_OnOff_y_Red.meConn.Exec(sSQL, nuevoID)
  If ContenidoBib.Available Then
    gvReferenciasEnCurso.Clear
    gvReferenciasEnCurso.Rows.Count = ContenidoBib.Count
    m_Bibtex.ConfigurarTableViewBibtexEnCurso(gvReferenciasEnCurso)
    gvReferenciasEnCurso.Refresh
  Else
    gvReferenciasEnCurso.Rows.Count = 0
  Endif

  CargarScripts()

  ' Configurar interfaz para libro MD
  ConfigurarInterfazLibroTEX()

  ' Finalmente, controlar estructura de carpetas
  ControlarCarpetas()

  ' Iniciamos el contador
  m_Timer.IniciarContadorReloj(nuevoID)

End

Private Sub ConfigurarInterfazRevista()

  ' Mostrar elementos específicos de revista
  MenuButtonSalidasRevista.Visible = True
  TabPanelMetadatosRevista.Visible = True
  TabPanelBibliografia.Visible = True
  Panel1Bibliografia.Visible = True
  HBoxB1.Visible = True
  HBoxTipoCSL.Visible = True
  HBoxB3.Visible = True
  HBoxB4.Visible = True
  HBoxBuscarEnProyecto.Visible = True
  HBoxComboBoxScriptPy.Visible = True
  HBoxGuardarTextArea.Visible = True
  TabPanelMetadatosRevista[0].Text = "Metadatos de la revista"
  TabPanelMetadatosRevista[1].Text = "Metadatos de los artículos"
  TabPanelMetadatosRevista[2].Text = "Metadatos de los autores"
  MenuButtonSalidasRevista.Visible = True
  MenuButtonSalidasLibro.Visible = False
  MenuButtonSalidasLibroSoloTeX.Visible = False
  btnOrdenDeTaller.Visible = False
  HBoxTEI1.Visible = True
  HBoxTEI2.Visible = True
  HBoxTEI3.Visible = True
  HBoxSigla1.Visible = False
  HBoxSigla2.Visible = False
  HBoxSigla3.Visible = False
  HBoxtxtMostrarFiltrosLua.Visible = True

  ' m_Metadatos.CargarMetadatosDelProyecto(NombreProyecto)
  m_FuncionesGenericas.MostrarMetadatosRevista()
  ' Configurar terminal y vistas
  TerminalViewProyecto.Input("cd " & RutaProyecto & "\n")
  TerminalViewProyecto.Input("clear" & "\n")
  PictureBoxProyecto.Image = Null
  DirViewProyecto.Root = File.Dir(txtProyecto.Text)
  DirViewProyecto.Reload' hacemos un refresco luego de aseguramos de que las carpetas fueron revisadas
  FileViewProyecto.Refresh

End

Private Sub ConfigurarInterfazLibroMD()
  ' Configurar interfaz específica para libro MD

  MenuButtonSalidasRevista.Visible = True
  TabPanelMetadatosRevista.Visible = True
  TabPanelBibliografia.Visible = True
  Panel1Bibliografia.Visible = True
  HBoxB1.Visible = True
  HBoxTipoCSL.Visible = True
  HBoxB3.Visible = True
  HBoxB4.Visible = True
  HBoxBuscarEnProyecto.Visible = True
  HBoxComboBoxScriptPy.Visible = True
  HBoxGuardarTextArea.Visible = True
  TabPanelMetadatosRevista[0].Text = "Metadatos del libro"
  TabPanelMetadatosRevista[1].Text = "Metadatos de los capítulos"
  TabPanelMetadatosRevista[2].Text = "Metadatos de los autores"
  MenuButtonSalidasRevista.Visible = False
  MenuButtonSalidasLibro.Visible = True
  MenuButtonSalidasLibroSoloTeX.Visible = False
  btnOrdenDeTaller.Visible = True
  HBoxTEI1.Visible = True
  HBoxTEI2.Visible = True
  HBoxTEI3.Visible = True
  HBoxSigla1.Visible = False
  HBoxSigla2.Visible = False
  HBoxSigla3.Visible = False
  menuXMLlibroIndesign.Visible = True
  menuHTML5libro.Visible = True
  HBoxtxtMostrarFiltrosLua.Visible = True
  m_FuncionesGenericas.MostrarMetadatosLibro()' se refiere a los hbox

  ' Configurar terminal y vistas
  TerminalViewProyecto.Input("cd " & RutaProyecto & "\n")
  TerminalViewProyecto.Input("clear" & "\n")
  PictureBoxProyecto.Image = Null
  DirViewProyecto.Root = File.Dir(txtProyecto.Text)
  DirViewProyecto.Reload' hacemos un refresco luego de aseguramos de que las carpetas fueron revisadas
  FileViewProyecto.Refresh

End

Private Sub ConfigurarInterfazLibroTEX()
  ' Configurar interfaz específica para libro LaTeX

  MenuButtonSalidasRevista.Visible = True
  TabPanelMetadatosRevista.Visible = True
  TabPanelBibliografia.Visible = True
  Panel1Bibliografia.Visible = True
  HBoxB1.Visible = True
  HBoxB3.Visible = True
  HBoxB4.Visible = True
  HBoxBuscarEnProyecto.Visible = True
  HBoxComboBoxScriptPy.Visible = True
  HBoxGuardarTextArea.Visible = True
  TabPanelMetadatosRevista[0].Text = "Metadatos del libro"
  TabPanelMetadatosRevista[1].Text = "Metadatos de los capítulos"
  TabPanelMetadatosRevista[2].Text = "Metadatos de los autores"
  MenuButtonSalidasRevista.Visible = False
  MenuButtonSalidasLibro.Visible = False
  MenuButtonSalidasLibroSoloTeX.Visible = True
  btnOrdenDeTaller.Visible = True
  HBoxTEI1.Visible = False
  HBoxTEI2.Visible = False
  HBoxTEI3.Visible = False
  HBoxSigla1.Visible = True
  HBoxSigla2.Visible = True
  HBoxSigla3.Visible = True
  menuXMLlibroIndesign.Visible = False
  menuHTML5libro.Visible = False
  HBoxtxtMostrarFiltrosLua.Visible = False
  m_FuncionesGenericas.MostrarMetadatosLibro()
  HBoxTipoCSL.Visible = False

  ' Configurar terminal y vistas
  TerminalViewProyecto.Input("cd " & RutaProyecto & "\n")
  TerminalViewProyecto.Input("clear" & "\n")
  PictureBoxProyecto.Image = Null
  DirViewProyecto.Root = File.Dir(txtProyecto.Text)
  DirViewProyecto.Reload' hacemos un refresco luego de aseguramos de que las carpetas fueron revisadas
  FileViewProyecto.Refresh

End

Public Sub btnVerEPUB_Click()

  Dim sRutaCompleta As String
  Dim sArchivoSeleccionado As String

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Else
    Desktop.Open(sRutaCompleta)
  Endif

End

Public Sub btnVerPDF_Click()

  Dim sRutaCompleta As String
  Dim sArchivoSeleccionado As String

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Else
    Desktop.Open(sRutaCompleta)
  Endif

End

Public Sub btnVerHTML_Click()

  Dim sRutaCompleta As String
  Dim sArchivoSeleccionado As String

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Else
    Desktop.Open(sRutaCompleta)
  Endif

End

Public Sub CargarScripts()

  Dim rutaScripts As String = User.Home &/ ".gbadoc/python"
  Dim archivos As String[]
  Dim archivo As String
  Dim linea As String
  Dim descripcion As String
  Dim archivoBase As String
  Dim hFile As File

  ' Verificar que el directorio existe
  If Not Exist(rutaScripts) Then
    Message.Error("El directorio de python no existe: " & rutaScripts)
    Return
  Endif

  ComboBoxScriptPy.Clear

  ' Obtener lista de archivos .py
  archivos = Dir(rutaScripts, "*.py")
  If Error Then
    Message.Error("Error al leer el directorio: " & Error.Text)
    Return
  Endif

  ' Procesar cada archivo
  For Each archivo In archivos
    descripcion = "Sin descripción"

    ' Construir ruta completa del archivo
    Dim rutaCompleta As String = rutaScripts &/ archivo

    ' Intentar leer la primera línea del archivo para obtener descripción
    hFile = Open rutaCompleta For Read
    If Not Error Then
      Line Input #hFile, linea
      If Not Error And linea <> "" Then
        linea = Trim(linea)
        If Left(linea, 1) = "#" Then
          ' Extraer descripción, eliminando "# " del inicio
          If Len(linea) > 2 Then
            descripcion = Trim(Mid(linea, 3))
          Endif
        Endif
      Endif
      Close #hFile
    Else
      descripcion = "Error al leer archivo"
    Endif

    ' Agregar al ComboBox
    archivoBase = File.BaseName(archivo) & ".py"
    ComboBoxScriptPy.Add(descripcion & " [" & archivoBase & "]")
  Next

  ' Mostrar mensaje si no se encontraron archivos
  If ComboBoxScriptPy.Count = 0 Then
    Message.Info("No se encontraron archivos .py en el directorio")
  Endif

End

Public Sub EjecutarScript()

  Dim rutaScript As String
  Dim comando As String

  ' Verificar que hay un script seleccionado
  If ComboBoxScriptPy.Index = -1 Then
    Message.Warning("Selecciona un script primero")
    Return
  Endif

  ' Verificar que el bash está disponible
  If Not $Bash Or If $Bash.State <> Process.Running Then
    Message.Error("La terminal no está disponible")
    Return
  Endif

  ' Obtener la ruta del script seleccionado
  ' Extraer el nombre del archivo del texto entre corchetes
  Dim textoSeleccionado As String = ComboBoxScriptPy.Text
  Dim nombreArchivo As String
  Dim inicio As Integer
  Dim fin As Integer

  inicio = InStr(textoSeleccionado, "[")
  fin = InStr(textoSeleccionado, "]")

  If inicio > 0 And fin > inicio Then
    nombreArchivo = Mid(textoSeleccionado, inicio + 1, fin - inicio - 1)
    rutaScript = User.Home &/ ".gbadoc/python" &/ nombreArchivo
  Else
    Message.Error("No se pudo determinar el archivo de python")
    Return
  Endif

  ' Verificar que el script existe
  If Not Exist(rutaScript) Then
    Message.Error("El script de python no existe: " & rutaScript)
    Return
  Endif

  ' Construir y ejecutar el comando Python
  comando = "python3 \"" & rutaScript & "\" \"`pwd`\""

  ' Enviar información y comando a la terminal
  Print #$Bash, "# Ejecutando: " & nombreArchivo
  Print #$Bash, comando

End

Public Sub ComboBoxScriptPy_Click()

  EjecutarScript()

End

Public Sub BtnBuscarEnArchivos_Click()

  Dim palabraAbuscar As String

  palabraAbuscar = TextBoxBuscarEnConsola.Text

  TerminalViewProyecto.Clear
  TerminalViewProyecto.Input("python3 " & rutaApp & "/buscador.py " & palabraAbuscar & "\n")
  TerminalViewProyecto.SetFocus

End

Public Sub btnLimpiarEditor_Click()

  Dim bTieneCambios As Boolean
  Dim sContenidoOriginal As String
  Dim iRespuesta As Integer

  ' Verificar si hay un archivo cargado
  If sRutaArchivoAbierto = "" Then
    ' No hay archivo cargado, simplemente limpiar
    LimpiarEditor()
    Return
  Endif

  ' Verificar si el archivo aún existe
  If Not Exist(sRutaArchivoAbierto) Then
    ' El archivo ya no existe, limpiar sin verificar cambios
    LimpiarEditor()
    Return
  Endif

  ' Cargar el contenido original del archivo para comparar
  Try sContenidoOriginal = File.Load(sRutaArchivoAbierto)
  If Error Then
    ' Error al leer el archivo original, preguntar al usuario qué hacer
    iRespuesta = Message.Question("No se pudo verificar si hay cambios sin guardar.\n¿Desea limpiar el editor de todas formas?", "Sí", "No")
    If iRespuesta = 1 Then ' Sí
      LimpiarEditor()
    Endif
    Return
  Endif

  ' Comparar el contenido actual con el original
  bTieneCambios = (TextAreaProyecto.Text <> sContenidoOriginal)

  If bTieneCambios Then
    ' Hay cambios sin guardar, preguntar al usuario
    iRespuesta = Message.Question("El archivo tiene cambios sin guardar.\n¿Qué desea hacer?", "Guardar y limpiar", "Limpiar sin guardar", "Cancelar")

    Select Case iRespuesta
      Case 1 ' Guardar y limpiar
        ' Llamar a la función de guardar
        btnGuardarCambiosEditor_Click()
        ' Solo limpiar si no hubo error al guardar
        If Error.Text = "" Then
          LimpiarEditor()
        Endif

      Case 2 ' Limpiar sin guardar
        LimpiarEditor()

      Case 3 ' Cancelar
        Return

    End Select
  Else
    ' No hay cambios, limpiar directamente
    LimpiarEditor()
  Endif

End

Private Function LimpiarEditor()

  TextAreaProyecto.Text = ""
  sRutaArchivoAbierto = ""
  PictureBoxProyecto.Visible = False
  TextAreaProyecto.Visible = True

End

Public Sub txtLibroSerieNumero_KeyPress()
  ' Solo permitir números 0-9, teclas de control y backspace

  If Key.Code >= Key.F1 Then Return  ' Permitir teclas de función
  If Key.Code = Key.BackSpace Or Key.Code = Key.Delete Or Key.Code = Key.Left Or Key.Code = Key.Right Then Return

  ' Si no es un dígito, cancelar la tecla
  If Key.Text < "0" Or Key.Text > "9" Then
    Stop Event  ' Cancela la entrada de la tecla
  Endif

End

Public Sub txtRevistaVolumen_KeyPress()
  ' Solo permitir números 0-9, teclas de control y backspace

  If Key.Code >= Key.F1 Then Return  ' Permitir teclas de función
  If Key.Code = Key.BackSpace Or Key.Code = Key.Delete Or Key.Code = Key.Left Or Key.Code = Key.Right Then Return

  ' Si no es un dígito, cancelar la tecla
  If Key.Text < "0" Or Key.Text > "9" Then
    Stop Event  ' Cancela la entrada de la tecla
  Endif

End

Private Function ValidarEmail(email As String) As Boolean

  email = Trim(email)
  If email = "" Then Return True  ' Email vacío es válido

  Dim partes As String[] = Split(email, "@")
  If partes.Count <> 2 Then Return False

  Dim usuario As String = partes[0]
  Dim dominio As String = partes[1]

  If Len(usuario) = 0 Or Len(dominio) = 0 Then Return False
  If InStr(dominio, ".") = 0 Then Return False

  Return True

End

Public Sub txtEditorJefeEmail_LostFocus()

  If Not ValidarEmail(txtEditorJefeEmail.Text) Then
    Message.Warning("Email no válido")
    txtEditorJefeEmail.SetFocus()
  Endif

End

Public Sub txtRevistaEmail_LostFocus()

  If Not ValidarEmail(txtRevistaEmail.Text) Then
    Message.Warning("Email no válido")
    txtRevistaEmail.SetFocus()
  Endif

End

Public Sub txtEditorAsociadoEmail_LostFocus()

  If Not ValidarEmail(txtEditorAsociadoEmail.Text) Then
    Message.Warning("Email no válido")
    txtEditorAsociadoEmail.SetFocus()
  Endif

End

Public Sub txtCoordinadorEditorialEmail_LostFocus()

  If Not ValidarEmail(txtCoordinadorEditorialEmail.Text) Then
    Message.Warning("Email no válido")
    txtCoordinadorEditorialEmail.SetFocus()
  Endif

End

Public Sub CargarCSLBibTeX()

  Dim rutaArchivos As String = User.Home & "/.gbadoc/csl"
  Dim archivos As String[]
  Dim archivo As String
  Dim linea As String
  Dim descripcion As String
  Dim hFile As File
  Dim i As Integer
  Dim encontrado As Boolean

  ' Verificar que el directorio existe
  If Not Exist(rutaArchivos) Then
    Message.Error("El directorio no existe: " & rutaArchivos)
    Return
  Endif

  cmbTipoCSL.Clear

  ' Obtener lista de archivos .csl
  archivos = Dir(rutaArchivos, "*.csl")
  If Error Then
    archivos = New String[]
  Endif

  ' Agregar archivos .tex
  Dim archivosTex As String[] = Dir(rutaArchivos, "*.tex")
  If Not Error Then
    For Each archivo In archivosTex
      archivos.Add(archivo)
    Next
  Endif

  If archivos.Count = 0 Then
    Message.Info("No se encontraron archivos .csl o .tex en el directorio")
    Return
  Endif

  ' Procesar cada archivo
  For Each archivo In archivos
    descripcion = "Sin descripción"
    encontrado = False
    Dim rutaCompleta As String = rutaArchivos &/ archivo

    hFile = Open rutaCompleta For Read
    If Not Error Then
      ' Leer las primeras líneas buscando el comentario
      For i = 1 To 3  ' Revisar hasta 3 líneas por si acaso
        If Eof(hFile) Then Break

        Line Input #hFile, linea
        If Error Then Break

        linea = Trim(linea)

        ' Para archivos .csl (comentarios XML)
        If Right(archivo, 4) = ".csl" Then
          If Left(linea, 4) = "<!--" And Right(linea, 3) = "-->" Then
            descripcion = Trim(Mid(linea, 5, Len(linea) - 7))
            encontrado = True
            Break
          Endif
          ' Para archivos .tex (comentarios LaTeX)
        Else If Right(archivo, 4) = ".tex" Then
          If Left(linea, 1) = "%" And Len(linea) > 2 Then
            descripcion = Trim(Mid(linea, 2))
            encontrado = True
            Break
          Endif
        Endif
      Next

      Close #hFile
    Else
      descripcion = "Error al leer archivo"
    Endif

    ' Agregar al ComboBox
    cmbTipoCSL.Add(descripcion & " [" & archivo & "]")
  Next

  If cmbTipoCSL.Count = 0 Then
    Message.Info("No se encontraron archivos válidos en el directorio")
  Endif

End

Public Sub txtRevistaIdioma_KeyPress()

  Dim texto As String = txtRevistaIdioma.Text
  Dim posicion As Integer = txtRevistaIdioma.Pos
  Dim tecla As String = Key.Text

  ' Permitir teclas de control
  If Key.Code = Key.BackSpace Or Key.Code = Key.Delete Or Key.Code = Key.Left Or Key.Code = Key.Right Then Return
  If Key.Code >= Key.F1 Then Return  ' Teclas de función

  ' Limitar longitud máxima (aa-AA = 5 caracteres)
  If Len(texto) >= 5 And Key.Code <> Key.BackSpace Then
    Stop Event
    Return
  Endif

  ' Validar según posición
  Select Case posicion
    Case 0, 1  ' Primeras dos posiciones: solo letras minúsculas
      If tecla < "a" Or tecla > "z" Then Stop Event
    Case 2  ' Tercera posición: solo guión
      If tecla <> "-" Then Stop Event
    Case 3, 4  ' Cuarta y quinta posición: solo letras mayúsculas
      If tecla < "A" Or tecla > "Z" Then Stop Event
    Default
      Stop Event  ' No permitir más caracteres
  End Select

End

Public Sub txtRevistaIdioma_LostFocus()

  Dim idioma As String = Trim(txtRevistaIdioma.Text)

  ' Si está vacío, es válido - restaurar color y salir
  If idioma = "" Then
    txtRevistaIdioma.Background = Color.White
    Return
  Endif

  ' Si no está vacío, debe tener exactamente 5 caracteres
  If Len(idioma) <> 5 Then
    txtRevistaIdioma.Background = Color.Pink
    Message.Warning("El formato del idioma debe ser: aa-AA (por ejemplo: es-ES)")
    txtRevistaIdioma.SetFocus()
    Return
  Endif

  ' Validar formato completo
  Dim char1 As String = Mid(idioma, 1, 1)
  Dim char2 As String = Mid(idioma, 2, 1)
  Dim char3 As String = Mid(idioma, 3, 1)
  Dim char4 As String = Mid(idioma, 4, 1)
  Dim char5 As String = Mid(idioma, 5, 1)

  If (char1 < "a" Or char1 > "z") Or
      (char2 < "a" Or char2 > "z") Or
      (char3 <> "-") Or
      (char4 < "A" Or char4 > "Z") Or
      (char5 < "A" Or char5 > "Z") Then
    txtRevistaIdioma.Background = Color.Pink
    Message.Warning("El formato del idioma debe ser: aa-AA (por ejemplo: es-ES)")
    txtRevistaIdioma.SetFocus()
  Else
    txtRevistaIdioma.Background = Color.White
  Endif

End

Public Sub txtFechaPublicacion_KeyPress()

  Dim texto As String = txtFechaPublicacion.Text
  Dim posicion As Integer = txtFechaPublicacion.Pos
  Dim tecla As String = Key.Text

  ' Permitir teclas de control
  If Key.Code = Key.BackSpace Or Key.Code = Key.Delete Or Key.Code = Key.Left Or Key.Code = Key.Right Then Return
  If Key.Code >= Key.F1 Then Return  ' Teclas de función

  ' Limitar longitud máxima (YYYY-MM-DD = 10 caracteres)
  If Len(texto) >= 10 And Key.Code <> Key.BackSpace Then
    Stop Event
    Return
  Endif

  ' Validar según posición
  Select Case posicion
    Case 0, 1, 2, 3  ' Año (posiciones 0-3): solo números
      If tecla < "0" Or tecla > "9" Then Stop Event
    Case 4  ' Primera posición del guión (posición 4): solo "-"
      If tecla <> "-" Then Stop Event
    Case 5, 6  ' Mes (posiciones 5-6): solo números
      If tecla < "0" Or tecla > "9" Then Stop Event
    Case 7  ' Segunda posición del guión (posición 7): solo "-"
      If tecla <> "-" Then Stop Event
    Case 8, 9  ' Día (posiciones 8-9): solo números
      If tecla < "0" Or tecla > "9" Then Stop Event
    Default
      Stop Event  ' No permitir más caracteres
  End Select

End

Public Sub txtFechaPublicacion_LostFocus()

  Dim fecha As String = Trim(txtFechaPublicacion.Text)  ' Cambio aquí: usar txtFechaPublicacion.Text

  ' Si está vacío, restaurar color blanco y salir
  If fecha = "" Then
    txtFechaPublicacion.Background = Color.White
    Return
  Endif

  ' Si no tiene 10 caracteres, es inválido
  If Len(fecha) <> 10 Then
    txtFechaPublicacion.Background = Color.Pink
    Message.Warning("La fecha debe tener el formato año-mes-día (YYYY-MM-DD)")
    txtFechaPublicacion.SetFocus()
    Return
  Endif

  ' Validar estructura y valores
  Dim partes As String[] = Split(fecha, "-")
  If partes.Count <> 3 Then
    txtFechaPublicacion.Background = Color.Pink
    Message.Warning("La fecha debe tener el formato año-mes-día (YYYY-MM-DD)")
    txtFechaPublicacion.SetFocus()
    Return
  Endif

  Dim anio As Integer = Val(partes[0])
  Dim mes As Integer = Val(partes[1])
  Dim dia As Integer = Val(partes[2])

  ' Validar rangos
  If anio < 1900 Or anio > 2100 Or mes < 1 Or mes > 12 Or dia < 1 Or dia > 31 Then
    txtFechaPublicacion.Background = Color.Pink
    Message.Warning("Fecha fuera de rango, no es válida")
    txtFechaPublicacion.SetFocus()
  Else
    txtFechaPublicacion.Background = Color.White
  Endif

End

Public Sub ButtonSeleccionarLogoLicencia_Click()

  Dialog.Title = "Seleccionar archivo"
  Dialog.Filter = ["*.png", ("Archivos png"), ("Todos los archivos")]
  Dialog.AutoExt = True
  Dialog.Path = RutaProyecto & "/media/"
  If Dialog.OpenFile() Then
    Return
  Else
    txtImagenTapita.Text = File.Name(Dialog.Path)
  Endif
Catch
  Message.Error("No se pudo abrir el archivo")

End

Public Sub ButtonVerResumenEs_Click()

  f_TXTextendido.OriginalTextBox = txtLibroResumenEs
  f_TXTextendido.ShowModal

End

Public Sub ButtonVerResumenEn_Click()

  f_TXTextendido.OriginalTextBox = txtLibroResumenEn
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarResumenEs_Click()

  f_TXTextendido.OriginalTextBox = txtResumenEs
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarResumenEn_Click()

  f_TXTextendido.OriginalTextBox = txtResumenEn
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarAutorBiografia_Click()

  f_TXTextendido.OriginalTextBox = txtAutorBiografia
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarAbstract_Click()

  f_TXTextendido.OriginalTextBox = txtAbstract
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarNote_Click()

  f_TXTextendido.OriginalTextBox = txtNote
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarLibrary_Click()

  f_TXTextendido.OriginalTextBox = txtLibrary
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarAnnotation_Click()

  f_TXTextendido.OriginalTextBox = txtAnnotation
  f_TXTextendido.ShowModal

End

Public Sub ButtonMostrarFile_Click()

  f_TXTextendido.OriginalTextBox = txtFile
  f_TXTextendido.ShowModal

End

Public Sub btnMostrarGlosarioDescripcionExtendido_Click()

  f_TXTextendido.OriginalTextBox = txtDescripcionGlosario
  f_TXTextendido.ShowModal

End

Public Sub btnTextoTeiExtendido_Click()

  f_TXTextendido.OriginalTextBox = txtComentariosTei
  f_TXTextendido.ShowModal

End

Public Sub menuSalidaTeX_Click()

  ' Verificar que txtProyecto.Text no esté vacío
  If Trim(txtProyecto.Text) = "" Then
    Message.Warning("No se ha especificado un archivo de proyecto")
    Return
  Else
    Dim sExtension As String
    ' obtener la extensión del archivo
    sExtension = LCase(File.Ext(txtProyecto.Text))
    ' Ejecutar la función correspondiente según la extensión
    Select Case sExtension
      Case "md"
        m_FuncionesExportar.GenerarTEXlibroMD()
      Default
        Message.Error("Extensión no soportada: " & sExtension & Chr(10) & "Solo se admiten archivos .md")
    End Select

  Endif

End

Public Sub btnEjecutarScribus_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesPermitidas As String[]

  ' Definir las extensiones de archivos de texto permitidas
  aExtensionesPermitidas = ["sla"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de texto válido
  If aExtensionesPermitidas.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es un archivo válido.\nExtensiones permitidas: " & aExtensionesPermitidas.Join(", "))
    Return
  Endif

  ' Ejecutar XML Copy Editor con el archivo
  Try Exec ["scribus", sRutaCompleta] Wait
  ' ' Abrir el archivo de texto
  ' Try Desktop.Open(sRutaCompleta)

  ' Verificar si ocurrió un error
  If Error Then
    Message.Error("Error al abrir el archivo de texto:\n" & Error.Text)
  Endif

End

Public Sub btnEjecutarTeXStudio_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesPermitidas As String[]

  ' Definir las extensiones de archivos de texto permitidas
  aExtensionesPermitidas = ["tex"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de texto válido
  If aExtensionesPermitidas.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es un archivo válido.\nExtensiones permitidas: " & aExtensionesPermitidas.Join(", "))
    Return
  Endif

  ' Ejecutar XML Copy Editor con el archivo
  Try Exec ["texstudio", sRutaCompleta] Wait

  ' Verificar si ocurrió un error
  If Error Then
    Message.Error("Error al abrir el archivo de texto:\n" & Error.Text)
  Endif

End

Public Sub btnOrdenDeTaller_Click()

  f_OrgenTaller.ShowModal()

End

Public Sub menuTeXconCambios_Click()

  Dim ProyectoTeX As String = File.Dir(txtProyecto.Text) &/ "salidas/tex/" & File.BaseName(FMain.txtProyecto.Text) & ".tex"
  Dim compilar As String = "latexmk -l -f -outdir=./salidas/pdf  --interaction=nonstopmode -pdflatex=lualatex -pdflua " & ProyectoTeX

  If Exist(ProyectoTeX) Then
    TerminalViewProyecto.Input(compilar & "\n")
    Wait 2
  Else
    Message.Info("No se encuentra el archivo " & File.BaseName(FMain.txtProyecto.Text) & ".tex para compilar.")
  Endif

  m_FuncionesGenericas.BorrarArchivosAuxiliares()

End

Public Sub menuXMLlibroIndesign_Click()

  m_FuncionesExportar.ObtenerXMLlibroIndesign()

End

Public Sub btnLimpiarTapita_Click()

  txtImagenTapita.Clear

End

Public Sub btnLimpiarLicencia_Click()

  txtLogoLicencia.Clear

End

Public Sub btnGeany_Click()

  Dim sArchivoSeleccionado As String
  Dim sRutaCompleta As String
  Dim sExtension As String
  Dim aExtensionesPermitidas As String[]

  ' Definir las extensiones de archivos de texto permitidas
  aExtensionesPermitidas = ["md", "css", "html", "xml", "bib", "tex", "yaml", "json", "lua"]

  ' Verificar que hay un archivo seleccionado en el FileView
  If FileViewProyecto.Current = "" Then
    Message.Warning("Por favor seleccione un archivo de la lista")
    Return
  Endif

  ' Obtener el archivo seleccionado
  sArchivoSeleccionado = FileViewProyecto.Current

  ' Construir la ruta completa del archivo
  sRutaCompleta = FileViewProyecto.Dir &/ sArchivoSeleccionado

  ' Verificar que el archivo existe
  If Not Exist(sRutaCompleta) Then
    Message.Error("El archivo seleccionado no existe")
    Return
  Endif

  ' Obtener la extensión del archivo
  sExtension = LCase(File.Ext(sArchivoSeleccionado))

  ' Verificar que es un archivo de texto válido
  If aExtensionesPermitidas.Find(sExtension) = -1 Then
    Message.Warning("El archivo seleccionado no es un archivo de texto válido.\nExtensiones permitidas: " & aExtensionesPermitidas.Join(", "))
    Return
  Endif

  ' Ejecutar XML Copy Editor con el archivo
  Try Exec ["geany", sRutaCompleta] Wait
  ' ' Abrir el archivo de texto
  ' Try Desktop.Open(sRutaCompleta)

  ' Verificar si ocurrió un error
  If Error Then
    Message.Error("Error al abrir el archivo de texto:\n" & Error.Text)
  Endif

End

Public Sub TimerHOY_Timer()

  m_Timer.ActualizarContador()

End

Public Sub menuPDFsoloTeX_Click()

  m_GenerarSalidas.GenerarPDFdesdeLATEX()

End

Public Sub txtAuthor_LostFocus()

  Dim autores As String = Trim(txtAuthor.Text)

  ' Si está vacío, restaurar color blanco y salir
  If autores = "" Then
    txtAuthor.Background = Color.White
    Return
  Endif

  ' Verificar si contiene caracteres prohibidos
  If InStr(autores, ";") > 0 Or InStr(autores, ":") > 0 Or InStr(autores, "&") > 0 Or InStr(autores, " y ") > 0 Then
    txtAuthor.Background = Color.Pink
    Message.Warning("Se han encontrado caracteres prohibidos en el campo Autor.")
    txtAuthor.SetFocus()
    Return
  Endif

  ' Si está todo bien, restaurar color blanco
  txtAuthor.Background = Color.White

End

Public Sub txtEditor_LostFocus()

  Dim editor As String = Trim(txtEditor.Text)

  ' Si está vacío, restaurar color blanco y salir
  If editor = "" Then
    txtEditor.Background = Color.White
    Return
  Endif

  ' Verificar si contiene caracteres prohibidos
  If InStr(editor, ";") > 0 Or InStr(editor, ":") > 0 Or InStr(editor, "&") > 0 Or InStr(editor, " y ") > 0 Then
    txtEditor.Background = Color.Pink
    Message.Warning("Se han encontrado caracteres prohibidos en el campo Editor.")
    txtEditor.SetFocus()
    Return
  Endif

  ' Si está todo bien, restaurar color blanco
  txtEditor.Background = Color.White

End

Public Sub txtBookAuthor_LostFocus()

  Dim bookautor As String = Trim(txtBookAuthor.Text)

  ' Si está vacío, restaurar color blanco y salir
  If bookautor = "" Then
    txtBookAuthor.Background = Color.White
    Return
  Endif

  ' Verificar si contiene caracteres prohibidos
  If InStr(bookautor, ";") > 0 Or InStr(bookautor, ":") > 0 Or InStr(bookautor, "&") > 0 Or InStr(bookautor, " y ") > 0 Then
    txtBookAuthor.Background = Color.Pink
    Message.Warning("Se han encontrado caracteres prohibidos en el campo Editor.")
    txtBookAuthor.SetFocus()
    Return
  Endif

  ' Si está todo bien, restaurar color blanco
  txtBookAuthor.Background = Color.White

End

Public Sub btnChequearISBNLibro_Click()

  Dim ISBN As String = txtRevistaISSN.Text

  If m_FuncionesGenericas.EsISBNValido(ISBN) Then
    Message.Info("El ISBN es válido.")
  Else
    Message.Warning("El ISBN no es válido.")
  End If

End

Public Sub ComboBoxLicencias_Click()

  ' Verificar que hay un elemento seleccionado
  If ComboBoxLicencias.Index >= 0 Then
    ' Copiar el texto del elemento seleccionado al TextBox
    txtLicencia.Text = ComboBoxLicencias.Text
  End If

End Sub

Public Sub btnInfo_Click()

  Message.Warning("<b>Atención:</b> gbpublisher solo admite rutas de directorios con letras simples (a-z, A-Z) y sin espacios.\n\nEl uso de acentos, ñ u otros caracteres especiales puede generar errores en las distintas compilaciones.", "Entendido")

End

Public Sub txtPublisher_KeyPress()

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then
    m_FuncionesGenericas.BuscarEditorialDesdeTexto()
  Endif

End

Public Sub txtInstitution_KeyPress()

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then
    m_FuncionesGenericas.BuscarInstitucionDesdeTexto()
  Endif

End

Public Sub txtOrganization_KeyPress()

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then
    m_FuncionesGenericas.BuscarOrganizationDesdeTexto()
  Endif

End

Public Sub txtLocation_KeyPress()

  If Key.Code = Key.Enter Or Key.Code = Key.Return Then
    m_FuncionesGenericas.BuscarLocationDesdeTexto()
  Endif

End

' Método adicional para manejar cuando el usuario hace clic fuera del combo
Public Sub txtLocation_GotFocus()
  ' Opcional: mostrar todos los resultados cuando el textbox obtiene el foco

  If Trim(txtLocation.Text) <> "" Then
    m_FuncionesGenericas.BuscarLocationDesdeTexto()
  Endif

End

Public Sub txtLocation_LostFocus()
  ' Usar un Timer para dar tiempo a que se procese el click del ComboBox

  TimerLocation.Delay = 100
  TimerLocation.Start()

End

' Timer para ocultar el ComboBox después de perder el foco
Public Sub TimerPublisher_Timer()

  TimerPublisher.Stop()
  ComboBoxPublisher.Visible = False

End

Public Sub TimerInstitution_Timer()

  TimerInstitution.Stop()
  ComboBoxInstitution.Visible = False

End

Public Sub TimerOrganization_Timer()

  TimerOrganization.Stop()
  ComboBoxOrganization.Visible = False

End

Public Sub TimerLocation_Timer()

  TimerLocation.Stop()
  ComboBoxLocation.Visible = False

End

Public Sub ComboBoxPublisher_Click()' Capturar la selección del ComboBox

  If ComboBoxPublisher.Index >= 0 Then
    txtPublisher.Text = ComboBoxPublisher.Text
    ComboBoxPublisher.Visible = False
  Endif

End

Public Sub ComboBoxInstitution_Click()' Capturar la selección del ComboBox

  If ComboBoxInstitution.Index >= 0 Then
    txtInstitution.Text = ComboBoxInstitution.Text
    ComboBoxInstitution.Visible = False
  Endif

End

Public Sub ComboBoxOrganization_Click()' Capturar la selección del ComboBox

  If ComboBoxOrganization.Index >= 0 Then
    txtOrganization.Text = ComboBoxOrganization.Text
    ComboBoxOrganization.Visible = False
  Endif

End

Public Sub ComboBoxLocation_Click()

  If ComboBoxLocation.Index >= 0 Then
    txtLocation.Text = ComboBoxLocation.Text
    ComboBoxLocation.Visible = False
  Endif

End
