' Gambas module file

Public RutaProyecto As String = File.Dir(FMain.txtProyecto.Text)

' --- Escapa cadenas para JSON ---
Private Function EscapeJSON(value As String) As String

  If IsNull(value) Or value = "" Then Return ""

  Dim result As String = value

  ' Escapar caracteres especiales en el orden correcto
  result = Replace(result, "\\", "\\\\")     ' \ -> \\
  result = Replace(result, "\"", "\\\"")     ' " -> \"
  result = Replace(result, Chr(8), "\\b")    ' Backspace -> \b
  result = Replace(result, Chr(12), "\\f")   ' Form feed -> \f
  result = Replace(result, Chr(10), "\\n")   ' Line feed -> \n
  result = Replace(result, Chr(13), "\\r")   ' Carriage return -> \r
  result = Replace(result, Chr(9), "\\t")    ' Tab -> \t

  Return result

End

Public Sub ExportarJSONsiglas()

  Dim r As Result
  Dim sJSON As String
  Dim firstRow As Boolean = True
  Dim i As Integer
  Dim valorCampo As String
  Dim outputFile As String

  ' 1) Obtener registros
  r = m_OnOff_y_Red.meConn.Exec("SELECT * FROM siglas WHERE id_revista = &1 ORDER BY id", FMain.idMetadatoRevista.Text)

  If r.Count = 0 Then
    Message.Info("No se encontraron referencias para exportar.")
    Return
  Endif

  ' 2) Construir JSON en memoria con formato legible
  sJSON = "[" & gb.NewLine

  For Each r
    If Not firstRow Then sJSON &= "," & gb.NewLine
    sJSON &= "  {" & gb.NewLine  ' Indentación para el objeto

    For i = 0 To r.Fields.Count - 1
      If r[i] = Null Then
        valorCampo = ""
      Else
        valorCampo = CStr(r[i])  ' Conversión explícita a String
      Endif

      If i > 0 Then sJSON &= "," & gb.NewLine
      sJSON &= "    \"" & r.Fields[i].Name & "\": \"" & EscapeJSON(valorCampo) & "\""  ' Doble indentación para campos
    Next

    sJSON &= gb.NewLine & "  }"  ' Cerrar objeto con indentación
    firstRow = False
  Next

  sJSON &= gb.NewLine & "]"  ' Cerrar array

  ' 3) Guardar archivo
  outputFile = RutaProyecto & "/files/siglas.json"

  ' Crear directorio si no existe
  If Not Exist(File.Dir(outputFile)) Then
    Mkdir File.Dir(outputFile)
  Endif

  File.Save(outputFile, sJSON)
  Message.Info("Exportación completada correctamente." & gb.NewLine & outputFile)

Catch
  Message.Error("Error durante la exportación: " & Error.Text)

End

Public Sub ImportarJSONsiglas()

  Dim sJSON As String
  Dim aJSON As Collection[]
  Dim item As Collection
  Dim inputFile As String
  Dim sql As String
  Dim registrosImportados As Integer = 0

  With Dialog
    .Title = "Seleccionar archivo de siglas JSON"
    .Filter = ["*.json", "Archivos JSON", "*", "Todos los archivos"]
    .Path = User.Home
  End With
  If Dialog.OpenFile() Then Return
  inputFile = Dialog.Path

  sJSON = File.Load(inputFile)
  If Trim(sJSON) = "" Then
    Message.Error("El archivo JSON está vacío.")
    Return
  Endif

  aJSON = JSON.Decode(sJSON)
  If aJSON.Count = 0 Then
    Message.Info("No se encontraron registros para importar.")
    Return
  Endif

  If Message.Question("¿Está seguro de importar " & aJSON.Count & " siglas?" & gb.NewLine &
      "Se asignarán al proyecto actual (ID: " & FMain.idMetadatoRevista.Text & ")") <> 1 Then
    Return
  Endif

  m_OnOff_y_Red.meConn.Begin()

  For Each item In aJSON
    Dim vIdRevista As String = FMain.idMetadatoRevista.Text
    Dim v1, v2, v3, v4, v5, v6, v7, v8, v9 As String

    ' Print "Objeto JSON leído: "; JSON.Encode(item)

    v1 = ""
    v2 = ""
    v3 = ""
    v4 = ""
    v5 = ""
    v6 = ""
    v7 = ""
    v8 = ""
    v9 = ""

    If item.Exist("txtClaveGlosario") Then v1 = CStr(item["txtClaveGlosario"])
    If item.Exist("cmbTipoDeEntradaGlosario") Then v2 = CStr(item["cmbTipoDeEntradaGlosario"])
    If item.Exist("txtNameGlosario") Then v3 = CStr(item["txtNameGlosario"])
    If item.Exist("txtDescripcionGlosario") Then v4 = CStr(item["txtDescripcionGlosario"])
    If item.Exist("txtFirstGlosario") Then v5 = CStr(item["txtFirstGlosario"])
    If item.Exist("txtTextGlosario") Then v6 = CStr(item["txtTextGlosario"])
    If item.Exist("txtFirstPluraIGlosario") Then v7 = CStr(item["txtFirstPluraIGlosario"])
    If item.Exist("txtPluralGlosario") Then v8 = CStr(item["txtPluralGlosario"])
    If item.Exist("txtSortGlosario") Then v9 = CStr(item["txtSortGlosario"])

    v1 = Replace(v1, "'", "''")
    v2 = Replace(v2, "'", "''")
    v3 = Replace(v3, "'", "''")
    v4 = Replace(v4, "'", "''")
    v5 = Replace(v5, "'", "''")
    v6 = Replace(v6, "'", "''")
    v7 = Replace(v7, "'", "''")
    v8 = Replace(v8, "'", "''")
    v9 = Replace(v9, "'", "''")

    sql = "INSERT INTO siglas (id_revista, txtClaveGlosario, cmbTipoDeEntradaGlosario, txtNameGlosario, txtDescripcionGlosario, txtFirstGlosario, txtTextGlosario, txtFirstPluraIGlosario, txtPluralGlosario, txtSortGlosario) VALUES ("
    sql = sql & vIdRevista & ", "
    sql = sql & "'" & v1 & "', "
    sql = sql & "'" & v2 & "', "
    sql = sql & "'" & v3 & "', "
    sql = sql & "'" & v4 & "', "
    sql = sql & "'" & v5 & "', "
    sql = sql & "'" & v6 & "', "
    sql = sql & "'" & v7 & "', "
    sql = sql & "'" & v8 & "', "
    sql = sql & "'" & v9 & "')"

    ' Print "SQL completa:"
    ' Print sql
    ' Print "---"

    Try m_OnOff_y_Red.meConn.Exec(sql)
    If Error Then
      ' Print "✗ Error en INSERT: " & Error.Text
      Error.Raise("Error en INSERT: " & Error.Text)
    Else
      ' Print "✔ INSERT ejecutado correctamente"
      registrosImportados += 1

      Dim verificacion As Result
      Try verificacion = m_OnOff_y_Red.meConn.Exec("SELECT * FROM siglas WHERE id_revista = " & FMain.idMetadatoRevista.Text & " ORDER BY id DESC LIMIT 1")
      If Not Error And verificacion.Available Then
        ' Print "  -> Verificación del registro insertado:"
        ' Print "     ID: " & verificacion["id"]
        ' Print "     txtClaveGlosario: '" & CStr(verificacion["txtClaveGlosario"]) & "'"
        ' Print "     txtNameGlosario: '" & CStr(verificacion["txtNameGlosario"]) & "'"
      Endif
    Endif
  Next

  m_OnOff_y_Red.meConn.Commit()
  ' Print "✔ Commit hecho"

  Message.Info("Importación completada correctamente." & gb.NewLine &
    registrosImportados & " siglas importadas desde: " & File.Name(inputFile) & gb.NewLine &
    "Proyecto ID: " & FMain.idMetadatoRevista.Text)

Catch
  m_OnOff_y_Red.meConn.Rollback()
  Message.Error("Error durante la importación: " & Error.Text)

End

Public Sub ExportarJSONbibtex()

  Dim r As Result
  Dim sJSON As String
  Dim firstRow As Boolean = True
  Dim i As Integer
  Dim valorCampo As String
  Dim outputFile As String

  ' 1) Obtener registros
  r = m_OnOff_y_Red.meConn.Exec("SELECT * FROM bibtex WHERE id_revista = &1 ORDER BY id", FMain.idMetadatoRevista.Text)

  If r.Count = 0 Then
    Message.Info("No se encontraron referencias para exportar.")
    Return
  Endif

  ' 2) Construir JSON en memoria con formato legible
  sJSON = "[" & gb.NewLine

  For Each r
    If Not firstRow Then sJSON &= "," & gb.NewLine
    sJSON &= "  {" & gb.NewLine  ' Indentación para el objeto

    For i = 0 To r.Fields.Count - 1
      If r[i] = Null Then
        valorCampo = ""
      Else
        valorCampo = CStr(r[i])  ' Conversión explícita a String
      Endif

      If i > 0 Then sJSON &= "," & gb.NewLine
      sJSON &= "    \"" & r.Fields[i].Name & "\": \"" & EscapeJSON(valorCampo) & "\""  ' Doble indentación para campos
    Next

    sJSON &= gb.NewLine & "  }"  ' Cerrar objeto con indentación
    firstRow = False
  Next

  sJSON &= gb.NewLine & "]"  ' Cerrar array

  ' 3) Guardar archivo
  outputFile = RutaProyecto & "/files/referencias.json"

  ' Crear directorio si no existe
  If Not Exist(File.Dir(outputFile)) Then
    Mkdir File.Dir(outputFile)
  Endif

  File.Save(outputFile, sJSON)
  Message.Info("Exportación completada correctamente." & gb.NewLine & outputFile)

Catch
  Message.Error("Error durante la exportación: " & Error.Text)

End

Public Sub ExportarRISbibtex()

  If m_FuncionesExportar.ExportarRIS() Then
    Message.Info("Archivo RIS exportado correctamente en:\n" & RutaProyecto & "/files/<b>" & File.BaseName(FMain.txtProyecto.Text) & ".ris</b>")
  Else
    Message.Error("Error al exportar el archivo RIS.")
  Endif

End

Public Sub ImportarJSONbibtex()

  Dim sJSON As String
  Dim aJSON As Collection[]
  Dim item As Collection
  Dim inputFile As String
  Dim sql As String
  Dim registrosImportados As Integer = 0

  With Dialog
    .Title = "Seleccionar archivo de referencias JSON"
    .Filter = ["*.json", "Archivos JSON", "*", "Todos los archivos"]
    .Path = User.Home
  End With
  If Dialog.OpenFile() Then Return
  inputFile = Dialog.Path

  sJSON = File.Load(inputFile)
  If Trim(sJSON) = "" Then
    Message.Error("El archivo JSON está vacío.")
    Return
  Endif

  aJSON = JSON.Decode(sJSON)
  If aJSON.Count = 0 Then
    Message.Info("No se encontraron registros para importar.")
    Return
  Endif

  If Message.Question("¿Está seguro de importar " & aJSON.Count & " referencias bibliográficas?" & gb.NewLine &
      "Se asignarán al proyecto actual (ID: " & FMain.idMetadatoRevista.Text & ")") <> 1 Then
    Return
  Endif

  m_OnOff_y_Red.meConn.Begin()

  For Each item In aJSON
    Dim vIdRevista As String = FMain.idMetadatoRevista.Text
    Dim vIdArticulo As String = "0"  ' Valor por defecto como en el JSON de ejemplo
    Dim v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 As String
    Dim v11, v12, v13, v14, v15, v16, v17, v18, v19, v20 As String
    Dim v21, v22, v23, v24, v25, v26, v27, v28, v29, v30 As String
    Dim v31, v32, v33, v34, v35, v36, v37, v38, v39, v40 As String
    Dim v41, v42, v43, v44, v45, v46, v47, v48, v49, v50 As String
    Dim v51, v52, v53, v54, v55, v56, v57, v58, v59, v60 As String
    Dim v61, v62, v63, v64, v65, v66, v67, v68, v69, v70 As String
    Dim v71, v72, v73, v74, v75, v76, v77, v78, v79, v80 As String
    Dim v81, v82, v83, v84, v85, v86, v87, v88, v89, v90 As String
    Dim v91, v92, v93, v94, v95, v96, v97, v98, v99, v100 As String
    Dim v101, v102, v103, v104, v105, v106, v107, v108, v109, v110 As String
    Dim v111, v112, v113 As String

    ' Inicializar todas las variables
    v1 = ""
    v2 = ""
    v3 = ""
    v4 = ""
    v5 = ""
    v6 = ""
    v7 = ""
    v8 = ""
    v9 = ""
    v10 = ""
    v11 = ""
    v12 = ""
    v13 = ""
    v14 = ""
    v15 = ""
    v16 = ""
    v17 = ""
    v18 = ""
    v19 = ""
    v20 = ""
    v21 = ""
    v22 = ""
    v23 = ""
    v24 = ""
    v25 = ""
    v26 = ""
    v27 = ""
    v28 = ""
    v29 = ""
    v30 = ""
    v31 = ""
    v32 = ""
    v33 = ""
    v34 = ""
    v35 = ""
    v36 = ""
    v37 = ""
    v38 = ""
    v39 = ""
    v40 = ""
    v41 = ""
    v42 = ""
    v43 = ""
    v44 = ""
    v45 = ""
    v46 = ""
    v47 = ""
    v48 = ""
    v49 = ""
    v50 = ""
    v51 = ""
    v52 = ""
    v53 = ""
    v54 = ""
    v55 = ""
    v56 = ""
    v57 = ""
    v58 = ""
    v59 = ""
    v60 = ""
    v61 = ""
    v62 = ""
    v63 = ""
    v64 = ""
    v65 = ""
    v66 = ""
    v67 = ""
    v68 = ""
    v69 = ""
    v70 = ""
    v71 = ""
    v72 = ""
    v73 = ""
    v74 = ""
    v75 = ""
    v76 = ""
    v77 = ""
    v78 = ""
    v79 = ""
    v80 = ""
    v81 = ""
    v82 = ""
    v83 = ""
    v84 = ""
    v85 = ""
    v86 = ""
    v87 = ""
    v88 = ""
    v89 = ""
    v90 = ""
    v91 = ""
    v92 = ""
    v93 = ""
    v94 = ""
    v95 = ""
    v96 = ""
    v97 = ""
    v98 = ""
    v99 = ""
    v100 = ""
    v101 = ""
    v102 = ""
    v103 = ""
    v104 = ""
    v105 = ""
    v106 = ""
    v107 = ""
    v108 = ""
    v109 = ""
    v110 = ""
    v111 = ""
    v112 = ""
    v113 = ""

    ' Extraer valores del JSON si existen
    If item.Exist("cmbTipoDeEntrada") Then v1 = CStr(item["cmbTipoDeEntrada"])
    If item.Exist("txtClaveBibtex") Then v2 = CStr(item["txtClaveBibtex"])
    If item.Exist("cmbTipoDeTesis") Then v3 = CStr(item["cmbTipoDeTesis"])
    If item.Exist("txtAuthor") Then v4 = CStr(item["txtAuthor"])
    If item.Exist("txtEditor") Then v5 = CStr(item["txtEditor"])
    If item.Exist("txtTitle") Then v6 = CStr(item["txtTitle"])
    If item.Exist("txtNameAddOn") Then v7 = CStr(item["txtNameAddOn"])
    If item.Exist("txtBookAuthor") Then v8 = CStr(item["txtBookAuthor"])
    If item.Exist("txtEditorA") Then v9 = CStr(item["txtEditorA"])
    If item.Exist("txtEditorB") Then v10 = CStr(item["txtEditorB"])
    If item.Exist("txtEditorC") Then v11 = CStr(item["txtEditorC"])
    If item.Exist("txtAfterword") Then v12 = CStr(item["txtAfterword"])
    If item.Exist("txtForeword") Then v13 = CStr(item["txtForeword"])
    If item.Exist("txtCommentator") Then v14 = CStr(item["txtCommentator"])
    If item.Exist("txtIntroduction") Then v15 = CStr(item["txtIntroduction"])
    If item.Exist("txtTranslator") Then v16 = CStr(item["txtTranslator"])
    If item.Exist("txtAnnotator") Then v17 = CStr(item["txtAnnotator"])
    If item.Exist("txtHolder") Then v18 = CStr(item["txtHolder"])
    If item.Exist("txtGender") Then v19 = CStr(item["txtGender"])
    If item.Exist("txtShortAuthor") Then v20 = CStr(item["txtShortAuthor"])
    If item.Exist("cmbEditorType") Then v21 = CStr(item["cmbEditorType"])
    If item.Exist("cmbEditorTypeA") Then v22 = CStr(item["cmbEditorTypeA"])
    If item.Exist("cmbEditorTypeB") Then v23 = CStr(item["cmbEditorTypeB"])
    If item.Exist("cmbEditorTypeC") Then v24 = CStr(item["cmbEditorTypeC"])
    If item.Exist("txtTitleAddOn") Then v25 = CStr(item["txtTitleAddOn"])
    If item.Exist("txtSubTitle") Then v26 = CStr(item["txtSubTitle"])
    If item.Exist("txtSeries") Then v27 = CStr(item["txtSeries"])
    If item.Exist("txtBookTitle") Then v28 = CStr(item["txtBookTitle"])
    If item.Exist("txtBookTitleAddOn") Then v29 = CStr(item["txtBookTitleAddOn"])
    If item.Exist("txtMainTitle") Then v30 = CStr(item["txtMainTitle"])
    If item.Exist("txtMainTitleAddOn") Then v31 = CStr(item["txtMainTitleAddOn"])
    If item.Exist("txtJournalTitle") Then v32 = CStr(item["txtJournalTitle"])
    If item.Exist("txtJournalTitleAddOn") Then v33 = CStr(item["txtJournalTitleAddOn"])
    If item.Exist("txtIssueTitle") Then v34 = CStr(item["txtIssueTitle"])
    If item.Exist("txtIssueTitleAddOn") Then v35 = CStr(item["txtIssueTitleAddOn"])
    If item.Exist("txtEventTitle") Then v36 = CStr(item["txtEventTitle"])
    If item.Exist("txtEventTitleAddOn") Then v37 = CStr(item["txtEventTitleAddOn"])
    If item.Exist("txtIndexTitle") Then v38 = CStr(item["txtIndexTitle"])
    If item.Exist("txtShortTitle") Then v39 = CStr(item["txtShortTitle"])
    If item.Exist("txtReprintTitle") Then v40 = CStr(item["txtReprintTitle"])
    If item.Exist("txtVolume") Then v41 = CStr(item["txtVolume"])
    If item.Exist("txtVolumes") Then v42 = CStr(item["txtVolumes"])
    If item.Exist("txtNumber") Then v43 = CStr(item["txtNumber"])
    If item.Exist("txtChapter") Then v44 = CStr(item["txtChapter"])
    If item.Exist("txtEid") Then v45 = CStr(item["txtEid"])
    If item.Exist("txtPart") Then v46 = CStr(item["txtPart"])
    If item.Exist("txtEdition") Then v47 = CStr(item["txtEdition"])
    If item.Exist("txtIssue") Then v48 = CStr(item["txtIssue"])
    If item.Exist("txtYear") Then v49 = CStr(item["txtYear"])
    If item.Exist("txtEventDate") Then v50 = CStr(item["txtEventDate"])
    If item.Exist("txtDate") Then v51 = CStr(item["txtDate"])
    If item.Exist("txtOrigDate") Then v52 = CStr(item["txtOrigDate"])
    If item.Exist("txtUrlDate") Then v53 = CStr(item["txtUrlDate"])
    If item.Exist("txtVersion") Then v54 = CStr(item["txtVersion"])
    If item.Exist("cmbHyphenation") Then v55 = CStr(item["cmbHyphenation"])
    If item.Exist("cmbLanguage") Then v56 = CStr(item["cmbLanguage"])
    If item.Exist("cmbOrigLanguage") Then v57 = CStr(item["cmbOrigLanguage"])
    If item.Exist("cmbLangId") Then v58 = CStr(item["cmbLangId"])
    If item.Exist("txtLandIdOpts") Then v59 = CStr(item["txtLandIdOpts"])
    If item.Exist("cmbPubState") Then v60 = CStr(item["cmbPubState"])
    If item.Exist("txtPages") Then v61 = CStr(item["txtPages"])
    If item.Exist("txtPageTotal") Then v62 = CStr(item["txtPageTotal"])
    If item.Exist("cmbPagination") Then v63 = CStr(item["cmbPagination"])
    If item.Exist("cmbBookPagination") Then v64 = CStr(item["cmbBookPagination"])
    If item.Exist("txtLocation") Then v65 = CStr(item["txtLocation"])
    If item.Exist("txtOrigLocation") Then v66 = CStr(item["txtOrigLocation"])
    If item.Exist("txtInstitution") Then v67 = CStr(item["txtInstitution"])
    If item.Exist("txtOrganization") Then v68 = CStr(item["txtOrganization"])
    If item.Exist("txtPublisher") Then v69 = CStr(item["txtPublisher"])
    If item.Exist("txtOrigPublisher") Then v70 = CStr(item["txtOrigPublisher"])
    If item.Exist("txtVenue") Then v71 = CStr(item["txtVenue"])
    If item.Exist("txtEprint") Then v72 = CStr(item["txtEprint"])
    If item.Exist("cmbEprintType") Then v73 = CStr(item["cmbEprintType"])
    If item.Exist("txtUrl") Then v74 = CStr(item["txtUrl"])
    If item.Exist("txtIsbn") Then v75 = CStr(item["txtIsbn"])
    If item.Exist("txtIssn") Then v76 = CStr(item["txtIssn"])
    If item.Exist("txtIsmn") Then v77 = CStr(item["txtIsmn"])
    If item.Exist("txtIsrn") Then v78 = CStr(item["txtIsrn"])
    If item.Exist("txtIsan") Then v79 = CStr(item["txtIsan"])
    If item.Exist("txtIswc") Then v80 = CStr(item["txtIswc"])
    If item.Exist("txtDoi") Then v81 = CStr(item["txtDoi"])
    If item.Exist("cmbRelatedType") Then v82 = CStr(item["cmbRelatedType"])
    If item.Exist("txtRelated") Then v83 = CStr(item["txtRelated"])
    If item.Exist("txtRelatedString") Then v84 = CStr(item["txtRelatedString"])
    If item.Exist("txtAddendum") Then v85 = CStr(item["txtAddendum"])
    If item.Exist("txtEntrySubType") Then v86 = CStr(item["txtEntrySubType"])
    If item.Exist("txtOptions") Then v87 = CStr(item["txtOptions"])
    If item.Exist("txtLabel") Then v88 = CStr(item["txtLabel"])
    If item.Exist("txtHowPublished") Then v89 = CStr(item["txtHowPublished"])
    If item.Exist("txtShortHand") Then v90 = CStr(item["txtShortHand"])
    If item.Exist("txtShortHandIntro") Then v91 = CStr(item["txtShortHandIntro"])
    If item.Exist("txtIds") Then v92 = CStr(item["txtIds"])
    If item.Exist("txtEntrySet") Then v93 = CStr(item["txtEntrySet"])
    If item.Exist("txtCrossRef") Then v94 = CStr(item["txtCrossRef"])
    If item.Exist("txtXref") Then v95 = CStr(item["txtXref"])
    If item.Exist("txtXdata") Then v96 = CStr(item["txtXdata"])
    If item.Exist("txtPreSort") Then v97 = CStr(item["txtPreSort"])
    If item.Exist("txtSortKey") Then v98 = CStr(item["txtSortKey"])
    If item.Exist("txtSortName") Then v99 = CStr(item["txtSortName"])
    If item.Exist("txtSortHand") Then v100 = CStr(item["txtSortHand"])
    If item.Exist("txtSortYear") Then v101 = CStr(item["txtSortYear"])
    If item.Exist("txtSortTitle") Then v102 = CStr(item["txtSortTitle"])
    If item.Exist("txtIndexSortTitle") Then v103 = CStr(item["txtIndexSortTitle"])
    If item.Exist("txtAbstract") Then v104 = CStr(item["txtAbstract"])
    If item.Exist("txtNote") Then v105 = CStr(item["txtNote"])
    If item.Exist("txtLibrary") Then v106 = CStr(item["txtLibrary"])
    If item.Exist("txtAnnotation") Then v107 = CStr(item["txtAnnotation"])
    If item.Exist("txtFile") Then v108 = CStr(item["txtFile"])

    ' Escapar comillas simples para SQL
    v1 = Replace(v1, "'", "''")
    v2 = Replace(v2, "'", "''")
    v3 = Replace(v3, "'", "''")
    v4 = Replace(v4, "'", "''")
    v5 = Replace(v5, "'", "''")
    v6 = Replace(v6, "'", "''")
    v7 = Replace(v7, "'", "''")
    v8 = Replace(v8, "'", "''")
    v9 = Replace(v9, "'", "''")
    v10 = Replace(v10, "'", "''")
    v11 = Replace(v11, "'", "''")
    v12 = Replace(v12, "'", "''")
    v13 = Replace(v13, "'", "''")
    v14 = Replace(v14, "'", "''")
    v15 = Replace(v15, "'", "''")
    v16 = Replace(v16, "'", "''")
    v17 = Replace(v17, "'", "''")
    v18 = Replace(v18, "'", "''")
    v19 = Replace(v19, "'", "''")
    v20 = Replace(v20, "'", "''")
    v21 = Replace(v21, "'", "''")
    v22 = Replace(v22, "'", "''")
    v23 = Replace(v23, "'", "''")
    v24 = Replace(v24, "'", "''")
    v25 = Replace(v25, "'", "''")
    v26 = Replace(v26, "'", "''")
    v27 = Replace(v27, "'", "''")
    v28 = Replace(v28, "'", "''")
    v29 = Replace(v29, "'", "''")
    v30 = Replace(v30, "'", "''")
    v31 = Replace(v31, "'", "''")
    v32 = Replace(v32, "'", "''")
    v33 = Replace(v33, "'", "''")
    v34 = Replace(v34, "'", "''")
    v35 = Replace(v35, "'", "''")
    v36 = Replace(v36, "'", "''")
    v37 = Replace(v37, "'", "''")
    v38 = Replace(v38, "'", "''")
    v39 = Replace(v39, "'", "''")
    v40 = Replace(v40, "'", "''")
    v41 = Replace(v41, "'", "''")
    v42 = Replace(v42, "'", "''")
    v43 = Replace(v43, "'", "''")
    v44 = Replace(v44, "'", "''")
    v45 = Replace(v45, "'", "''")
    v46 = Replace(v46, "'", "''")
    v47 = Replace(v47, "'", "''")
    v48 = Replace(v48, "'", "''")
    v49 = Replace(v49, "'", "''")
    v50 = Replace(v50, "'", "''")
    v51 = Replace(v51, "'", "''")
    v52 = Replace(v52, "'", "''")
    v53 = Replace(v53, "'", "''")
    v54 = Replace(v54, "'", "''")
    v55 = Replace(v55, "'", "''")
    v56 = Replace(v56, "'", "''")
    v57 = Replace(v57, "'", "''")
    v58 = Replace(v58, "'", "''")
    v59 = Replace(v59, "'", "''")
    v60 = Replace(v60, "'", "''")
    v61 = Replace(v61, "'", "''")
    v62 = Replace(v62, "'", "''")
    v63 = Replace(v63, "'", "''")
    v64 = Replace(v64, "'", "''")
    v65 = Replace(v65, "'", "''")
    v66 = Replace(v66, "'", "''")
    v67 = Replace(v67, "'", "''")
    v68 = Replace(v68, "'", "''")
    v69 = Replace(v69, "'", "''")
    v70 = Replace(v70, "'", "''")
    v71 = Replace(v71, "'", "''")
    v72 = Replace(v72, "'", "''")
    v73 = Replace(v73, "'", "''")
    v74 = Replace(v74, "'", "''")
    v75 = Replace(v75, "'", "''")
    v76 = Replace(v76, "'", "''")
    v77 = Replace(v77, "'", "''")
    v78 = Replace(v78, "'", "''")
    v79 = Replace(v79, "'", "''")
    v80 = Replace(v80, "'", "''")
    v81 = Replace(v81, "'", "''")
    v82 = Replace(v82, "'", "''")
    v83 = Replace(v83, "'", "''")
    v84 = Replace(v84, "'", "''")
    v85 = Replace(v85, "'", "''")
    v86 = Replace(v86, "'", "''")
    v87 = Replace(v87, "'", "''")
    v88 = Replace(v88, "'", "''")
    v89 = Replace(v89, "'", "''")
    v90 = Replace(v90, "'", "''")
    v91 = Replace(v91, "'", "''")
    v92 = Replace(v92, "'", "''")
    v93 = Replace(v93, "'", "''")
    v94 = Replace(v94, "'", "''")
    v95 = Replace(v95, "'", "''")
    v96 = Replace(v96, "'", "''")
    v97 = Replace(v97, "'", "''")
    v98 = Replace(v98, "'", "''")
    v99 = Replace(v99, "'", "''")
    v100 = Replace(v100, "'", "''")
    v101 = Replace(v101, "'", "''")
    v102 = Replace(v102, "'", "''")
    v103 = Replace(v103, "'", "''")
    v104 = Replace(v104, "'", "''")
    v105 = Replace(v105, "'", "''")
    v106 = Replace(v106, "'", "''")
    v107 = Replace(v107, "'", "''")
    v108 = Replace(v108, "'", "''")

    ' Construir la consulta SQL INSERT
    sql = "INSERT INTO bibtex (id_articulo, id_revista, cmbTipoDeEntrada, txtClaveBibtex, cmbTipoDeTesis, txtAuthor, txtEditor, txtTitle, txtNameAddOn, txtBookAuthor, txtEditorA, txtEditorB, txtEditorC, txtAfterword, txtForeword, txtCommentator, txtIntroduction, txtTranslator, txtAnnotator, txtHolder, txtGender, txtShortAuthor, cmbEditorType, cmbEditorTypeA, cmbEditorTypeB, cmbEditorTypeC, txtTitleAddOn, txtSubTitle, txtSeries, txtBookTitle, txtBookTitleAddOn, txtMainTitle, txtMainTitleAddOn, txtJournalTitle, txtJournalTitleAddOn, txtIssueTitle, txtIssueTitleAddOn, txtEventTitle, txtEventTitleAddOn, txtIndexTitle, txtShortTitle, txtReprintTitle, txtVolume, txtVolumes, txtNumber, txtChapter, txtEid, txtPart, txtEdition, txtIssue, txtYear, txtEventDate, txtDate, txtOrigDate, txtUrlDate, txtVersion, cmbHyphenation, cmbLanguage, cmbOrigLanguage, cmbLangId, txtLandIdOpts, cmbPubState, txtPages, txtPageTotal, cmbPagination, cmbBookPagination, txtLocation, txtOrigLocation, txtInstitution, txtOrganization, txtPublisher, txtOrigPublisher, txtVenue, txtEprint, cmbEprintType, txtUrl, txtIsbn, txtIssn, txtIsmn, txtIsrn, txtIsan, txtIswc, txtDoi, cmbRelatedType, txtRelated, txtRelatedString, txtAddendum, txtEntrySubType, txtOptions, txtLabel, txtHowPublished, txtShortHand, txtShortHandIntro, txtIds, txtEntrySet, txtCrossRef, txtXref, txtXdata, txtPreSort, txtSortKey, txtSortName, txtSortHand, txtSortYear, txtSortTitle, txtIndexSortTitle, txtAbstract, txtNote, txtLibrary, txtAnnotation, txtFile) VALUES ("
    sql = sql & vIdArticulo & ", "
    sql = sql & vIdRevista & ", "
    sql = sql & "'" & v1 & "', '" & v2 & "', '" & v3 & "', '" & v4 & "', '" & v5 & "', '" & v6 & "', '" & v7 & "', '" & v8 & "', "
    sql = sql & "'" & v9 & "', '" & v10 & "', '" & v11 & "', '" & v12 & "', '" & v13 & "', '" & v14 & "', '" & v15 & "', '" & v16 & "', '" & v17 & "', '" & v18 & "', "
    sql = sql & "'" & v19 & "', '" & v20 & "', '" & v21 & "', '" & v22 & "', '" & v23 & "', '" & v24 & "', '" & v25 & "', '" & v26 & "', '" & v27 & "', '" & v28 & "', "
    sql = sql & "'" & v29 & "', '" & v30 & "', '" & v31 & "', '" & v32 & "', '" & v33 & "', '" & v34 & "', '" & v35 & "', '" & v36 & "', '" & v37 & "', '" & v38 & "', "
    sql = sql & "'" & v39 & "', '" & v40 & "', '" & v41 & "', '" & v42 & "', '" & v43 & "', '" & v44 & "', '" & v45 & "', '" & v46 & "', '" & v47 & "', '" & v48 & "', "
    sql = sql & "'" & v49 & "', '" & v50 & "', '" & v51 & "', '" & v52 & "', '" & v53 & "', '" & v54 & "', '" & v55 & "', '" & v56 & "', '" & v57 & "', '" & v58 & "', "
    sql = sql & "'" & v59 & "', '" & v60 & "', '" & v61 & "', '" & v62 & "', '" & v63 & "', '" & v64 & "', '" & v65 & "', '" & v66 & "', '" & v67 & "', '" & v68 & "', "
    sql = sql & "'" & v69 & "', '" & v70 & "', '" & v71 & "', '" & v72 & "', '" & v73 & "', '" & v74 & "', '" & v75 & "', '" & v76 & "', '" & v77 & "', '" & v78 & "', "
    sql = sql & "'" & v79 & "', '" & v80 & "', '" & v81 & "', '" & v82 & "', '" & v83 & "', '" & v84 & "', '" & v85 & "', '" & v86 & "', '" & v87 & "', '" & v88 & "', "
    sql = sql & "'" & v89 & "', '" & v90 & "', '" & v91 & "', '" & v92 & "', '" & v93 & "', '" & v94 & "', '" & v95 & "', '" & v96 & "', '" & v97 & "', '" & v98 & "', "
    sql = sql & "'" & v99 & "', '" & v100 & "', '" & v101 & "', '" & v102 & "', '" & v103 & "', '" & v104 & "', '" & v105 & "', '" & v106 & "', '" & v107 & "', '" & v108 & "')"

    Try m_OnOff_y_Red.meConn.Exec(sql)
    If Error Then
      Error.Raise("Error en INSERT: " & Error.Text)
    Else
      registrosImportados += 1

      Dim verificacion As Result
      Try verificacion = m_OnOff_y_Red.meConn.Exec("SELECT * FROM bibtex WHERE id_revista = " & FMain.idMetadatoRevista.Text & " ORDER BY id DESC LIMIT 1")
      If Not Error And verificacion.Available Then
        ' Verificación del registro insertado (comentado para producción)
        ' Print "  -> Verificación del registro insertado:"
        ' Print "     ID: " & verificacion["id"]
        ' Print "     txtClaveBibtex: '" & CStr(verificacion["txtClaveBibtex"]) & "'"
        ' Print "     txtAuthor: '" & CStr(verificacion["txtAuthor"]) & "'"
        ' Print "     txtTitle: '" & CStr(verificacion["txtTitle"]) & "'"
      Endif
    Endif
  Next

  m_OnOff_y_Red.meConn.Commit()
  ' Print "✔ Commit hecho"

  Message.Info("Importación completada correctamente." & gb.NewLine &
    registrosImportados & " referencias bibliográficas importadas desde: " & File.Name(inputFile) & gb.NewLine &
    "Proyecto ID: " & FMain.idMetadatoRevista.Text)

Catch
  m_OnOff_y_Red.meConn.Rollback()
  Message.Error("Error durante la importación: " & Error.Text)

End
