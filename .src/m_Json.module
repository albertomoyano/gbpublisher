' Gambas module file

Public RutaProyecto As String = File.Dir(FMain.txtProyecto.Text)

' --- Escapa cadenas para JSON ---
Private Function EscapeJSON(value As String) As String

  If IsNull(value) Or value = "" Then Return ""

  Dim result As String = value

  ' Escapar caracteres especiales en el orden correcto
  result = Replace(result, "\\", "\\\\")     ' \ -> \\
  result = Replace(result, "\"", "\\\"")     ' " -> \"
  result = Replace(result, Chr(8), "\\b")    ' Backspace -> \b
  result = Replace(result, Chr(12), "\\f")   ' Form feed -> \f
  result = Replace(result, Chr(10), "\\n")   ' Line feed -> \n
  result = Replace(result, Chr(13), "\\r")   ' Carriage return -> \r
  result = Replace(result, Chr(9), "\\t")    ' Tab -> \t

  Return result

End

Public Sub ExportarJSONsiglas()

  Dim r As Result
  Dim sJSON As String
  Dim firstRow As Boolean = True
  Dim i As Integer
  Dim valorCampo As String
  Dim outputFile As String

  ' 1) Obtener registros
  r = m_OnOff_y_Red.meConn.Exec("SELECT * FROM siglas WHERE id_revista = &1 ORDER BY id", FMain.idMetadatoRevista.Text)

  If r.Count = 0 Then
    Message.Info("No se encontraron referencias para exportar.")
    Return
  Endif

  ' 2) Construir JSON en memoria con formato legible
  sJSON = "[" & gb.NewLine

  For Each r
    If Not firstRow Then sJSON &= "," & gb.NewLine
    sJSON &= "  {" & gb.NewLine  ' Indentación para el objeto

    For i = 0 To r.Fields.Count - 1
      If r[i] = Null Then
        valorCampo = ""
      Else
        valorCampo = CStr(r[i])  ' Conversión explícita a String
      Endif

      If i > 0 Then sJSON &= "," & gb.NewLine
      sJSON &= "    \"" & r.Fields[i].Name & "\": \"" & EscapeJSON(valorCampo) & "\""  ' Doble indentación para campos
    Next

    sJSON &= gb.NewLine & "  }"  ' Cerrar objeto con indentación
    firstRow = False
  Next

  sJSON &= gb.NewLine & "]"  ' Cerrar array

  ' 3) Guardar archivo
  outputFile = RutaProyecto & "/files/siglas.json"

  ' Crear directorio si no existe
  If Not Exist(File.Dir(outputFile)) Then
    Mkdir File.Dir(outputFile)
  Endif

  File.Save(outputFile, sJSON)
  Message.Info("Exportación completada correctamente." & gb.NewLine & outputFile)

Catch
  Message.Error("Error durante la exportación: " & Error.Text)

End

Public Sub ImportarJSONsiglas()

  Dim sJSON As String
  Dim aJSON As Collection[]
  Dim item As Collection
  Dim inputFile As String
  Dim sql As String
  Dim registrosImportados As Integer = 0

  With Dialog
    .Title = "Seleccionar archivo de siglas JSON"
    .Filter = ["*.json", "Archivos JSON", "*", "Todos los archivos"]
    .Path = User.Home
  End With
  If Dialog.OpenFile() Then Return
  inputFile = Dialog.Path

  sJSON = File.Load(inputFile)
  If Trim(sJSON) = "" Then
    Message.Error("El archivo JSON está vacío.")
    Return
  Endif

  aJSON = JSON.Decode(sJSON)
  If aJSON.Count = 0 Then
    Message.Info("No se encontraron registros para importar.")
    Return
  Endif

  If Message.Question("¿Está seguro de importar " & aJSON.Count & " siglas?" & gb.NewLine &
      "Se asignarán al proyecto actual (ID: " & FMain.idMetadatoRevista.Text & ")") <> 1 Then
    Return
  Endif

  m_OnOff_y_Red.meConn.Begin()

  For Each item In aJSON
    Dim vIdRevista As String = FMain.idMetadatoRevista.Text
    Dim v1, v2, v3, v4, v5, v6, v7, v8, v9 As String

    ' Print "Objeto JSON leído: "; JSON.Encode(item)

    v1 = ""
    v2 = ""
    v3 = ""
    v4 = ""
    v5 = ""
    v6 = ""
    v7 = ""
    v8 = ""
    v9 = ""

    If item.Exist("txtClaveGlosario") Then v1 = CStr(item["txtClaveGlosario"])
    If item.Exist("cmbTipoDeEntradaGlosario") Then v2 = CStr(item["cmbTipoDeEntradaGlosario"])
    If item.Exist("txtNameGlosario") Then v3 = CStr(item["txtNameGlosario"])
    If item.Exist("txtDescripcionGlosario") Then v4 = CStr(item["txtDescripcionGlosario"])
    If item.Exist("txtFirstGlosario") Then v5 = CStr(item["txtFirstGlosario"])
    If item.Exist("txtTextGlosario") Then v6 = CStr(item["txtTextGlosario"])
    If item.Exist("txtFirstPluraIGlosario") Then v7 = CStr(item["txtFirstPluraIGlosario"])
    If item.Exist("txtPluralGlosario") Then v8 = CStr(item["txtPluralGlosario"])
    If item.Exist("txtSortGlosario") Then v9 = CStr(item["txtSortGlosario"])

    v1 = Replace(v1, "'", "''")
    v2 = Replace(v2, "'", "''")
    v3 = Replace(v3, "'", "''")
    v4 = Replace(v4, "'", "''")
    v5 = Replace(v5, "'", "''")
    v6 = Replace(v6, "'", "''")
    v7 = Replace(v7, "'", "''")
    v8 = Replace(v8, "'", "''")
    v9 = Replace(v9, "'", "''")

    sql = "INSERT INTO siglas (id_revista, txtClaveGlosario, cmbTipoDeEntradaGlosario, txtNameGlosario, txtDescripcionGlosario, txtFirstGlosario, txtTextGlosario, txtFirstPluraIGlosario, txtPluralGlosario, txtSortGlosario) VALUES ("
    sql = sql & vIdRevista & ", "
    sql = sql & "'" & v1 & "', "
    sql = sql & "'" & v2 & "', "
    sql = sql & "'" & v3 & "', "
    sql = sql & "'" & v4 & "', "
    sql = sql & "'" & v5 & "', "
    sql = sql & "'" & v6 & "', "
    sql = sql & "'" & v7 & "', "
    sql = sql & "'" & v8 & "', "
    sql = sql & "'" & v9 & "')"

    ' Print "SQL completa:"
    ' Print sql
    ' Print "---"

    Try m_OnOff_y_Red.meConn.Exec(sql)
    If Error Then
      ' Print "✗ Error en INSERT: " & Error.Text
      Error.Raise("Error en INSERT: " & Error.Text)
    Else
      ' Print "✔ INSERT ejecutado correctamente"
      registrosImportados += 1

      Dim verificacion As Result
      Try verificacion = m_OnOff_y_Red.meConn.Exec("SELECT * FROM siglas WHERE id_revista = " & FMain.idMetadatoRevista.Text & " ORDER BY id DESC LIMIT 1")
      If Not Error And verificacion.Available Then
        ' Print "  -> Verificación del registro insertado:"
        ' Print "     ID: " & verificacion["id"]
        ' Print "     txtClaveGlosario: '" & CStr(verificacion["txtClaveGlosario"]) & "'"
        ' Print "     txtNameGlosario: '" & CStr(verificacion["txtNameGlosario"]) & "'"
      Endif
    Endif
  Next

  m_OnOff_y_Red.meConn.Commit()
  ' Print "✔ Commit hecho"

  Message.Info("Importación completada correctamente." & gb.NewLine &
    registrosImportados & " siglas importadas desde: " & File.Name(inputFile) & gb.NewLine &
    "Proyecto ID: " & FMain.idMetadatoRevista.Text)

  m_Glosarios.RefrescarTableViewGlosarioEnCurso()

Catch
  m_OnOff_y_Red.meConn.Rollback()
  Message.Error("Error durante la importación: " & Error.Text)

End

Public Sub ExportarJSONbibtex()

  Dim r As Result
  Dim sJSON As String
  Dim firstRow As Boolean = True
  Dim i As Integer
  Dim valorCampo As String
  Dim outputFile As String

  ' 1) Obtener registros
  r = m_OnOff_y_Red.meConn.Exec("SELECT * FROM bibtex WHERE id_revista = &1 ORDER BY id", FMain.idMetadatoRevista.Text)

  If r.Count = 0 Then
    Message.Info("No se encontraron referencias para exportar.")
    Return
  Endif

  ' 2) Construir JSON en memoria con formato legible
  sJSON = "[" & gb.NewLine

  For Each r
    If Not firstRow Then sJSON &= "," & gb.NewLine
    sJSON &= "  {" & gb.NewLine  ' Indentación para el objeto

    For i = 0 To r.Fields.Count - 1
      If r[i] = Null Then
        valorCampo = ""
      Else
        valorCampo = CStr(r[i])  ' Conversión explícita a String
      Endif

      If i > 0 Then sJSON &= "," & gb.NewLine
      sJSON &= "    \"" & r.Fields[i].Name & "\": \"" & EscapeJSON(valorCampo) & "\""  ' Doble indentación para campos
    Next

    sJSON &= gb.NewLine & "  }"  ' Cerrar objeto con indentación
    firstRow = False
  Next

  sJSON &= gb.NewLine & "]"  ' Cerrar array

  ' 3) Guardar archivo
  outputFile = RutaProyecto & "/files/referencias.json"

  ' Crear directorio si no existe
  If Not Exist(File.Dir(outputFile)) Then
    Mkdir File.Dir(outputFile)
  Endif

  File.Save(outputFile, sJSON)
  Message.Info("Exportación completada correctamente." & gb.NewLine & outputFile)

Catch
  Message.Error("Error durante la exportación: " & Error.Text)

End
