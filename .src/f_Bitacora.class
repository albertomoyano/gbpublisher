' Gambas class file

Public Function TiposPorDefecto() As String[]

  Return ["Avance", "Tarea asignada", "Problema", "Reunión", "Nota del autor", "Revisión", "Corrección", "Comentario general"]

End

Public Sub Splitter1_Resize()

  Splitter1.Layout = [1, 3]

End

Public Sub Form_Open()

  f_Bitacora.Title = "Cuaderno de bitácora de " & File.BaseName(FMain.txtProyecto.Text)
  ListBoxTipos.Clear

  Dim tipo As String
  Dim rsTipo As Result

  ' For Each tipo In TiposPorDefecto()
  '   rsTipo = m_OnOff_y_Red.meConn.Exec("SELECT id FROM tipos WHERE nombre = &1", tipo)

  '   If Not rsTipo.Available Then
  '     m_OnOff_y_Red.meConn.Exec("INSERT INTO tipos (nombre, predeterminado) VALUES (&1, &2)", tipo, True)
  '   End If
  ' Next

  ' ' Cargar todos los tipos
  ' Dim rs As Result = m_OnOff_y_Red.meConn.Exec("SELECT nombre FROM tipos ORDER BY nombre")
  ' While rs.Available
  '   ListBoxTipos.Add(rs["nombre"])
  '   rs.MoveNext
  ' Wend

  ' f_Bitacora.Title = "Cuaderno de bitácora (usuario en curso: " & m_OnOff_y_Red.UsuarioActual & ")"
  DateBoxFecha.Value = Now()
  DateBoxFecha.Visible = False
  Splitter1.Layout = [1, 3]
  TextBoxTema.SetFocus
  btnNuevaEntradaBitacora.Visible = True
  btnGuardarEntradaBitacora.Visible = False

End

Public Sub btnCerrar_Click()

  Me.Close

End

Public Sub btnAgregarTipo_Click()

  f_AgregarTipo.ShowModal
  ' ActualizarTipos()

End

' Private Sub ActualizarTipos()
'
'   ListBoxTipos.Clear
'   Dim rs As Result = m_OnOff_y_Red.meConn.Exec("SELECT nombre FROM tipos ORDER BY nombre")
'   While rs.Available
'     ListBoxTipos.Add(rs["nombre"])
'     rs.MoveNext
'   Wend
'
' End
'
' Public Sub btnBorrarTipo_Click()
'
'   Dim sTipo As String = ListBoxTipos.Text
'   Dim rs As Result
'
'   If sTipo = "" Then Return
'
'   ' Verificar si es predeterminado
'   rs = m_OnOff_y_Red.meConn.Exec("SELECT predeterminado FROM tipos WHERE nombre = &1", sTipo)
'   If rs.Available And rs["predeterminado"] Then
' m_Sonido.sonar("Warning")
'     Message.Warning("Este tópico no se puede eliminar porque es un tipo predeterminado.")
'     Return
'   End If
'
'   ' Confirmar con el usuario
' m_Sonido.sonar("Question")
'   If Not Message.Question("¿Deseás eliminar el tópico " "" & sTipo & "" "?") Then Return
'
'   ' Verificar si está en uso en la bitácora
'   rs = m_OnOff_y_Red.meConn.Exec("SELECT COUNT(*) AS usados FROM bitacora b JOIN tipos t ON b.tipo_id = t.id WHERE t.nombre = &1", sTipo)
'   If rs.Available And rs["usados"] > 0 Then
' m_Sonido.sonar("Warning")
'     Message.Warning("No se puede eliminar el tipo porque está en uso en la bitácora.")
'     Return
'   End If
'
'   ' Eliminar el tipo
'   Try m_OnOff_y_Red.meConn.Exec("DELETE FROM tipos WHERE nombre = &1", sTipo)
'   If Error Then
' m_Sonido.sonar("Error")
'     Message.Error("Error al eliminar el tipo: " & Error.Text)
'   Else
'     ActualizarTipos
'   End If
'
' End

Public Sub btnNuevaEntradaBitacora_Click()

  ' Limpiar campos y habilitar controles
  TextBoxTema.Enabled = True
  txtAreaContenido.Enabled = True

  TextBoxTema.Clear
  TextBoxTema.ReadOnly = False
  TextBoxTema.Background = Color.White
  txtAreaContenido.Clear
  txtAreaContenido.ReadOnly = False
  btnNuevaEntradaBitacora.Visible = False
  btnGuardarEntradaBitacora.Visible = True

  TextBoxTema.SetFocus

End

' Public Sub btnGuardarEntradaBitacora_Click()
'
'   Dim sTipo As String = ListBoxTipos.Text
'   Dim sTema As String = Trim(TextBoxTema.Text)
'   Dim sContenido As String = Trim(txtAreaContenido.Text)
'   Dim dFecha As Date = DateBoxFecha.Value
'   Dim sUsuario As String = m_OnOff_y_Red.UsuarioActual
'   Dim sProyecto As String = File.BaseName(FMain.txtProyecto.Text)
'   Dim idUsuario As Integer
'   Dim idProyecto As Integer
'   Dim idTipo As Integer
'   Dim rs As Result
'
'   ' Validaciones
'   If sTipo = "" Then
' m_Sonido.sonar("Warning")
'     Message.Warning("Debes seleccionar un tópico.")
'     Return
'   End If
'
'   If sTema = "" Or sContenido = "" Then
' m_Sonido.sonar("Warning")
'     Message.Warning("Tema y contenido no pueden estar vacíos.")
'     Return
'   End If
'
'   ' Obtener ID del usuario
'   rs = m_OnOff_y_Red.meConn.Exec("SELECT id FROM usuarios WHERE usuario = &1", sUsuario)
'   If rs.Available Then
'     idUsuario = rs["id"]
'   Else
' m_Sonido.sonar("Error")
'     Message.Error("Usuario no encontrado.")
'     Return
'   End If
'
'   ' Obtener ID del proyecto
'   rs = m_OnOff_y_Red.meConn.Exec("SELECT id FROM proyectos WHERE nombre = &1", sProyecto)
'   If rs.Available Then
'     idProyecto = rs["id"]
'   Else
' m_Sonido.sonar("Error")
'     Message.Error("Proyecto no encontrado.")
'     Return
'   End If
'
'   ' Obtener ID del tipo
'   rs = m_OnOff_y_Red.meConn.Exec("SELECT id FROM tipos WHERE nombre = &1", sTipo)
'   If rs.Available Then
'     idTipo = rs["id"]
'   Else
' m_Sonido.sonar("Error")
'     Message.Error("Tópico no encontrado.")
'     Return
'   End If
'
'   ' Después de obtener idTipo
'   Dim rsCheck As Result = m_OnOff_y_Red.meConn.Exec("SELECT * FROM tipos WHERE id = &1", idTipo)
'   If rsCheck.Available Then
'     Print "Tipo verificado - ID: " & rsCheck["id"] & ", Nombre: " & rsCheck["nombre"]
'   Else
'     Print "ERROR: No existe tipo con ID: " & idTipo
'   End If
'
'   m_OnOff_y_Red.meConn.Exec(
'     "INSERT INTO bitacora (tema, fecha, contenido, tipo_id, usuario_id, proyecto_id) " &
'     "VALUES (&1, &2, &3, &4, &5, &6)",
'     sTema, dFecha, sContenido, idTipo, idUsuario, idProyecto)
'
'   If Error Then
' m_Sonido.sonar("Error")
'     Message.Error("Error al guardar la entrada: " & Error.Text)
'     Print "Error SQL: " & Error.Text
'     Return
'   Else
'     Print "Inserción exitosa"
'     ' Verificar que se insertó
'     Dim rsVerify As Result = m_OnOff_y_Red.meConn.Exec("SELECT * FROM bitacora ORDER BY id DESC LIMIT 1")
'     If rsVerify.Available Then
'       Print "Último registro insertado:"
'       Print "ID: " & rsVerify["id"]
'       Print "tipo_id en BD: " & rsVerify["tipo_id"]
'       Print "tema: " & rsVerify["tema"]
'     End If
'   End If
'
'   ' Confirmación y limpieza
' m_Sonido.sonar("Info")
'   Message.Info("Entrada guardada correctamente.")
'
'   TextBoxTema.Clear
'   TextBoxTema.ReadOnly = True
'   TextBoxTema.Background = Color.Background
'   txtAreaContenido.Clear
'   txtAreaContenido.ReadOnly = True
'   btnNuevaEntradaBitacora.Visible = True
'   btnGuardarEntradaBitacora.Visible = False
'
' End
'
' ' Evento que se ejecuta cuando se selecciona un tipo en el ListBox
' Public Sub ListBoxTipos_Click()
'
'   CargarEntradasBitacora()
'
' End
'
' ' Método para cargar las entradas en el GridView
' Private Sub CargarEntradasBitacora()
'
'   Dim sTipo As String = ListBoxTipos.Text
'   Dim rs As Result
'
'   ' Limpiar el GridView
'   GridViewBitacora.Clear
'
'   ' Verificar que hay un tipo seleccionado
'   If sTipo = "" Or ListBoxTipos.Index = -1 Then
'     Return
'   End If
'
'   ' Configurar columnas del GridView (4 columnas, la última oculta para el ID)
'   GridViewBitacora.Columns.Count = 4
'   GridViewBitacora.Header = GridView.Horizontal
'   GridViewBitacora.Columns[0].Text = "Fecha"
'   GridViewBitacora.Columns[1].Text = "Usuario"
'   GridViewBitacora.Columns[2].Text = "Tema"
'   GridViewBitacora.Columns[3].Text = "" ' Columna oculta para el ID
'
'   ' Opcional: Ajustar ancho de columnas
'   GridViewBitacora.Columns[0].Width = 150
'   GridViewBitacora.Columns[1].Width = 170
'   GridViewBitacora.Columns[2].Width = 400
'   GridViewBitacora.Columns[3].Width = 0  ' Columna oculta para el ID
'
'   ' Obtener el proyecto actual
'   Dim sProyecto As String = File.BaseName(FMain.txtProyecto.Text)
'   Dim idProyecto As Integer
'
'   ' Obtener ID del proyecto actual
'   Dim rsProyecto As Result = m_OnOff_y_Red.meConn.Exec("SELECT id FROM proyectos WHERE nombre = &1", sProyecto)
'   If rsProyecto.Available Then
'     idProyecto = rsProyecto["id"]
'   Else
'     ' Si no se encuentra el proyecto, salir
'     Return
'   End If
'
'   ' Consulta para obtener las entradas del tipo y proyecto seleccionados
'   rs = m_OnOff_y_Red.meConn.Exec(
'     "SELECT b.fecha, u.usuario, b.tema, b.id " &
'     "FROM bitacora b " &
'     "INNER JOIN tipos t ON b.tipo_id = t.id " &
'     "INNER JOIN usuarios u ON b.usuario_id = u.id " &
'     "WHERE t.nombre = &1 AND b.proyecto_id = &2 " &
'     "ORDER BY b.fecha DESC", sTipo, idProyecto)
'
'   ' Contar registros para establecer el número de filas
'   Dim contador As Integer = 0
'   While rs.Available
'     contador = contador + 1
'     rs.MoveNext
'   Wend
'
'   ' Si no hay registros, mostrar mensaje
'   If contador = 0 Then
'     GridViewBitacora.Rows.Count = 1
'     GridViewBitacora[0, 0].Text = "No hay entradas"
'     GridViewBitacora[0, 1].Text = "para este tipo"
'     GridViewBitacora[0, 2].Text = ""
'     GridViewBitacora[0, 3].Text = "0"
'     Return
'   End If
'
'   ' Configurar número de filas
'   GridViewBitacora.Rows.Count = contador
'
'   ' Volver a ejecutar la consulta para llenar el GridView
'   rs = m_OnOff_y_Red.meConn.Exec(
'     "SELECT b.fecha, u.usuario, b.tema, b.id " &
'     "FROM bitacora b " &
'     "INNER JOIN tipos t ON b.tipo_id = t.id " &
'     "INNER JOIN usuarios u ON b.usuario_id = u.id " &
'     "WHERE t.nombre = &1 AND b.proyecto_id = &2 " &
'     "ORDER BY b.fecha DESC", sTipo, idProyecto)
'
'   ' Llenar el GridView con los datos
'   Dim fila As Integer = 0
'   While rs.Available
'     GridViewBitacora[fila, 0].Text = Format(rs["fecha"], "dd/mm/yyyy hh:nn")
'     GridViewBitacora[fila, 1].Text = rs["usuario"]
'     GridViewBitacora[fila, 2].Text = rs["tema"]
'     GridViewBitacora[fila, 3].Text = rs["id"]  ' ID en columna oculta
'     rs.MoveNext
'     fila = fila + 1
'   Wend
'
' End
'
' ' Opcional: Método para cuando se hace click en una fila del GridView
' ' (para mostrar el contenido completo de la entrada)
' Public Sub GridViewBitacora_Click()
'
'   Dim idEntrada As Integer
'
'   ' Verificar que hay una fila seleccionada
'   If GridViewBitacora.Row = -1 Then Return
'
'   ' Obtener el ID de la entrada desde la columna oculta
'   idEntrada = Val(GridViewBitacora[GridViewBitacora.Row, 3].Text)
'
'   ' Si no hay ID válido, salir
'   If idEntrada <= 0 Then Return
'
'   ' Cargar los datos de la entrada seleccionada
'   MostrarEntradaSeleccionada(idEntrada)
'
' End
'
' ' Método para mostrar la entrada seleccionada en los controles
' Private Sub MostrarEntradaSeleccionada(idEntrada As Integer)
'
'   Dim rs As Result
'
'   rs = m_OnOff_y_Red.meConn.Exec(
'     "SELECT b.tema, b.fecha, b.contenido, t.nombre as tipo, u.usuario " &
'     "FROM bitacora b " &
'     "INNER JOIN tipos t ON b.tipo_id = t.id " &
'     "INNER JOIN usuarios u ON b.usuario_id = u.id " &
'     "WHERE b.id = &1", idEntrada)
'
'   If rs.Available Then
'     ' Cargar datos en los controles (solo lectura)
'     TextBoxTema.Text = rs["tema"]
'     TextBoxTema.ReadOnly = True
'     TextBoxTema.Background = Color.Background
'
'     DateBoxFecha.Value = rs["fecha"]
'
'     txtAreaContenido.Text = rs["contenido"]
'     txtAreaContenido.ReadOnly = True
'
'     ' Seleccionar el tipo en el ListBox
'     Dim i As Integer
'     For i = 0 To ListBoxTipos.Count - 1
'       If ListBoxTipos[i].Text = rs["tipo"] Then
'         ListBoxTipos.Index = i
'         Break
'       End If
'     Next
'
'     ' Ajustar visibilidad de botones
'     btnNuevaEntradaBitacora.Visible = True
'     btnGuardarEntradaBitacora.Visible = False
'   End If
'
' End
