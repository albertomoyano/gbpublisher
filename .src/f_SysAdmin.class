' Gambas class file

' ============================================
' FORMULARIO DE GESTIÓN DE USUARIOS
' SQLite Local para SuperAdmin + MySQL para Usuarios
' ============================================

Public hConn As Connection  ' Conexión SQLite local
Public hConnServidor As Connection  ' Conexión al servidor MySQL
Public sUsuarioActual As String
Public sRolActual As String
Public sServidorActual As String

' ============================================
' INICIALIZACIÓN DEL FORMULARIO
' ============================================
Public Sub Form_Open()

  Dim sRuta As String = User.Home &/ ".gbpublisher/.superuser.sqlite"

  ' Crear/conectar SQLite local (solo para admin local)
  If Not Exist(sRuta) Then
    CreateDataBase()
  Endif

  If Not Conectar(sRuta) Then
    m_Sonido.sonar("Error")
    Message.Error("No se pudo conectar a la base local")
    Me.Close()
    Return
  Endif

  ' Cargar IPs disponibles
  m_FuncionesGenericas.CargarComboBoxIP(ComboBoxIP)

  ' Mostrar solo panel de validación inicial
  HBox1a.Visible = True           ' Botón de validar
  TableViewUsuarios.Visible = True
  HBox2a.Visible = True
  HBox3a.Visible = True
  HBox4a.Visible = True

  txtAdministrador.SetFocus()

End

' ============================================
' CREAR BASE DE DATOS SQLITE LOCAL
' ============================================
Public Sub CreateDataBase()

  Dim sHost As String = User.Home &/ ".gbpublisher"
  Dim sDbName As String = ".superuser.sqlite"
  Dim sTablas As String

  ' Verificar que el directorio existe
  If Not Exist(sHost) Then Mkdir sHost

  ' Si la base ya existe, salir
  If Exist(sHost &/ sDbName) Then Return

  hConn = New Connection
  hConn.Type = "sqlite3"
  hConn.Host = sHost
  hConn.Open()

  hConn.Databases.Add(sDbName)
  Wait 0.5

  hConn.Close()

  ' Reconectar con la base de datos
  hConn.Name = sDbName
  hConn.Open()

  ' Crear tabla de superusuario local
  sTablas = "CREATE TABLE superuser (" &
    "id INTEGER PRIMARY KEY AUTOINCREMENT, " &
    "usuario TEXT NOT NULL UNIQUE, " &
    "clave TEXT NOT NULL, " &
    "email TEXT);"
  hConn.Exec(sTablas)

  ' ✅ Insertar admin por defecto
  hConn.Exec("INSERT INTO superuser (usuario, clave, email) VALUES " &
    "('admin', '" & Hash.SHA256("admin123") & "', NULL);")

  hConn.Close()

  m_Sonido.sonar("Info")
  Message.Info("Base de datos local creada.\n\nUsuario inicial:\nUsuario: admin\nContraseña: admin123\n\n¡Cámbiela inmediatamente!")

Catch
  m_Sonido.sonar("Error")
  Message.Error("Error creando la base: " & Error.Text & " (" & Error.Where & ")")

End

' ============================================
' CONECTAR A SQLITE LOCAL
' ============================================
Public Function Conectar(sRuta As String) As Boolean

  hConn = New Connection
  hConn.Type = "sqlite3"
  hConn.Host = File.Dir(sRuta)
  hConn.Name = File.Name(sRuta)

  Try hConn.Open()
  If Not hConn.Opened Then
    Return False
  Endif

  hConn.Exec("PRAGMA foreign_keys = ON;")
  Return True

Catch
  m_Sonido.sonar("Error")
  Message.Error("Error conectando a la base: " & Error.Text & " (" & Error.Where & ")")
  Return False

End

' ============================================
' VALIDAR SUPERUSUARIO
' ============================================
Public Sub btnValidarSuperuser_Click()

  Dim sUsuario As String = Trim(txtAdministrador.Text)
  Dim sClave As String = Trim(txtClaveAdministrador.Text)
  Dim sIP As String = Trim(ComboBoxIP.Text)

  ' Validaciones básicas
  If Not sUsuario Or Not sClave Then
    m_Sonido.sonar("Warning")
    Message.Warning("Debe ingresar usuario y contraseña")
    Return
  Endif

  If Not sIP Then
    m_Sonido.sonar("Warning")
    Message.Warning("Debe seleccionar una IP de servidor")
    Return
  Endif

  ' ✅ PASO 1: Validar contra SQLite LOCAL
  If Not ValidarAdminLocal(sUsuario, sClave) Then
    txtAdministrador.Text = ""
    txtClaveAdministrador.Text = ""
    Return
  Endif

  ' ✅ PASO 2: Conectar a MySQL con credenciales de app
  If Not ConectarMySQL(sIP) Then
    m_Sonido.sonar("Error")
    Message.Error("Admin válido, pero no se pudo conectar al servidor MySQL")
    Return
  Endif

  ' ✅ PASO 3: Habilitar gestión
  sUsuarioActual = sUsuario
  sServidorActual = sIP
  sRolActual = "superadmin"

  m_Sonido.sonar("Info")
  Message.Info("Acceso concedido como SUPERADMINISTRADOR")

  HabilitarABMUsuarios()
  PanelAdmin.Visible = False

  ' Limpiar campos
  txtAdministrador.Text = ""
  txtClaveAdministrador.Text = ""
  txtEmailAdministrador.Text = ""

Catch
  m_Sonido.sonar("Error")
  Message.Error("Error: " & Error.Text & " (" & Error.Where & ")")

End

' ============================================
' VALIDAR ADMIN LOCAL (SQLITE)
' ============================================
Private Function ValidarAdminLocal(sUsuario As String, sClave As String) As Boolean

  Dim r As Result
  Dim sHash As String

  sHash = Hash.SHA256(sClave)

  r = hConn.Exec("SELECT id FROM superuser " &
    "WHERE usuario = '" & sUsuario & "' " &
    "AND clave = '" & sHash & "';")

  If Not r.Available Then
    m_Sonido.sonar("Warning")
    Message.Warning("Usuario o contraseña de administrador incorrectos")
    Return False
  Endif

  Return True

Catch
  m_Sonido.sonar("Error")
  Message.Error("Error validando administrador local: " & Error.Text)
  Return False

End

' ============================================
' CONECTAR A MYSQL (CREDENCIALES FIJAS)
' ============================================
Private Function ConectarMySQL(sIP As String) As Boolean

  hConnServidor = New Connection
  hConnServidor.Type = "mysql"
  hConnServidor.Host = sIP
  hConnServidor.Port = 3306
  hConnServidor.Name = "gbpublisher"
  hConnServidor.User = "app_user"
  hConnServidor.Password = "AppUser2024!"

  Try hConnServidor.Open()

  If Not hConnServidor.Opened Then
    Return False
  Endif

  Return True

Catch
  m_Sonido.sonar("Error")
  Message.Error("Error conectando a MySQL: " & Error.Text)
  Return False

End

' ============================================
' HABILITAR PANEL DE GESTIÓN
' ============================================
Private Sub HabilitarABMUsuarios()

  PanelAdminUsuarios.Visible = True
  btnCrearUsuario.Visible = True
  btnGuardarUsuario.Visible = False
  btnGuardarCambiosUsuario.Visible = False

  LabelSesion.Text = "Conectado como administrador: " & sUsuarioActual & " @ " & sServidorActual

  CargarUsuariosDelServidor()

End

' ============================================
' CARGAR USUARIOS DESDE MYSQL
' ============================================
Private Sub CargarUsuariosDelServidor()

  Dim rUsuarios As Result
  Dim iRow As Integer

  TableViewUsuarios.Clear()
  TableViewUsuarios.Rows.Count = 0
  TableViewUsuarios.Columns.Count = 6

  TableViewUsuarios.Columns[0].Title = "ID"
  TableViewUsuarios.Columns[0].Width = 50
  TableViewUsuarios.Columns[1].Title = "Usuario"
  TableViewUsuarios.Columns[1].Width = 150
  TableViewUsuarios.Columns[2].Title = "Email"
  TableViewUsuarios.Columns[2].Width = 400
  TableViewUsuarios.Columns[3].Title = "Activo"
  TableViewUsuarios.Columns[3].Width = 70
  TableViewUsuarios.Columns[4].Title = "Fecha Creación"
  TableViewUsuarios.Columns[4].Width = 200
  TableViewUsuarios.Columns[5].Title = "En Línea"
  TableViewUsuarios.Columns[5].Width = 70

  rUsuarios = hConnServidor.Exec("SELECT id, usuario, email, activo, fecha_creacion, en_linea " &
    "FROM usuarios ORDER BY usuario;")

  While rUsuarios.Available
    TableViewUsuarios.Rows.Count += 1
    iRow = TableViewUsuarios.Rows.Count - 1

    TableViewUsuarios[iRow, 0].Text = rUsuarios["id"]
    TableViewUsuarios[iRow, 1].Text = rUsuarios["usuario"]
    TableViewUsuarios[iRow, 2].Text = If(rUsuarios["email"], rUsuarios["email"], "")
    TableViewUsuarios[iRow, 3].Text = If(rUsuarios["activo"], "Sí", "No")
    TableViewUsuarios[iRow, 4].Text = Format(rUsuarios["fecha_creacion"], "dd/mm/yyyy hh:nn")
    TableViewUsuarios[iRow, 5].Text = If(rUsuarios["en_linea"], "Sí", "No")

    rUsuarios.MoveNext()
  Wend

  ' Print "Usuarios cargados: " & TableViewUsuarios.Rows.Count

Catch
  m_Sonido.sonar("Error")
  Message.Error("Error al cargar usuarios: " & Error.Text)

End

' ============================================
' CREAR/MODIFICAR ADMIN LOCAL
' ============================================
Public Sub btnCrearAdmin_Click()

  Dim sUsuario As String = Trim(txtAdministrador.Text)
  Dim sClave As String = Trim(txtClaveAdministrador.Text)
  Dim sEmail As String = Trim(txtEmailAdministrador.Text)
  Dim sClaveHash As String
  Dim sSQL As String
  Dim rCheck As Result

  If Not sUsuario Or Not sClave Then
    m_Sonido.sonar("Warning")
    Message.Warning("Usuario y contraseña son obligatorios")
    Return
  Endif

  If Len(sClave) < 8 Then
    m_Sonido.sonar("Warning")
    Message.Warning("La contraseña debe tener al menos 8 caracteres")
    Return
  Endif

  sClaveHash = Hash.SHA256(sClave)

  rCheck = hConn.Exec("SELECT id FROM superuser WHERE usuario = '" & sUsuario & "';")

  If rCheck.Available Then
    ' Actualizar admin existente
    sSQL = "UPDATE superuser SET clave = '" & sClaveHash & "'"

    If sEmail And sEmail <> "@." Then
      sSQL &= ", email = '" & sEmail & "'"
    Endif

    sSQL &= " WHERE usuario = '" & sUsuario & "';"

    hConn.Exec(sSQL)
    m_Sonido.sonar("Info")
    Message.Info("Contraseña del administrador '" & sUsuario & "' actualizada")

  Else
    ' Crear nuevo admin
    If Not sEmail Or sEmail = "@." Then
      sSQL = "INSERT INTO superuser (usuario, clave, email) VALUES ('" &
        sUsuario & "', '" & sClaveHash & "', NULL);"
    Else
      sSQL = "INSERT INTO superuser (usuario, clave, email) VALUES ('" &
        sUsuario & "', '" & sClaveHash & "', '" & sEmail & "');"
    Endif

    hConn.Exec(sSQL)
    m_Sonido.sonar("Info")
    Message.Info("Administrador local '" & sUsuario & "' creado exitosamente")
  Endif

  txtAdministrador.Text = ""
  txtClaveAdministrador.Text = ""
  txtEmailAdministrador.Text = ""

Catch
  m_Sonido.sonar("Error")
  Message.Error("Error: " & Error.Text & " (" & Error.Where & ")")

End

' ============================================
' GUARDAR NUEVO USUARIO (btnGuardarUsuario)
' ============================================
Public Sub btnGuardarUsuario_Click()

  Dim sUsuario As String
  Dim sClave As String
  Dim sEmail As String
  Dim bActivo As Boolean
  Dim sHash As String

  If Not hConnServidor Or Not hConnServidor.Opened Then
    m_Sonido.sonar("Warning")
    Message.Warning("Debe validarse primero como administrador")
    Return
  Endif

  ' Obtener valores de los controles
  sUsuario = Trim(txtUsuario.Text)
  sClave = Trim(txtClaveUsuario.Text)
  sEmail = Trim(txtEmailUsuario.Text)
  bActivo = RadioButtonSi.Value

  ' Validaciones
  If Not sUsuario Then
    m_Sonido.sonar("Warning")
    Message.Warning("Debe ingresar un nombre de usuario")
    txtUsuario.SetFocus()
    Return
  Endif

  If Len(sUsuario) > 12 Then
    m_Sonido.sonar("Warning")
    Message.Warning("El usuario no puede tener más de 12 caracteres")
    txtUsuario.SetFocus()
    Return
  Endif

  If Not sClave Or Len(sClave) < 8 Then
    m_Sonido.sonar("Warning")
    Message.Warning("La contraseña debe tener 8 caracteres, incluyendo una mayúscula y un número.")
    txtClaveUsuario.SetFocus()
    Return
  Endif

  If Not sEmail Then
    m_Sonido.sonar("Warning")
    Message.Warning("El email es obligatorio")
    txtEmailUsuario.SetFocus()
    Return
  Endif

  ' Hashear contraseña
  sHash = Hash.SHA256(sClave)

  ' Insertar en MySQL
  hConnServidor.Exec("INSERT INTO usuarios (usuario, clave, email, activo, metodo, fecha_creacion) " &
    "VALUES ('" & sUsuario & "', '" & sHash & "', '" & sEmail & "', " &
    If(bActivo, "TRUE", "FALSE") & ", 'local', NOW());")

    m_Sonido.sonar("Info")
    Message.Info("Usuario '" & sUsuario & "' creado exitosamente")

    ' Limpiar controles
    LimpiarControlesUsuario()

    ' Acualizamos los botones
    btnCrearUsuario.Visible = True
    btnGuardarUsuario.Visible = False
    btnGuardarCambiosUsuario.Visible = False

    ' Recargar tabla
    CargarUsuariosDelServidor()

  Catch
    m_Sonido.sonar("Error")
    Message.Error("Error creando usuario: " & Error.Text)

End

' ============================================
' GUARDAR CAMBIOS DE USUARIO (btnGuardarCambiosUsuario)
' ============================================
Public Sub btnGuardarCambiosUsuario_Click()

  Dim iID As Integer
  Dim sNuevoUsuario As String
  Dim sNuevaClave As String
  Dim sNuevoEmail As String
  Dim bActivo As Boolean
  Dim sHash As String

  ' Verificar que hay un usuario seleccionado
  If TableViewUsuarios.Row < 0 Then
    m_Sonido.sonar("Warning")
    Message.Warning("Debe seleccionar un usuario de la tabla para modificar")
    Return
  Endif

  If Not hConnServidor Or Not hConnServidor.Opened Then
    m_Sonido.sonar("Warning")
    Message.Warning("No hay conexión al servidor")
    Return
  Endif

  ' Obtener ID del usuario seleccionado
  iID = Val(TableViewUsuarios[TableViewUsuarios.Row, 0].Text)

  ' Obtener valores de los controles
  sNuevoUsuario = Trim(txtUsuario.Text)
  sNuevaClave = Trim(txtClaveUsuario.Text)
  sNuevoEmail = Trim(txtEmailUsuario.Text)
  bActivo = RadioButtonSi.Value

  ' Validaciones
  If Not sNuevoUsuario Then
    m_Sonido.sonar("Warning")
    Message.Warning("El nombre de usuario no puede estar vacío")
    txtUsuario.SetFocus()
    Return
  Endif

  If Len(sNuevoUsuario) > 12 Then
    m_Sonido.sonar("Warning")
    Message.Warning("El usuario no puede tener más de 12 caracteres")
    txtUsuario.SetFocus()
    Return
  Endif

  If Not sNuevoEmail Then
    Message.Warning("El email es obligatorio")
    txtEmailUsuario.SetFocus()
    Return
  Endif

  ' Si hay nueva contraseña, validar y actualizar
  If sNuevaClave And Len(sNuevaClave) > 0 Then
    If Len(sNuevaClave) < 8 Then
      m_Sonido.sonar("Warning")
      Message.Warning("La contraseña debe tener 8 caracteres")
      txtClaveUsuario.SetFocus()
      Return
    Endif
    sHash = Hash.SHA256(sNuevaClave)
    hConnServidor.Exec("UPDATE usuarios SET usuario = '" & sNuevoUsuario &
      "', clave = '" & sHash & "', email = '" & sNuevoEmail &
      "', activo = " & If(bActivo, "TRUE", "FALSE") &
      " WHERE id = " & iID & ";")
  Else
    ' Actualizar sin cambiar contraseña
    hConnServidor.Exec("UPDATE usuarios SET usuario = '" & sNuevoUsuario &
      "', email = '" & sNuevoEmail &
      "', activo = " & If(bActivo, "TRUE", "FALSE") &
      " WHERE id = " & iID & ";")
  Endif

  m_Sonido.sonar("Info")
  Message.Info("Cambios guardados correctamente")

  ' Acualizamos los botones
  btnCrearUsuario.Visible = True
  btnGuardarUsuario.Visible = False
  btnGuardarCambiosUsuario.Visible = False

  ' Limpiar controles
  LimpiarControlesUsuario()

  ' Recargar tabla
  CargarUsuariosDelServidor()

Catch
  m_Sonido.sonar("Error")
  Message.Error("Error guardando cambios: " & Error.Text)

End

' ============================================
' EVENTO CLICK EN TABLEVIEW - CARGAR DATOS EN CONTROLES
' ============================================
Public Sub TableViewUsuarios_Click()

  Dim iRow As Integer = TableViewUsuarios.Row
  Dim sFechaCreacion As String
  Dim sFechaAcceso As String

  btnCrearUsuario.Visible = False
  btnGuardarUsuario.Visible = False
  btnGuardarCambiosUsuario.Visible = True

  If iRow < 0 Then Return

  ' Cargar datos en los controles
  txtUsuario.Text = TableViewUsuarios[iRow, 1].Text
  txtEmailUsuario.Text = TableViewUsuarios[iRow, 2].Text

  ' Limpiar contraseña (por seguridad no se muestra)
  txtClaveUsuario.Text = ""

  ' Estado activo
  If TableViewUsuarios[iRow, 3].Text = "Sí" Then
    RadioButtonSi.Value = True
  Else
    RadioButtonNo.Value = True
  Endif

  ' Fecha de creación
  sFechaCreacion = TableViewUsuarios[iRow, 4].Text
  If sFechaCreacion Then
    Try DateBoxCreacion.Value = CDate(sFechaCreacion)
  Endif

  ' Fecha último acceso (cargar desde BD)
  CargarUltimoAcceso(Val(TableViewUsuarios[iRow, 0].Text))

Catch
  Print "Error al cargar datos: " & Error.Text

End

' ============================================
' CARGAR FECHA DE ÚLTIMO ACCESO DESDE BD
' ============================================
Private Sub CargarUltimoAcceso(iUsuarioID As Integer)

  Dim r As Result

  r = hConnServidor.Exec("SELECT ultimo_acceso FROM usuarios WHERE id = " & iUsuarioID & ";")

  If r.Available And r["ultimo_acceso"] Then
    Try DateBoxUltimoAcceso.Value = r["ultimo_acceso"]
  Else
    DateBoxUltimoAcceso.Value = Null
  Endif

Catch
  Print "Error cargando último acceso: " & Error.Text

End

' ============================================
' LIMPIAR CONTROLES DEL FORMULARIO
' ============================================
Private Sub LimpiarControlesUsuario()

  txtUsuario.Text = ""
  txtClaveUsuario.Text = ""
  txtEmailUsuario.Text = ""
  RadioButtonSi.Value = True  ' Por defecto activo
  DateBoxCreacion.Value = Now()
  DateBoxUltimoAcceso.Value = Null

  ' Quitar selección de la tabla
  TableViewUsuarios.Row = -1

End

' ============================================
' BOTÓN NUEVO - PREPARAR PARA CREAR USUARIO
' ============================================
Public Sub btnNuevoUsuario_Click()

  LimpiarControlesUsuario()
  txtUsuario.SetFocus()

End

' ============================================
' TOGGLE MOSTRAR/OCULTAR CONTRASEÑA
' ============================================
Public Sub ToggleButtonMostrar_Click()

  If ToggleButtonMostrar.Value Then
    txtClaveAdministrador.Password = False
  Else
    txtClaveAdministrador.Password = True
  Endif

  txtClaveAdministrador.Refresh()
  txtClaveAdministrador.SetFocus()

End

' ============================================
' GESTIONAR IPS
' ============================================
Public Sub btnNuevaIP_Click()

  f_EditarIPs.ShowModal()
  m_FuncionesGenericas.CargarComboBoxIP(ComboBoxIP)

End

' ============================================
' CERRAR FORMULARIO
' ============================================
Public Sub btnCerrar_Click()

  If hConnServidor And hConnServidor.Opened Then
    hConnServidor.Close()
  Endif

  If hConn And hConn.Opened Then
    hConn.Close()
  Endif

  Me.Close()

End

Public Sub btnCrearUsuario_Click()

  btnCrearUsuario.Visible = False
  btnGuardarUsuario.Visible = True
  btnGuardarCambiosUsuario.Visible = False

  txtUsuario.Text = ""
  txtClaveUsuario.Text = ""
  ' Asignar fecha actual al DateBox
  DateBoxCreacion.Value = Now

End
