' Gambas class file

Public hConn As Connection  ' Conexión SQLite local (ya la tienes)
Public hConnServidor As Connection  ' ✅ Nueva: Conexión al servidor MySQL
Public sUsuarioActual As String
Public sRolActual As String
Public sServidorActual As String

Public Sub Form_Open()

  Dim sRuta As String = User.Home &/ ".gbpublisher/superuser.sqlite"

  ' Crear/conectar SQLite local (solo para caché de IPs)
  If Not Exist(sRuta) Then
    CreateDataBase()
  Endif

  If Not Conectar(sRuta) Then
    Message.Error("No se pudo conectar a la base local")
    Me.Close()
    Return
  Endif

  ' Cargar IPs disponibles
  m_FuncionesGenericas.CargarComboBoxIP(ComboBoxIP)

  ' ✅ Mostrar solo el panel de validación (sin creación local)
  ' Mostrar paneles/botones de ABM
  HBox1a.Visible = True           ' Boton de validar
  TableViewUsuarios.Visible = True
  HBox2a.Visible = True
  HBox3a.Visible = True
  HBox4a.Visible = True
  HBox4a.Visible = True

  txtAdministrador.SetFocus()

End

Public Sub CreateDataBase()

  Dim sHost As String = User.Home &/ ".gbpublisher"
  Dim sDbName As String = "superuser.sqlite"
  Dim sTablas As String

  ' Verificar que el directorio existe
  If Not Exist(sHost) Then Mkdir sHost

  ' Si la base ya existe, salir
  If Exist(sHost &/ sDbName) Then Return

  hConn = New Connection
  hConn.Type = "sqlite3"
  hConn.Host = sHost
  hConn.Open()  ' Abrir conexión SIN base de datos aún

  hConn.Databases.Add(sDbName)  ' ✅ CREAR la base de datos
  Wait 0.5  ' Dar tiempo al sistema

  hConn.Close()  ' Cerrar

  ' Ahora reconectar CON la base de datos
  hConn.Name = sDbName
  hConn.Open()

  ' Crear primera tabla
  sTablas = "CREATE TABLE superuser (" &
    "id INTEGER PRIMARY KEY AUTOINCREMENT, " &
    "usuario TEXT NOT NULL, " &
    "clave TEXT NOT NULL, " &
    "email TEXT);"
  hConn.Exec(sTablas)

  ' Crear segunda tabla
  sTablas = "CREATE TABLE usuario_roles (" &
    "id INTEGER PRIMARY KEY AUTOINCREMENT, " &
    "usuario_id INTEGER NOT NULL, " &
    "servidor_ip TEXT NOT NULL, " &
    "rol TEXT NOT NULL DEFAULT 'admin', " &
    "UNIQUE(usuario_id, servidor_ip));"
  hConn.Exec(sTablas)

  hConn.Close()

  Message.Info("Base de datos creada con éxito.")

Catch
  Message.Error("Error creando la base: " & Error.Text & " (" & Error.Where & ")")

End

Public Function Conectar(sRuta As String) As Boolean

  hConn = New Connection
  hConn.Type = "sqlite3"
  hConn.Host = File.Dir(sRuta)   ' ✅ Directorio
  hConn.Name = File.Name(sRuta)  ' ✅ Nombre del archivo

  Try hConn.Open()
  If Not hConn.Opened Then
    Return False
  Endif

  ' Asegurar claves foráneas activas
  hConn.Exec("PRAGMA foreign_keys = ON;")
  Return True

Catch
  Message.Error("Error conectando a la base: " & Error.Text & " (" & Error.Where & ")")
  Return False

End

Public Sub btnCerrar_Click()

  Me.Close

End

Public Sub btnCrearAdmin_Click()

  Dim sUsuario As String = Trim(txtAdministrador.Text)
  Dim sClave As String = Trim(txtClaveAdministrador.Text)
  Dim sEmail As String = Trim(txtEmailAdministrador.Text)
  Dim sIP As String = Trim(ComboBoxIP.Text)
  Dim sClaveHash As String
  Dim sSQL As String
  Dim usuario_id As Integer
  Dim rCheck As Result

  ' Validaciones
  If Not sUsuario Or Not sClave Then
    Message.Warning("Usuario y contraseña son obligatorios")
    Return
  Endif

  If Not sIP Then
    Message.Warning("Debe seleccionar una IP de servidor")
    Return
  Endif

  If Len(sClave) < 8 Then
    Message.Warning("La contraseña debe tener al menos 8 caracteres")
    Return
  Endif

  ' Verificar si el usuario ya existe
  rCheck = hConn.Exec("SELECT id FROM superuser WHERE usuario = '" & sUsuario & "';")
  If rCheck.Available Then
    usuario_id = rCheck["id"]

    ' Verificar si ya tiene rol en esta IP
    rCheck = hConn.Exec("SELECT id FROM usuario_roles WHERE usuario_id = " & usuario_id & " AND servidor_ip = '" & sIP & "';")
    If rCheck.Available Then
      Message.Warning("El usuario '" & sUsuario & "' ya tiene rol asignado en el servidor " & sIP)
      Return
    Else
      ' Solo agregar el rol
      sSQL = "INSERT INTO usuario_roles (usuario_id, servidor_ip, rol) VALUES (" &
        usuario_id & ", '" & sIP & "', 'admin');"
      hConn.Exec(sSQL)
      Message.Info("Rol admin asignado a '" & sUsuario & "' para el servidor " & sIP)
    Endif

  Else
    ' Usuario nuevo
    sClaveHash = Hash.SHA256(sClave)

    ' Insertar usuario
    If Not sEmail Or sEmail = "@." Then
      sSQL = "INSERT INTO superuser (usuario, clave, email) VALUES ('" &
        sUsuario & "', '" & sClaveHash & "', NULL);"
    Else
      sSQL = "INSERT INTO superuser (usuario, clave, email) VALUES ('" &
        sUsuario & "', '" & sClaveHash & "', '" & sEmail & "');"
    Endif

    hConn.Exec(sSQL)
    usuario_id = hConn.LastInsertId

    ' Insertar rol
    sSQL = "INSERT INTO usuario_roles (usuario_id, servidor_ip, rol) VALUES (" &
      usuario_id & ", '" & sIP & "', 'admin');"
    hConn.Exec(sSQL)

    Message.Info("Administrador '" & sUsuario & "' creado exitosamente para el servidor " & sIP)
  Endif

  ' Limpiar campos
  txtAdministrador.Text = ""
  txtClaveAdministrador.Text = ""
  txtEmailAdministrador.Text = ""

Catch
  Message.Error("Error al crear administrador: " & Error.Text & " (" & Error.Where & ")")

End

Public Sub btnValidarSuperuser_Click()

  Dim sUsuario As String = Trim(txtAdministrador.Text)
  Dim sClave As String = Trim(txtClaveAdministrador.Text)
  Dim sIP As String = Trim(ComboBoxIP.Text)

  ' Validaciones básicas
  If Not sUsuario Or Not sClave Then
    Message.Warning("Debe ingresar usuario y contraseña")
    Return
  Endif

  If Not sIP Then
    Message.Warning("Debe seleccionar una IP de servidor")
    Return
  Endif

  ' ✅ Conectar y validar contra el servidor MySQL
  If Not ConectarYValidarServidor(sIP, sUsuario, sClave) Then
    txtAdministrador.Text = ""
    txtClaveAdministrador.Text = ""
    Return
  Endif

  ' ✅ Verificar rol y habilitar funciones
  If sRolActual = "admin" Then
    Message.Info("Acceso concedido como ADMINISTRADOR del servidor " & sServidorActual)
    HabilitarABMUsuarios()
    PanelUsuarios.Visible = True
    PanelAdmin.Visible = False
    ' Else
    '   Message.Info("Acceso concedido como USUARIO del servidor " & sServidorActual)
    '   HabilitarVistaUsuario()
  Endif

  ' Limpiar campos
  txtAdministrador.Text = ""
  txtClaveAdministrador.Text = ""

Catch
  Message.Error("Error: " & Error.Text & " (" & Error.Where & ")")

End

Private Sub HabilitarABMUsuarios()

  ' Mostrar paneles/botones de ABM
  HBoxValidar.Visible = True
  HBox1a.Visible = True
  TableViewUsuarios.Visible = True
  HBox2a.Visible = True
  HBox3a.Visible = True
  HBox4a.Visible = True
  HBox4a.Visible = True

  ' Mostrar info de sesión
  LabelSesion.Text = "Conectado como: " & sUsuarioActual & " (admin) @ " & sServidorActual

  ' Cargar usuarios del servidor
  CargarUsuariosDelServidor()

End

Private Sub HabilitarVistaUsuario()

  ' Vista limitada para usuarios comunes
  HBoxValidar.Visible = False
  HBox1a.Visible = True

  ' Deshabilitar funciones de admin
  btnCrearUsuario.Enabled = False
  btnEditarUsuario.Enabled = False
  btnEliminarUsuario.Enabled = False

  LabelSesion.Text = "Conectado como: " & sUsuarioActual & " (usuario) @ " & sServidorActual

  Message.Info("Acceso limitado. Solo puede consultar datos.")

End

Private Sub CargarUsuariosDelServidor()

  Dim rUsuarios As Result
  Dim iRow As Integer

  ' Limpiar tabla
  TableViewUsuarios.Clear()
  TableViewUsuarios.Rows.Count = 0
  TableViewUsuarios.Columns.Count = 5

  ' Configurar columnas
  TableViewUsuarios.Columns[0].Title = "ID"
  TableViewUsuarios.Columns[0].Width = 50
  TableViewUsuarios.Columns[1].Title = "Usuario"
  TableViewUsuarios.Columns[1].Width = 120
  TableViewUsuarios.Columns[2].Title = "Email"
  TableViewUsuarios.Columns[2].Width = 450
  TableViewUsuarios.Columns[3].Title = "Rol"
  TableViewUsuarios.Columns[3].Width = 80
  TableViewUsuarios.Columns[4].Title = "Activo"
  TableViewUsuarios.Columns[4].Width = 50

  ' ✅ Cargar usuarios desde el servidor MySQL
  rUsuarios = hConnServidor.Exec("SELECT id, usuario, email, rol, activo " &
    "FROM usuarios_sistema ORDER BY usuario;")

  While rUsuarios.Available
    TableViewUsuarios.Rows.Count += 1
    iRow = TableViewUsuarios.Rows.Count - 1

    TableViewUsuarios[iRow, 0].Text = rUsuarios["id"]
    TableViewUsuarios[iRow, 1].Text = rUsuarios["usuario"]
    TableViewUsuarios[iRow, 2].Text = rUsuarios["email"]
    TableViewUsuarios[iRow, 3].Text = rUsuarios["rol"]
    TableViewUsuarios[iRow, 4].Text = If(rUsuarios["activo"], "Sí", "No")

    rUsuarios.MoveNext()
  Wend

  Print "Usuarios cargados: " & TableViewUsuarios.Rows.Count

Catch
  Message.Error("Error al cargar usuarios: " & Error.Text)

End

Public Function ConectarYValidarServidor(sIP As String, sUsuario As String, sClave As String) As Boolean

  Dim sClaveHash As String
  Dim rUser As Result

  sClaveHash = Hash.SHA256(sClave)

  hConnServidor = New Connection
  hConnServidor.Type = "mysql"
  hConnServidor.Host = sIP
  hConnServidor.Port = 3306
  hConnServidor.Name = "gbpublisher"
  hConnServidor.User = "app_user"
  hConnServidor.Password = "AppUser2024!"

  Try hConnServidor.Open()
  If Not hConnServidor.Opened Then
    Message.Error("No se pudo conectar al servidor MySQL")
    Return False
  Endif

  rUser = hConnServidor.Exec("SELECT id, rol, activo, primer_acceso FROM usuarios_sistema " &
    "WHERE usuario = '" & sUsuario & "' " &
    "AND clave_hash = '" & sClaveHash & "';")

  If Not rUser.Available Then
    Message.Warning("Usuario o contraseña incorrectos")
    hConnServidor.Close()
    Return False
  Endif

  If Not rUser["activo"] Then
    Message.Warning("Usuario deshabilitado")
    hConnServidor.Close()
    Return False
  Endif

  sUsuarioActual = sUsuario
  sRolActual = rUser["rol"]
  sServidorActual = sIP

  ' ✅ Verificar si es el primer acceso
  If rUser["primer_acceso"] Then
    Message.Info("Debe cambiar la contraseña predeterminada")
    If Not CambiarPasswordObligatorio(rUser["id"]) Then
      hConnServidor.Close()
      Return False
    Endif
  Endif

  Return True

Catch
  Message.Error("Error: " & Error.Text)
  Return False

End

Private Function CambiarPasswordObligatorio(iUsuarioID As Integer) As Boolean

  Dim sNuevoUsuario As String
  Dim sNuevaClave As String
  Dim sConfirmarClave As String
  Dim sClaveHash As String

  Message.Info("Por seguridad, debe personalizar el usuario administrador")

  ' ✅ Permitir cambiar el nombre de usuario
  sNuevoUsuario = InputBox("Ingrese el nuevo nombre de usuario:", "Cambio obligatorio", "admin")

  If Not sNuevoUsuario Or Len(sNuevoUsuario) < 4 Then
    Message.Warning("El usuario debe tener al menos 4 caracteres")
    Return False
  Endif

  ' Verificar que no exista otro usuario con ese nombre
  Dim rCheck As Result = hConnServidor.Exec("SELECT id FROM usuarios_sistema WHERE usuario = '" & sNuevoUsuario & "' AND id != " & iUsuarioID & ";")

  If rCheck.Available Then
    Message.Warning("El usuario '" & sNuevoUsuario & "' ya existe")
    Return False
  Endif

  ' Solicitar nueva contraseña
  sNuevaClave = InputBox("Ingrese la nueva contraseña (mín. 8 caracteres):", "Nueva contraseña")

  If Not sNuevaClave Or Len(sNuevaClave) < 8 Then
    Message.Warning("La contraseña debe tener al menos 8 caracteres")
    Return False
  Endif

  ' Validar fortaleza de contraseña
  If Not ValidarFortalezaPassword(sNuevaClave) Then
    Message.Warning("La contraseña debe incluir:\n- Al menos una mayúscula\n- Al menos un número")
    Return False
  Endif

  ' Confirmar contraseña
  sConfirmarClave = InputBox("Confirme la nueva contraseña:", "Confirmación")

  If sNuevaClave <> sConfirmarClave Then
    Message.Warning("Las contraseñas no coinciden")
    Return False
  Endif

  ' ✅ Actualizar usuario Y contraseña en el servidor
  sClaveHash = Hash.SHA256(sNuevaClave)

  hConnServidor.Exec("UPDATE usuarios_sistema SET " &
    "usuario = '" & sNuevoUsuario & "', " &
    "clave_hash = '" & sClaveHash & "', " &
    "primer_acceso = FALSE, " &
    "fecha_cambio_password = NOW() " &
    "WHERE id = " & iUsuarioID & ";")

  ' Actualizar variable de sesión
  sUsuarioActual = sNuevoUsuario

  Message.Info("Credenciales actualizadas correctamente.\n\n" &
    "IMPORTANTE: Anote estas credenciales:\n" &
    "Usuario: " & sNuevoUsuario & "\n" &
    "Contraseña: " & sNuevaClave & "\n\n" &
    "Deberá usarlas en el próximo acceso.")

  Return True

Catch
  Message.Error("Error al cambiar credenciales: " & Error.Text)
  Return False

End

Private Function ValidarFortalezaPassword(sPassword As String) As Boolean

  Dim bTieneMayuscula As Boolean = False
  Dim bTieneNumero As Boolean = False
  Dim i As Integer

  For i = 1 To Len(sPassword)
    If Mid(sPassword, i, 1) >= "A" And Mid(sPassword, i, 1) <= "Z" Then
      bTieneMayuscula = True
    Endif
    If IsDigit(Mid(sPassword, i, 1)) Then
      bTieneNumero = True
    Endif
  Next

  Return bTieneMayuscula And bTieneNumero

End
