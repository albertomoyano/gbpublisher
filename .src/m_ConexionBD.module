' Gambas module file

Public mConn As Connection
Public UsuarioActual As String

Public Function ConexionAbierta(ip As String, usuario As String, claveEncriptada As String) As Integer

  Dim sSQL As String
  Dim hResultado As Result

  ' Crear y configurar conexión
  mConn = New Connection
  mConn.Type = "mysql"
  mConn.Host = ip
  mConn.Port = 3306
  mConn.Name = "gbpublisher"
  mConn.User = "app_user"
  mConn.Password = "AppUser2024!"

  ' ABRIR LA CONEXIÓN
  Try mConn.Open

  If Error Then
    m_Sonido.sonar("Error")
    Message.Error("Error al abrir conexión: " & Error.Text)
    Return 0
  Endif

  If Not mConn.Opened Then
    m_Sonido.sonar("Error")
    Message.Error("La conexión no se pudo abrir correctamente")
    Return 0
  Endif

  ' Construir SQL directamente
  Error.Clear
  sSQL = "SELECT * FROM usuarios WHERE usuario = '" & usuario & "' AND clave = '" & claveEncriptada & "'"

  ' Ejecutar consulta
  hResultado = mConn.Exec(sSQL)

  If Error Then
    m_Sonido.sonar("Error")
    Message.Error("Error en consulta: " & Error.Text)
    Return 0
  Endif

  Print "Exec completado"

  ' Verificar resultado
  If Not hResultado Then
    Return 0
  Endif

  ' Verificar si encontró el usuario
  If Not hResultado.Available Then
    Return 3
  Endif

  Print "Usuario encontrado en BD"

  ' ' Verificar si está activo
  ' If Val(hResultado["activo"]) = 0 Then
  '   Print "Usuario inactivo"
  '   Message.Warning("El usuario <strong>" & usuario & "</strong> está inactivo.")
  '   Return 2
  ' Endif

  Print "Usuario activo OK"

  ' ' Verificar si ya está conectado
  ' If Val(hResultado["en_linea"]) = 1 Then
  '   Print "Usuario ya conectado"
  '   Message.Warning("El usuario <strong>" & usuario & "</strong> ya está conectado en otra máquina.")
  '   Return 2
  ' Endif

  Print "Usuario no conectado, procediendo..."

  ' ' Marcar como conectado
  ' UsuarioActual = usuario
  ' mConn.Exec("UPDATE usuarios SET en_linea = 1, ultimo_acceso = CURRENT_TIMESTAMP WHERE usuario = '" & usuario & "'")
  '
  ' If Error Then
  '   Print "ERROR al actualizar: " & Error.Text
  ' Else
  '   Print "Usuario marcado como conectado"
  ' Endif

  Return 1

End

Public Sub CerrarTodo()

  ' Ahora realizamos las operaciones que podrían fallar
  Try FMain.TerminalViewProyecto.Input("rm -rf " & User.Home & "/.local/share/org.gambas.*" & "\n")
  Try FMain.TerminalViewProyecto.Input("clear" & "\n")
  Wait 0.2
  ' Detener el proceso Bash
  If FMain.$Bash And If FMain.$Bash.State = Process.Running Then
    Try FMain.$Bash.Kill
    Wait 0.2
    If FMain.$Bash.State = Process.Running Then
      Try FMain.$Bash.Terminate
      Wait 0.2
      If FMain.$Bash.State = Process.Running Then
        m_Sonido.sonar("Warning")
        Message.Warning("El proceso no pudo ser detenido.")
      Endif
    Endif
  Endif
  ' Limpiar la interfaz
  FMain.txtProyecto.Text = ""
  FMain.DirViewProyecto.Root = User.Home
  FMain.TextBoxUsuario.Text = ""
  FMain.TextBoxServidor.Text = ""
  ' Finalmente cerrar la conexión y salir
  Try mConn.Close
  Quit

End

'
' ' ==========================================
' ' MÉTODO PARA ACTUALIZAR ÚLTIMO ACCESO
' ' ==========================================
' Public Sub ActualizarAccesoUsuario(sUsuario As String)
'
'   If Not ConexionAbierta Then
'     Return
'   Endif
'
'   $ConexionBD.Exec("UPDATE usuarios SET ultimo_acceso = NOW(), en_linea = 1 WHERE usuario = &1", sUsuario)
'
'   If Error Then
'     Print "Error al actualizar último acceso: " & Error.Text
'   Else
'     Print "Último acceso actualizado para: " & sUsuario
'   Endif
'
' End
'
' ' ==========================================
' ' MÉTODO PARA MARCAR USUARIO COMO DESCONECTADO
' ' ==========================================
' Public Sub MarcarUsuarioDesconectado()
'
'   If Not ConexionAbierta Or UsuarioActual = "" Then
'     Return
'   Endif
'
'   $ConexionBD.Exec("UPDATE usuarios SET en_linea = 0 WHERE usuario = &1", UsuarioActual)
'
'   If Error Then
'     Print "Error al marcar usuario desconectado: " & Error.Text
'   Else
'     Print "Usuario marcado como desconectado: " & UsuarioActual
'   Endif
'
' End
'
' ' ==========================================
' ' MÉTODO PARA EJECUTAR CONSULTAS GENERALES
' ' ==========================================
' Public Function EjecutarConsulta(sSQL As String) As Result
'
'   Dim rResultado As Result
'
'   If Not ConexionAbierta Then
'     Message.Error("No hay conexión a la base de datos", "Error")
'     Return Null
'   Endif
'
'   rResultado = $ConexionBD.Exec(sSQL)
'
'   If Error Then
'     Message.Error("Error al ejecutar consulta:\n" & Error.Text, "Error SQL")
'     Return Null
'   Endif
'
'   Return rResultado
'
' End
'
' ' ==========================================
' ' MÉTODO PARA OBTENER INFORMACIÓN DEL USUARIO ACTUAL
' ' ==========================================
' Public Function ObtenerDatosUsuario() As Collection
'
'   Dim cDatos As New Collection
'
'   cDatos["id"] = IdUsuarioActual
'   cDatos["usuario"] = UsuarioActual
'   cDatos["email"] = EmailActual
'   cDatos["ip"] = IPActual
'
'   Return cDatos
'
' End
