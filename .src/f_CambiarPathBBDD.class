' Gambas class file

' Constante para la ruta por defecto
Private Const DEFAULT_DB_PATH As String = "/.gbadoc"

Public Sub Form_Open()
  ' Cargar la ruta de la base de datos al abrir el formulario

  LoadDbPath()

End

Private Sub LoadDbPath()

  Dim sDbPath As String

  ' Intentar cargar desde Settings, si no existe usar la ruta por defecto
  sDbPath = Settings["Database/Path", User.Home & DEFAULT_DB_PATH]

  ' Mostrar la ruta en el textbox
  txtRutaBBDD.Text = sDbPath

End

Public Sub btnMoveDb_Click()

  Dialog.Title = "Seleccionar directorio para la base de datos"
  Dialog.Path = User.Home

  If Dialog.SelectDirectory() Then
    ' Si el usuario cancela, salimos sin hacer nada
    Return
  End If

  ' Mostramos la ruta seleccionada en el textbox
  txtRutaBBDD.Text = Dialog.Path

End

' Función para obtener la ruta actual de la base de datos
' (útil para usar en tu función OnRed())
Public Function GetCurrentDbPath() As String

  Return Settings["Database/Path", User.Home & DEFAULT_DB_PATH]

End

Public Sub btnCerrar_Click()

  Me.Close

End

Public Sub btnGuardar_Click()

  Dim sNewPath As String = Trim(txtRutaBBDD.Text)
  Dim sCurrentPath As String
  Dim sCurrentDbFile As String
  Dim sNewDbFile As String

  ' Validar que la ruta no esté vacía
  If sNewPath = "" Then
    Message.Error("Debe especificar una ruta válida")
    Return
  End If

  ' Validar que el directorio existe
  If Not Exist(sNewPath) Then
    Message.Error("El directorio especificado no existe")
    Return
  End If

  ' Validar permisos de escritura
  If Not Access(sNewPath, gb.Write) Then
    Message.Error("No tienes permisos de escritura en este directorio")
    Return
  End If

  ' Obtener la ruta actual de la base de datos
  sCurrentPath = Settings["Database/Path", User.Home & DEFAULT_DB_PATH]

  ' Si la ruta es la misma, no hacer nada
  If sCurrentPath = sNewPath Then
    Message.Info("La ruta seleccionada es la misma que la actual")
    Return
  End If

  ' Construir las rutas completas de los archivos
  sCurrentDbFile = sCurrentPath &/ "gbadoc.sqlite"
  sNewDbFile = sNewPath &/ "gbadoc.sqlite"

  ' Verificar que existe la base de datos en la ubicación actual
  If Not Exist(sCurrentDbFile) Then
    Message.Error("No se encuentra la base de datos en la ubicación actual:\n" & sCurrentDbFile)
    Return
  End If

  ' Verificar que no existe ya una base de datos en el destino
  If Exist(sNewDbFile) Then
    If Message.Question("Ya existe una base de datos en el destino.\n¿Desea sobrescribirla?", "No", "Sí") = 1 Then
      Return
    End If
  End If

  ' Cerrar cualquier conexión existente (si existe)
  ' Aquí deberías llamar a tu función OffRed() si hay una conexión activa
  m_OnOff_y_Red.OffRed()

  ' Crear el directorio de destino si no existe
  If Not Exist(sNewPath) Then
    Try Mkdir sNewPath
    If Error Then
      Message.Error("Error al crear el directorio:\n" & Error.Text)
      Return
    End If
  End If

  ' Mover la base de datos
  Try Move sCurrentDbFile To sNewDbFile
  If Error Then
    Message.Error("Error al mover la base de datos:\n" & Error.Text)
    Return
  End If

  ' Guardar la nueva ruta en Settings
  Settings["Database/Path"] = sNewPath
  Settings.Save()

  Message.Info("Base de datos movida correctamente a:\n" & sNewPath & "\n\nLa aplicación utilizará la nueva ubicación en el próximo reinicio.")

End

Public Sub btnReslpaldarBBDD_Click()

  Dim sOrigen As String
  Dim sDestino As String
  Dim sDirectorioDestino As String
  Dim sNombreArchivo As String = "gbadoc_backup_" & Format(Now, "yyyymmdd_hhmmss") & ".sqlite"
  Dim sDbPath As String

  ' Obtener la ruta actual de la base de datos desde Settings
  sDbPath = Settings["Database/Path", User.Home & "/.gbadoc"]
  sOrigen = sDbPath &/ "gbadoc.sqlite"

  ' Verificar si el archivo existe
  If Not Exist(sOrigen) Then
    Message.Error("No se encontró el archivo de base de datos en: " & sOrigen)
    Return
  Endif

  ' Mostrar diálogo para seleccionar directorio
  Dialog.Title = "Seleccione la carpeta donde guardar la copia"
  If Dialog.SelectDirectory() <> 0 Then
    Return  ' Usuario canceló
  Endif

  sDirectorioDestino = Dialog.Path
  sDestino = sDirectorioDestino &/ sNombreArchivo

  ' Copiar el archivo
  Try Copy sOrigen To sDestino
  If Error Then
    Message.Error("Error al realizar la copia de seguridad: " & Error.Text)
    Return
  Endif

  Message.Info("Copia de seguridad creada en:" & gb.NewLine & sDestino)

End
