' Gambas module file

' Variables globales
Public horas As Integer
Public minutos As Integer
Public segundos As Integer
Public horasTotal As Integer
Public minutosTotal As Integer
Public segundosTotal As Integer
Private id_proyecto As Integer
Private nuevoID As Integer

' Inicia el reloj en 00:00:00 y comienza el temporizador
Public Sub IniciarContadorReloj(proyectoID As Integer)
  ' Resetear contador parcial

  horas = 0
  minutos = 0
  segundos = 0

  ' Guardar el ID del proyecto - ASEGURAR que es Integer
  id_proyecto = CInt(proyectoID)

  ' Cargar tiempo total acumulado para este proyecto
  CargarTiempoTotal()

  ' Verificar si existe registro en la tabla contador_tiempo, si no crearlo
  VerificarOCrearRegistroTimer()

  ' Establece intervalo y activa el Timer
  FMain.TimerHOY.Delay = 1000
  FMain.TimerHOY.Restart

End

' Esta función se llama cada segundo desde el evento Timer del formulario
Public Sub ActualizarContador()

  segundos += 1
  If segundos = 60 Then
    segundos = 0
    minutos += 1
  Endif

  If minutos = 60 Then
    minutos = 0
    horas += 1
  Endif

  ' Actualiza el TextBox parcial
  FMain.TextHoraParcial.Text = Format(horas, "00") & ":" & Format(minutos, "00") & ":" & Format(segundos, "00")

  ' También actualiza el total acumulado visible
  ActualizarDisplayTotal()

End

' Guardar el tiempo total acumulado en la base de datos
Public Sub GuardarTiempoTotal()

  Dim tiempoTotalSegundos As Integer
  Dim tiempoParcialSegundos As Integer

  ' Verificar que tenemos un ID válido (ya fue establecido en IniciarContadorReloj)
  If id_proyecto <= 0 Then
    Return
  Endif

  ' Verificar conexión
  If IsNull(m_ConexionBD.mConn) Then
    Return
  Endif

  If Not m_ConexionBD.mConn.Opened Then
    Return
  Endif

  ' Calcular tiempo parcial en segundos
  tiempoParcialSegundos = (horas * 3600) + (minutos * 60) + segundos

  ' Calcular tiempo total (acumulado + parcial actual)
  tiempoTotalSegundos = (horasTotal * 3600) + (minutosTotal * 60) + segundosTotal + tiempoParcialSegundos

  ' Ejecutar UPDATE
  Dim updateQuery As String
  updateQuery = "UPDATE contador_tiempo SET tiempo_total = &1 WHERE id_proyecto = &2"
  m_ConexionBD.mConn.Exec(updateQuery, tiempoTotalSegundos, CInt(id_proyecto))

  If Error Then
  Endif

End

' Cargar el tiempo total acumulado desde la base de datos
Public Sub CargarTiempoTotal()

  Dim rResultado As Result
  Dim tiempoTotalSegundos As Integer = 0

  ' Verificar que la conexión existe y está disponible
  If IsNull(m_ConexionBD.mConn) Then
    Return
  Endif

  If Not m_ConexionBD.mConn.Opened Then
    Return
  Endif

  ' Consultar el tiempo total para este proyecto
  Dim queryTiempo As String = "SELECT tiempo_total FROM contador_tiempo WHERE id_proyecto = " & CStr(CInt(id_proyecto))
  rResultado = m_ConexionBD.mConn.Exec(queryTiempo)
  If Error Then
    Return
  Endif

  If rResultado.Available Then
    tiempoTotalSegundos = rResultado!tiempo_total
    If Error Then tiempoTotalSegundos = 0
    If IsNull(tiempoTotalSegundos) Then tiempoTotalSegundos = 0
  Else
    tiempoTotalSegundos = 0
  Endif

  ' Convertir segundos a horas:minutos:segundos
  horasTotal = Int(tiempoTotalSegundos / 3600)
  minutosTotal = Int((tiempoTotalSegundos Mod 3600) / 60)
  segundosTotal = tiempoTotalSegundos Mod 60

  ActualizarDisplayTotal()

End

' Verificar si existe registro en contador_tiempo, si no existe lo crea
Public Sub VerificarOCrearRegistroTimer()

  Dim rResultado As Result
  Dim rInsert As Result
  Dim sqlQuery As String

  If IsNull(m_ConexionBD.mConn) Or Not m_ConexionBD.mConn.Opened Then Return

  ' Verificar si ya existe registro en contador_tiempo
  sqlQuery = "SELECT id FROM contador_tiempo WHERE id_proyecto = " & CStr(CInt(id_proyecto))
  rResultado = m_ConexionBD.mConn.Exec(sqlQuery)
  If Error Then
    Return
  Endif

  ' Si no existe, crear el registro
  If Not rResultado.Available Then
    Dim insertQuery As String = "INSERT INTO contador_tiempo (id_proyecto, tiempo_total) VALUES (" & CStr(CInt(id_proyecto)) & ", 0)"
    m_ConexionBD.mConn.Exec(insertQuery)
    If Error Then
      Return
    Endif

    ' Obtener ID insertado (MySQL)
    Dim rID As Result = m_ConexionBD.mConn.Exec("SELECT LAST_INSERT_ID()")
    If rID.Available Then
      nuevoID = rID[0]
    Endif
  Endif

End

' Actualizar la visualización del tiempo total
Public Sub ActualizarDisplayTotal()
  ' Calcular y mostrar el tiempo total (suma del tiempo parcial actual + tiempo total anterior)

  Dim totalHoras As Integer = horasTotal
  Dim totalMinutos As Integer = minutosTotal
  Dim totalSegundos As Integer = segundosTotal + segundos

  ' Ajustar los segundos
  If totalSegundos >= 60 Then
    totalMinutos += Int(totalSegundos / 60)
    totalSegundos = totalSegundos Mod 60
  Endif

  ' Ajustar los minutos
  totalMinutos += minutos
  If totalMinutos >= 60 Then
    totalHoras += Int(totalMinutos / 60)
    totalMinutos = totalMinutos Mod 60
  Endif

  ' Ajustar las horas
  totalHoras += horas

  ' Mostrar tiempo total (tiempo acumulado + tiempo actual)
  FMain.TextHoraTotal.Text = Format(totalHoras, "00") & ":" & Format(totalMinutos, "00") & ":" & Format(totalSegundos, "00")

End

' Detener el contador y guardar el tiempo
Public Sub DetenerContador()

  FMain.TimerHOY.Stop
  GuardarTiempoTotal()

End
