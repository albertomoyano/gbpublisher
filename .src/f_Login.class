' Gambas class file

Public Sub Form_Open()

  ' Limpiar campos al iniciar
  TextBoxIP.Text = ""
  TextBoxUsuario.Text = ""
  TextBoxClave.Text = ""

  ' Comprobar si ya existe una conexión activa
  If Object.IsValid(m_ConexionBD) And Object.IsValid(m_ConexionBD.mConn) Then
    If m_ConexionBD.mConn.Opened Then
      ' Hay una conexión activa
      m_Sonido.sonar("Error")
      Message.Error("Ya existe una conexión activa al servidor " & FMain.TextBoxServidor.Text & Chr(10) &
        "Debe desconectarse antes de conectarse a un nuevo servidor.")

      ' Mostrar botón de desconexión
      btnConectarServer.Visible = False
      btnDesconectarServer.Visible = True

      ' Deshabilitar campos para evitar nueva conexión
      TextBoxIP.Enabled = False
      TextBoxUsuario.Enabled = False
      TextBoxClave.Enabled = False
    Else
      ' No hay conexión activa
      btnConectarServer.Visible = True
      btnDesconectarServer.Visible = False
      TextBoxIP.Enabled = True
      TextBoxUsuario.Enabled = True
      TextBoxClave.Enabled = True
    Endif
  Else
    ' No existe aún el módulo o la conexión
    btnConectarServer.Visible = True
    btnDesconectarServer.Visible = False
    TextBoxIP.Enabled = True
    TextBoxUsuario.Enabled = True
    TextBoxClave.Enabled = True
  Endif

End

Public Sub btnCancelar_Click()

  Me.Close

End

Public Sub ToggleButtonMostrar_Click()

  If ToggleButtonMostrar.Value Then
    TextBoxClave.Password = False
  Else
    TextBoxClave.Password = True
  Endif
  TextBoxClave.Refresh()
  TextBoxClave.SetFocus()

End

Public Sub btnConectarServer_Click()

  Dim ip As String = TextBoxIP.Text
  Dim usuario As String = TextBoxUsuario.Text
  Dim clave As String = TextBoxClave.Text
  Dim iResultado As Integer

  ' Validaciones básicas
  If Trim(ip) = "" Then
    m_Sonido.sonar("Warning")
    Message.Warning("Ingrese una IP correcta")
    TextBoxIP.SetFocus()
    Return
  End If

  If Trim(usuario) = "" Then
    m_Sonido.sonar("Warning")
    Message.Warning("Ingrese el nombre de usuario")
    TextBoxUsuario.SetFocus()
    Return
  End If

  If Trim(clave) = "" Then
    m_Sonido.sonar("Warning")
    Message.Warning("Ingrese la contraseña")
    TextBoxClave.SetFocus()
    Return
  End If

  ' Encriptar clave
  Dim sClaveEncriptada As String = Hash.SHA256(clave)

  ' Verificar conectividad
  If Not ValidarConectividad(ip) Then
    m_Sonido.sonar("Error")
    Message.Error("No se puede conectar al servidor " & ip & Chr(10) &
      "Verifique que el servidor esté encendido y la red funcione correctamente.")
    Return
  End If

  ' Intentar conexión
  iResultado = m_ConexionBD.ConexionAbierta(ip, usuario, sClaveEncriptada)

  Select Case iResultado
    Case 1
      m_Sonido.sonar("Info")
      Message.Info("Conexión exitosa al servidor " & ip)

      m_InicioCierre.UsuarioEnCurso = usuario
      FMain.MenuInicio.Visible = True
      FMain.ButtonCerrarApp.Visible = False
      FMain.ButtonNotitas.Enabled = True
      FMain.ButtonBolckNotas.Enabled = True
      FMain.ButtonAdminRepositorios.Enabled = True
      FMain.ButtonConsultasSQL.Enabled = True
      FMain.ButtonCorregirBib.Enabled = True
      FMain.ButtonBitacora.Enabled = True
      FMain.TextBoxUsuario.Text = usuario
      FMain.TextBoxServidor.Text = ip
      FMain.TableViewUsuarios.Visible = True
      m_InicioCierre.CargarUsuarios()

      Me.Close()

    Case 2
      m_Sonido.sonar("Error")
      Message.Error("El usuario ya está conectado o está inactivo.")

    Case 3
      m_Sonido.sonar("Error")
      Message.Error("Usuario y/o clave incorrectos.")

    Case Else
      m_Sonido.sonar("Error")
      Message.Error("Error al intentar conectar al servidor.")
  End Select

End

Public Sub btnDesconectarServer_Click()

  ' Confirmar desconexión
  m_Sonido.sonar("Question")
  If Message.Question("¿Desea desconectarse del servidor actual?", "Sí", "No") = 1 Then

    Try m_ConexionBD.mConn.Close

    If Not Error Then
      m_Sonido.sonar("Info")
      Message.Info("Se ha desconectado correctamente del servidor.")

      ' Actualizar botones
      btnConectarServer.Visible = True
      btnDesconectarServer.Visible = False

      ' Limpiar datos y habilitar campos
      TextBoxIP.Enabled = True
      TextBoxUsuario.Enabled = True
      TextBoxClave.Enabled = True
      TextBoxIP.Text = ""
      TextBoxUsuario.Text = ""
      TextBoxClave.Text = ""

      ' Limpiar en FMain
      FMain.TextBoxServidor.Text = ""
      FMain.TextBoxUsuario.Text = ""
      FMain.MenuInicio.Visible = False
      FMain.ButtonCerrarApp.Visible = True
      FMain.TableViewUsuarios.Visible = False

      ' Deshabilitar botones del menú
      FMain.ButtonNotitas.Enabled = False
      FMain.ButtonBolckNotas.Enabled = False
      FMain.ButtonAdminRepositorios.Enabled = False
      FMain.ButtonConsultasSQL.Enabled = False
      FMain.ButtonCorregirBib.Enabled = False
      FMain.ButtonBitacora.Enabled = False

    Else
      m_Sonido.sonar("Error")
      Message.Error("No se pudo cerrar la conexión correctamente: " & Error.Text)
    End If

  End If

End

Private Function ValidarConectividad(ip As String) As Boolean

  Dim archivo As String = "/tmp/ping_result_" & CStr(Timer)
  Dim comando As String
  Dim contenido As String

  comando = "ping -c 1 -W 3 " & ip & " > " & archivo & " 2>&1; echo $? >> " & archivo

  Try Shell comando Wait
  If Error Then Return False

  If Exist(archivo) Then
    Try contenido = File.Load(archivo)
    If Not Error Then
      Dim lineas As String[] = Split(contenido, "\n")
      Dim codigoSalida As String = ""
      If lineas.Count > 0 Then
        codigoSalida = Trim(lineas[lineas.Count - 1])
        If codigoSalida = "" And lineas.Count > 1 Then
          codigoSalida = Trim(lineas[lineas.Count - 2])
        End If
      End If
      Try Kill archivo
      Return codigoSalida = "0"
    End If
    Try Kill archivo
  End If

  Return False

End

Public Sub TextBoxClave_KeyPress()

  If Key.Code = Key.Return Then
    Stop Event
    btnConectarServer_Click()
  Endif

End