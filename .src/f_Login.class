' Gambas class file

' ' Gambas class file
'
' Public Sub btnConectarseMy_Click()
'
'   Dim ip As String = ComboBoxIP.Text
'   Dim usuario As String = TextBoxUsuario.Text
'   Dim clave As String = TextBoxClave.Text
'   Dim iResultado As Integer
'
'   ' Validar que se haya seleccionado una IP
'   If ComboBoxIP.Index = -1 Or Trim(ip) = "" Then
'     Message.Warning("Seleccione una dirección IP de la lista")
'     ComboBoxIP.SetFocus()
'     Return
'   End If
'
'   ' Validar usuario
'   If Trim(usuario) = "" Then
'     Message.Warning("Ingrese el nombre de usuario")
'     TextBoxUsuario.SetFocus()
'     Return
'   End If
'
'   ' Validar clave
'   If Trim(clave) = "" Then
'     Message.Warning("Ingrese la contraseña")
'     TextBoxClave.SetFocus()
'     Return
'   End If
'
'   ' Validar conectividad del servidor
'   If Not ValidarConectividad(ip) Then
'     Message.Error("No se puede conectar al servidor " & ip & Chr(10) &
'       "Verifique que el servidor esté encendido y la red funcione correctamente.")
'     Return
'   End If
'
'   iResultado = m_OnOff_y_Red.OnRed(ip, usuario, clave)
'   Select Case iResultado
'     Case 1  ' Login exitoso
'       Me.Hide()
'       FMain.ShowModal()
'     Case 2  ' Usuario ya conectado - no mostrar mensaje adicional
'       ' El mensaje ya se mostró en OnRed
'     Case 3  ' Credenciales incorrectas
'       Message.Error("Usuario y/o clave incorrectos.")
'     Case Else  ' Error de conexión o consulta
'       ' El mensaje ya se mostró en OnRed
'   End Select
'
' End
'
' Private Function ValidarConectividad(ip As String) As Boolean
'
'   Dim archivo As String = "/tmp/ping_result_" & CStr(Timer)
'   Dim comando As String
'   Dim contenido As String
'
'   ' Crear comando que guarde el resultado en un archivo temporal
'   comando = "ping -c 1 -W 3 " & ip & " > " & archivo & " 2>&1; echo $? >> " & archivo
'
'   ' Ejecutar el comando
'   Try Shell comando Wait
'
'   If Error Then
'     Return False
'   End If
'
'   ' Leer el archivo de resultado
'   If Exist(archivo) Then
'     Try contenido = File.Load(archivo)
'
'     If Not Error Then
'       ' El último carácter debería ser el código de salida
'       Dim lineas As String[] = Split(contenido, "\n")
'       Dim codigoSalida As String = ""
'
'       If lineas.Count > 0 Then
'         codigoSalida = Trim(lineas[lineas.Count - 1])
'         If codigoSalida = "" And lineas.Count > 1 Then
'           codigoSalida = Trim(lineas[lineas.Count - 2])
'         End If
'       End If
'
'       ' Limpiar archivo temporal
'       Try Kill archivo
'
'       ' Código 0 significa éxito
'       Return codigoSalida = "0"
'     End If
'
'     ' Limpiar archivo temporal en caso de error
'     Try Kill archivo
'   End If
'
'   Return False
'
' End
'
' Public Sub Form_Open()
'
'   ComboBoxIP.Clear()
'   Dim rutaIPs As String = User.Home & "/.gbpivot/ips.txt"
'
'   If Exist(rutaIPs) Then
'     Dim contenidoArchivo As String
'     Try contenidoArchivo = File.Load(rutaIPs)
'
'     ' Verificar que no hubo error y el contenido no esté vacío
'     If Not Error And contenidoArchivo And Len(contenidoArchivo) > 0 Then
'       Dim linea As String
'       Dim contenido As String[] = Split(contenidoArchivo, Chr(10), "", True)
'
'       For Each linea In contenido
'         linea = Trim(linea)
'         If linea <> "" Then
'           ComboBoxIP.Add(linea)
'         End If
'       Next
'     End If
'   End If
'
'   txtLicencia1.Pos = 0
'   txtLicencia2.Pos = 0
'   txtLicencia3.Pos = 0
'
' End
'
' ' Método para recargar solo el ComboBox (extraído del Form_Open)
' Public Sub CargarComboBoxIP()
'
'   ComboBoxIP.Clear()
'   Dim rutaIPs As String = User.Home & "/.gbpivot/ips.txt"
'
'   If Exist(rutaIPs) Then
'     Dim contenidoArchivo As String
'     Try contenidoArchivo = File.Load(rutaIPs)
'
'     If Not Error And contenidoArchivo And Len(contenidoArchivo) > 0 Then
'       Dim linea As String
'       Dim contenido As String[] = Split(contenidoArchivo, Chr(10), "", True)
'
'       For Each linea In contenido
'         linea = Trim(linea)
'         If linea <> "" Then
'           ComboBoxIP.Add(linea)
'         End If
'       Next
'     End If
'   End If
'
' End
'
' Public Sub btnEditarIPs_Click()
'
'   f_EditarIPs.ShowModal()
'
'   ' Refrescar el ComboBox inmediatamente después de cerrar el modal
'   CargarComboBoxIP()
'
' End
'
' Public Function ObtenerInfoCompleta() As String
'
'   Dim sInfo As String
'   Dim sTemp As String
'
'   ' Información básica del sistema
'   sInfo &= "=== SISTEMA ===\n"
'   Shell "uname -a" To sTemp
'   If Not Error Then
'     sInfo &= sTemp
'   Else
'     sInfo &= "No se pudo obtener información del sistema"
'   End If
'   sInfo &= "\n\n"
'
'   ' Entorno gráfico en uso
'   sInfo &= "=== ENTORNO GRÁFICO ===\n"
'   sInfo &= ObtenerInfoEntornoGrafico() & "\n"
'
'   ' Librerías GTK
'   sInfo &= "=== LIBRERÍAS GTK ===\n"
'   sInfo &= ObtenerInfoGTK() & "\n"
'
'   ' Librerías Qt/KDE
'   sInfo &= "=== LIBRERÍAS QT/KDE ===\n"
'   sInfo &= ObtenerInfoQt() & "\n"
'
'   ' Versión de Gambas
'   sInfo &= "=== GAMBAS ===\n"
'   sInfo &= "Versión runtime: " & System.Version & "\n"
'   sInfo &= "Versión aplicación: " & Application.Version & "\n\n"
'
'   ' Información de memoria y CPU
'   sInfo &= "=== HARDWARE ===\n"
'   sInfo &= ObtenerInfoHardware() & "\n"
'
'   ' Otras dependencias importantes
'   sInfo &= "=== DEPENDENCIAS ===\n"
'   sInfo &= ObtenerInfoDependencias() & "\n"
'
'   Return sInfo
'
' End Function
'
' Private Function ObtenerInfoEntornoGrafico() As String
'
'   Dim sResult As String
'   Dim sTemp As String
'   Dim sDesktop As String = Env["XDG_CURRENT_DESKTOP"]
'   Dim sSession As String = Env["GDMSESSION"]
'   Dim sSessionType As String = Env["XDG_SESSION_TYPE"]
'
'   sResult = "Entorno actual: "
'   If sDesktop Then
'     sResult &= sDesktop
'   Else
'     sResult &= "No definido"
'   End If
'   sResult &= "\n"
'
'   sResult &= "Sesión: "
'   If sSession Then
'     sResult &= sSession
'   Else
'     sResult &= "No definido"
'   End If
'   sResult &= "\n"
'
'   sResult &= "Tipo de sesión: "
'   If sSessionType Then
'     sResult &= sSessionType
'   Else
'     sResult &= "No definido"
'   End If
'   sResult &= "\n"
'
'   ' Detectar protocolo gráfico
'   If Env["WAYLAND_DISPLAY"] Then
'     sResult &= "Protocolo: Wayland\n"
'   Else If Env["DISPLAY"] Then
'     sResult &= "Protocolo: X11\n"
'   Else
'     sResult &= "Protocolo: No detectado\n"
'   End If
'
'   ' Resolución de pantalla (solo primeras líneas relevantes)
'   Shell "xrandr --current 2>/dev/null" To sTemp
'   If Not Error Then
'     Dim lineas As String[] = Split(sTemp, "\n")
'     For Each linea As String In lineas
'       If InStr(linea, " connected ") > 0 Then
'         sResult &= "Monitor: " & linea & "\n"
'         Break
'       End If
'     Next
'   Else
'     sResult &= "Resolución: No disponible\n"
'   End If
'
'   Return sResult & "\n"
'
' End Function
'
' Private Function ObtenerInfoGTK() As String
'
'   Dim sResult As String
'   Dim sTemp As String
'
'   ' Verificar si pkg-config está disponible
'   If Not ComandoExiste("pkg-config") Then
'     Return "pkg-config no está instalado\n\n"
'   End If
'
'   ' GTK+3
'   Shell "pkg-config --modversion gtk+-3.0 2>/dev/null" To sTemp
'   If Not Error Then
'     sResult = "Versión GTK+3: " & Trim(sTemp) & "\n"
'   Else
'     sResult = "GTK+3: No instalado\n"
'   End If
'
'   ' GTK+2
'   Shell "pkg-config --modversion gtk+-2.0 2>/dev/null" To sTemp
'   If Not Error Then
'     sResult &= "Versión GTK+2: " & Trim(sTemp) & "\n"
'   Else
'     sResult &= "GTK+2: No instalado\n"
'   End If
'
'   ' Información de tema (solo si gsettings está disponible)
'   If ComandoExiste("gsettings") Then
'     Shell "gsettings get org.gnome.desktop.interface gtk-theme 2>/dev/null" To sTemp
'     If Not Error Then
'       sResult &= "Tema GTK: " & Trim(sTemp) & "\n"
'     End If
'
'     Shell "gsettings get org.gnome.desktop.interface icon-theme 2>/dev/null" To sTemp
'     If Not Error Then
'       sResult &= "Tema de iconos: " & Trim(sTemp) & "\n"
'     End If
'   End If
'
'   Return sResult & "\n"
'
' End Function
'
' Private Function ObtenerInfoQt() As String
'
'   Dim sResult As String
'   Dim sTemp As String
'
'   If Not ComandoExiste("qmake") Then
'     Return "Qt tools no están instalados\n\n"
'   End If
'
'   Shell "qmake -query QT_VERSION 2>/dev/null" To sTemp
'   If Not Error Then
'     sResult = "Versión Qt: " & Trim(sTemp) & "\n"
'   Else
'     sResult = "No se pudo obtener información de Qt\n"
'   End If
'
'   Shell "qmake -query QT_INSTALL_PREFIX 2>/dev/null" To sTemp
'   If Not Error Then
'     sResult &= "Ruta Qt: " & Trim(sTemp) & "\n"
'   End If
'
'   ' Información de KDE si está disponible
'   If ComandoExiste("kde-config") Then
'     Shell "kde-config --version 2>/dev/null" To sTemp
'     If Not Error Then
'       sResult &= "KDE: " & Split(sTemp, "\n")[0] & "\n"
'     Else
'       sResult &= "KDE: Instalado pero no se pudo obtener versión\n"
'     End If
'   Else If ComandoExiste("kf5-config") Then
'     Shell "kf5-config --version 2>/dev/null" To sTemp
'     If Not Error Then
'       sResult &= "KDE Frameworks: " & Split(sTemp, "\n")[0] & "\n"
'     Else
'       sResult &= "KDE Frameworks: Instalado pero no se pudo obtener versión\n"
'     End If
'   End If
'
'   Return sResult & "\n"
'
' End Function
'
' Private Function ObtenerInfoHardware() As String
'
'   Dim sResult As String
'   Dim sTemp As String
'
'   ' Información de CPU
'   Shell "grep -m1 'model name' /proc/cpuinfo 2>/dev/null" To sTemp
'   If Not Error Then
'     ' Limpiar el formato
'     sTemp = Replace(sTemp, "model name\t:", "")
'     sTemp = Replace(sTemp, "model name:", "")
'     sResult = "CPU: " & Trim(sTemp) & "\n"
'   Else
'     sResult = "CPU: No disponible\n"
'   End If
'
'   ' Información de memoria total
'   Shell "grep 'MemTotal' /proc/meminfo 2>/dev/null" To sTemp
'   If Not Error Then
'     sResult &= "Memoria total: " & Trim(Replace(sTemp, "MemTotal:", "")) & "\n"
'   End If
'
'   ' Información de memoria disponible
'   Shell "grep 'MemAvailable' /proc/meminfo 2>/dev/null" To sTemp
'   If Not Error Then
'     sResult &= "Memoria disponible: " & Trim(Replace(sTemp, "MemAvailable:", "")) & "\n"
'   End If
'
'   Return sResult & "\n"
'
' End Function
'
' Private Function ObtenerInfoDependencias() As String
'
'   Dim sResult As String
'   Dim sTemp As String
'
'   ' DBus
'   If Trim(sTemp) <> "" Then
'     sResult = "DBus: " & Trim(sTemp) & "\n"
'   Else
'     sResult = "DBus: Instalado pero no se pudo obtener versión\n"
'   End If
'
'   ' OpenGL
'   If ComandoExiste("glxinfo") Then
'     Shell "glxinfo -B 2>/dev/null" To sTemp
'     If Not Error Then
'       ' Extraer solo las líneas más importantes
'       Dim lineas As String[] = Split(sTemp, "\n")
'       For Each linea As String In lineas
'         If InStr(linea, "OpenGL version") > 0 Or InStr(linea, "OpenGL renderer") > 0 Then
'           sResult &= Trim(linea) & "\n"
'         End If
'       Next
'     Else
'       sResult &= "OpenGL: Error al obtener información\n"
'     End If
'   Else
'     sResult &= "OpenGL: glxinfo no disponible (instale mesa-utils)\n"
'   End If
'
'   ' Python
'   If ComandoExiste("python3") Then
'     Shell "python3 --version 2>/dev/null" To sTemp
'     If Not Error Then
'       sResult &= Trim(sTemp) & "\n"
'     End If
'   End If
'
'   ' Información de la distribución
'   If Exist("/etc/os-release") Then
'     Dim osRelease As String = File.Load("/etc/os-release")
'     If Not Error Then
'       ' Extraer solo NAME y VERSION
'       Dim lineas2 As String[] = Split(osRelease, "\n")
'       For Each linea As String In lineas2
'         If Left(linea, 5) = "NAME=" Or Left(linea, 8) = "VERSION=" Then
'           sResult &= linea & "\n"
'         End If
'       Next
'     End If
'   End If
'
'   Return sResult
'
' End Function
'
' ' Función auxiliar para verificar si un comando existe
' Private Function ComandoExiste(comando As String) As Boolean
'
'   Dim sTemp As String
'
'   Shell "which " & comando & " 2>/dev/null" To sTemp
'   Return Not Error And Trim(sTemp) <> ""
'
' End Function
'
' Public Sub TabPanel1_Click()
'
'   ' Suponiendo que la pestaña que muestra la info del equipo es la cuarta (índice 3)
'   If TabPanel1.Index = 3 Then
'     txtEquipo.Text = "Cargando información del sistema..."
'     txtEquipo.Refresh()
'
'     txtEquipo.Text = ObtenerInfoCompleta()
'     txtEquipo.Pos = 0
'   End If
'
' End
'
' Public Sub btnCopiarInfo_Click()
'
'   If Trim(txtEquipo.Text) = "" Then
'     Message.Warning("No hay información para copiar.")
'     Return
'   End If
'
'   Clipboard.Clear
'   Clipboard.Copy(txtEquipo.Text)
'
'   Message.Info("Información del sistema copiada al portapapeles.")
'
' End

Public Sub btnCancelar_Click()

  Me.Close

End
