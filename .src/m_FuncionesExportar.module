' Gambas module file

Public sRutaProyecto As String = File.Dir(FMain.txtProyecto.Text)            ' ruta del proyecto
' Public sArchivoProyecto As String = File.Name(FMain.txtProyecto.Text)        ' nombre del proyecto con extension
Public sBaseNombreProyecto As String = File.BaseName(FMain.txtProyecto.Text) ' nombre del proyecto sin extension
Public sSQL As String                                                        ' consultas varias a la bbdd
Public rConsulta As Result                                                   ' resultados de las consultas
' Public sComando As String

' Exportamos el archivo glosario
Public Sub ExportarGlosarioTeX()

  Dim s As String
  Dim outputFile As String
  Dim rContenido As Result

  ' Exportamos los registros de la revista actual
  sSQL = "SELECT * FROM siglas WHERE id_revista = " & FMain.idMetadatoRevista.Text
  rContenido = m_OnOff_y_Red.meConn.Exec(sSQL)

  s = "" ' Inicializa la cadena vacía

  While rContenido.Available

    If rContenido["cmbTipoDeEntradaGlosario"] = "sigla" Then
      s &= "\n\\newglossaryentry{" & rContenido["txtClaveGlosario"] & "}{" & "\n"
      s &= "  type=\\acronymtype,\n"
    Else If rContenido["cmbTipoDeEntradaGlosario"] = "glosario" Then
      s &= "\n\\newglossaryentry{" & rContenido["txtClaveGlosario"] & "}{" & "\n"
    End If

    ' Campos opcionales
    If Not IsNull(rContenido["txtNameGlosario"]) Then
      s &= "  name={" & rContenido["txtNameGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtDescripcionGlosario"]) Then
      s &= "  description={" & rContenido["txtDescripcionGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtFirstGlosario"]) Then
      s &= "  first={" & rContenido["txtFirstGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtTextGlosario"]) Then
      s &= "  text={" & rContenido["txtTextGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtFirstPluraIGlosario"]) Then
      s &= "  firstplural={" & rContenido["txtFirstPluraIGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtPluralGlosario"]) Then
      s &= "  plural={" & rContenido["txtPluralGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtSortGlosario"]) Then
      s &= "  sort={" & rContenido["txtSortGlosario"] & "},\n"
    End If

    ' Cierra la entrada
    s &= "}\n"

    rContenido.MoveNext
  Wend

  ' Limpieza: eliminar ",}" sobrantes
  s = Replace(s, ",}", "}")

  ' Guarda el contenido acumulado en un solo archivo
  outputFile = sRutaProyecto & "/files/siglas.tex"
  File.Save(outputFile, s)

End

' exportamos el archivo metadatos para PDF libro
Public Sub ExportarMetadatosPDFlibro()

  Dim s As String
  Dim outputFile As String
  Dim rContenido As Result

  ' Exportamos los registros seleccionados
  sSQL = "SELECT * FROM revistas WHERE id = " & FMain.idMetadatoRevista.Text
  rContenido = m_OnOff_y_Red.meConn.Exec(sSQL)

  s = "" ' Inicializa la cadena vacía

  ' Si hay resultados, los procesamos, sino igual generamos el bloque fijo
  If rContenido.Available Then
    s &= "\\hypersetup{\n"

    If Not IsNull(rContenido["txtLibroAutoria"]) And Len(Trim(rContenido["txtLibroAutoria"])) > 0 Then
      s &= "  pdfauthor={" & rContenido["txtLibroAutoria"] & "},\n"
    End If
    If Not IsNull(rContenido["txtRevistaTitulo"]) And Len(Trim(rContenido["txtRevistaTitulo"])) > 0 Then
      s &= "  pdftitle={" & rContenido["txtRevistaTitulo"] & "},\n"
    End If
    If Not IsNull(rContenido["txtLibroSubtitulo"]) And Len(Trim(rContenido["txtLibroSubtitulo"])) > 0 Then
      s &= "  pdfsubtitle={" & rContenido["txtLibroSubtitulo"] & "},\n"
    End If
    If Not IsNull(rContenido["txtRevistaISSN"]) And Len(Trim(rContenido["txtRevistaISSN"])) > 0 Then
      s &= "  pdfisbn={" & rContenido["txtRevistaISSN"] & "},\n"
    End If
    If Not IsNull(rContenido["txtLibroPalabrasClaveEs"]) And Len(Trim(rContenido["txtLibroPalabrasClaveEs"])) > 0 Then
      s &= "  pdfkeywords={" & rContenido["txtLibroPalabrasClaveEs"] & "},\n"
    End If
    If Not IsNull(rContenido["txtLibroResumenEs"]) And Len(Trim(rContenido["txtLibroResumenEs"])) > 0 Then
      s &= "  pdfsubject={" & rContenido["txtLibroResumenEs"] & "},\n"
    End If
    If Not IsNull(rContenido["txtRevistaURL"]) And Len(Trim(rContenido["txtRevistaURL"])) > 0 Then
      s &= "  pdfurl={" & rContenido["txtRevistaURL"] & "},\n"
    End If
    If Not IsNull(rContenido["txtFechaPublicacion"]) And Len(Trim(rContenido["txtFechaPublicacion"])) > 0 Then
      Dim fecha As String = Trim(rContenido["txtFechaPublicacion"])
      Dim partes As String[] = Split(fecha, "-")
      Dim fechaPDF As String
      If partes.Count = 3 Then
        ' yyyy-mm-dd → yyyymmdd000000
        fechaPDF = partes[0] & partes[1] & partes[2] & "000000"
      Else
        ' Si no viene bien, metemos la original sin guiones
        fechaPDF = Replace(fecha, "-", "") & "000000"
      End If
      s &= "  pdfdate={" & fechaPDF & "},\n"
      s &= "  pdfcreationdate={" & fechaPDF & "},\n"
      s &= "  pdfmetadate={" & fechaPDF & "},\n"
    End If
    If Not IsNull(rContenido["txtRevistaIdioma"]) And Len(Trim(rContenido["txtRevistaIdioma"])) > 0 Then
      s &= "  pdflang={" & rContenido["txtRevistaIdioma"] & "},\n"
    End If
    If Not IsNull(rContenido["txtLicencia"]) And Len(Trim(rContenido["txtLicencia"])) > 0 Then
      s &= "  pdfcopyrightstatus={" & rContenido["txtLicencia"] & "},\n"
      s &= "  pdfcopyrightstatustype={Text},\n"
    End If

    ' Campos fijos que siempre se exportan
    s &= "  pdfpubtype={book},\n"
    s &= "  pdfrendition={default},\n"
    s &= "  pdfcreator={gbpublisher v. " & Application.Version & "},\n"
    s &= "  pdfproducer={Ecosistema de LaTeX},\n"
    s &= "  unicode=true,\n"
    s &= "  bookmarks=true,\n"
    s &= "  pdfdisplaydoctitle=true,\n"
    s &= "  pdfnewwindow=true\n"
    s &= "}\n"

  Else
    ' Si no hay filas, igual generamos algo por defecto
    s &= "\\hypersetup{\n"
    s &= "  pdfauthor={Documento sin autor},\n"
    s &= "  pdfpubtype={book},\n"
    s &= "  pdfrendition={default},\n"
    s &= "  unicode=true,\n"
    s &= "  bookmarks=true,\n"
    s &= "  pdfdisplaydoctitle=false,\n"
    s &= "  pdfnewwindow=true,\n"
    s &= "  pdfcreator={gbpublisher v. " & Application.Version & "},\n"
    s &= "  pdfproducer={Ecosistema de LaTeX}\n"
    s &= "}\n"
  End If

  ' Establece la ruta y el nombre del archivo de salida
  outputFile = sRutaProyecto &/ "files/metadatos.tex"

  ' Guarda el contenido acumulado en un solo archivo
  File.Save(outputFile, s)

End

' exportamos el archivo glosario en JSON
Public Sub ExportarGlosarioJSON()

  Dim s As String
  Dim outputFile As String
  Dim rContenido As Result
  Dim coma As String

  sSQL = "SELECT * FROM siglas WHERE id_revista = " & FMain.idMetadatoRevista.Text
  rContenido = m_OnOff_y_Red.meConn.Exec(sSQL)

  s = "{\n  \"entries\": [\n"
  coma = ""

  While rContenido.Available
    s &= coma & "    {\n"

    s &= "      \"key\": \"" & rContenido["txtClaveGlosario"] & "\",\n"
    s &= "      \"type\": \"" & rContenido["cmbTipoDeEntradaGlosario"] & "\",\n"

    If Not IsNull(rContenido["txtNameGlosario"]) Then
      s &= "      \"name\": \"" & rContenido["txtNameGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtDescripcionGlosario"]) Then
      s &= "      \"description\": \"" & rContenido["txtDescripcionGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtFirstGlosario"]) Then
      s &= "      \"first\": \"" & rContenido["txtFirstGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtTextGlosario"]) Then
      s &= "      \"text\": \"" & rContenido["txtTextGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtFirstPluraIGlosario"]) Then
      s &= "      \"firstplural\": \"" & rContenido["txtFirstPluraIGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtPluralGlosario"]) Then
      s &= "      \"plural\": \"" & rContenido["txtPluralGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtSortGlosario"]) Then
      s &= "      \"sort\": \"" & rContenido["txtSortGlosario"] & "\",\n"
    End If

    ' Cerrar objeto eliminando coma final si la hay
    If Right(s, 2) = ",\n" Then
      s = Left(s, Len(s) - 2) & "\n"
    End If

    s &= "    }"
    rContenido.MoveNext
    If rContenido.Available Then coma = ",\n" Else coma = "\n"
  Wend

  s &= "  ]\n}\n"

  outputFile = sRutaProyecto &/ "files/siglas.json"
  File.Save(outputFile, s)

End

Public Sub ExportarBibTeX()

  Dim s As String
  Dim f As ResultField
  Dim aFields As New String[]
  Dim i As Integer
  Dim w As Integer
  Dim tab As String

  Dim sResultado As Result
  Dim filtrarBib As String

  'me aseguro de que la búsqueda se encuentre entre comas
  filtrarBib = "select * from bibtex where id_revista = " & FMain.idMetadatoRevista.Text
  sResultado = m_OnOff_y_Red.meConn.Exec(filtrarBib)

  aFields.Clear
  For Each f In sResultado.Fields
    aFields.Add(f.Name)
    If Len(f.Name) > w Then
      w = Len(f.Name)
    Endif
  Next

  s = "" ' Inicializa la cadena vacía

  While sResultado.Available
    s &= "\n@" & sResultado["cmbTipoDeEntrada"] & "{" & sResultado[aFields[4]] & ",\n"
    For i = 5 To aFields.Max
      If Not IsNull(sResultado[aFields[i]]) And Len(sResultado[aFields[i]]) > 0 Then
        tab = String(w - Len(aFields[i]), " ")
        s &= "  " & aFields[i] & tab & " = {" & sResultado[aFields[i]] & "},\n"
      Endif
    Next

    s &= "}\n"
    sResultado.MoveNext
  Wend

  ' Reemplazos ordenados por longitud descendente de las claves (completo)
  s = Replace(s, "txtBookTitleAddOn", "booktitleaddon")
  s = Replace(s, "txtJournalTitleAddOn", "journaltitleaddon")
  s = Replace(s, "txtMainTitleAddOn", "maintitleaddon")
  s = Replace(s, "txtIssueTitleAddOn", "issuetitleaddon")
  s = Replace(s, "txtEventTitleAddOn", "eventtitleaddon")
  s = Replace(s, "txtBookPagination", "bookpagination")
  s = Replace(s, "txtIndexSortTitle", "indexsorttitle")
  s = Replace(s, "txtShortHandIntro", "shorthandintro")
  s = Replace(s, "cmbEditorTypeC", "editortypec")
  s = Replace(s, "cmbEditorTypeB", "editortypeb")
  s = Replace(s, "cmbEditorTypeA", "editortypea")
  s = Replace(s, "cmbEditorType", "editortype")
  s = Replace(s, "cmbTipoDeTesis", "type")
  s = Replace(s, "cmbOrigLanguage", "origlanguage")
  s = Replace(s, "cmbHyphenation", "hyphenation")
  s = Replace(s, "txtBookAuthor", "bookauthor")
  s = Replace(s, "txtShortAuthor", "shortauthor")
  s = Replace(s, "txtOrigPublisher", "origpublisher")
  s = Replace(s, "txtJournalTitle", "journaltitle")
  s = Replace(s, "txtMainTitle", "maintitle")
  s = Replace(s, "txtBookTitle", "booktitle")
  s = Replace(s, "txtOrigLocation", "origlocation")
  s = Replace(s, "txtIndexTitle", "indextitle")
  s = Replace(s, "txtSubTitle", "subtitle")
  s = Replace(s, "txtTitleAddOn", "titleaddon")
  s = Replace(s, "txtEventTitle", "eventtitle")
  s = Replace(s, "txtIssueTitle", "issuetitle")
  s = Replace(s, "txtShortTitle", "shorttitle")
  s = Replace(s, "txtReprintTitle", "reprinttitle")
  s = Replace(s, "txtPageTotal", "pagetotal")
  s = Replace(s, "txtEntrySubType", "entrysubtype")
  s = Replace(s, "txtForeword", "foreword")
  s = Replace(s, "txtAfterword", "afterword")
  s = Replace(s, "txtPublisher", "publisher")
  s = Replace(s, "txtInstitution", "institution")
  s = Replace(s, "txtTranslator", "translator")
  s = Replace(s, "txtCommentator", "commentator")
  s = Replace(s, "txtIntroduction", "introduction")
  s = Replace(s, "txtAnnotator", "annotator")
  s = Replace(s, "txtAnnotation", "annotation")
  s = Replace(s, "txtHowPublished", "howpublished")
  s = Replace(s, "txtOrganization", "organization")
  s = Replace(s, "txtLandIdOpts", "landidopts")
  s = Replace(s, "txtEntrySet", "entryset")
  s = Replace(s, "txtRelatedString", "relatedstring")
  s = Replace(s, "txtSortTitle", "sorttitle")
  s = Replace(s, "txtSortName", "sortname")
  s = Replace(s, "txtSortYear", "sortyear")
  s = Replace(s, "txtSortHand", "sorthand")
  s = Replace(s, "txtCrossRef", "crossref")
  s = Replace(s, "txtAddendum", "addendum")
  s = Replace(s, "txtXdata", "xdata")
  s = Replace(s, "txtRelated", "related")
  s = Replace(s, "cmbBookPagination", "bookpagination")
  s = Replace(s, "txtNameAddOn", "nameaddon")
  s = Replace(s, "txtVolumes", "volumes")
  s = Replace(s, "txtChapter", "chapter")
  s = Replace(s, "txtLocation", "location")
  s = Replace(s, "txtLanguage", "language")
  s = Replace(s, "cmbLanguage", "language")
  s = Replace(s, "txtEprint", "eprint")
  s = Replace(s, "txtVolume", "volume")
  s = Replace(s, "txtEdition", "edition")
  s = Replace(s, "txtCommentator", "commentator")
  s = Replace(s, "txtTranslator", "translator")
  s = Replace(s, "txtAnnotator", "annotator")
  s = Replace(s, "txtLabel", "label")
  s = Replace(s, "txtPages", "pages")
  s = Replace(s, "txtNumber", "number")
  s = Replace(s, "txtGender", "gender")
  s = Replace(s, "txtHolder", "holder")
  s = Replace(s, "txtAuthor", "author")
  s = Replace(s, "txtEditorC", "editorc")
  s = Replace(s, "txtEditorB", "editorb")
  s = Replace(s, "txtEditorA", "editora")
  s = Replace(s, "txtEditor", "editor")
  s = Replace(s, "txtTitle", "title")
  s = Replace(s, "txtPart", "part")
  s = Replace(s, "txtIssue", "issue")
  s = Replace(s, "txtEventDate", "eventdate")
  s = Replace(s, "txtOrigDate", "origdate")
  s = Replace(s, "txtUrlDate", "urldate")
  s = Replace(s, "txtDate", "date")
  s = Replace(s, "txtYear", "year")
  s = Replace(s, "txtVersion", "version")
  s = Replace(s, "cmbLangId", "langid")
  s = Replace(s, "txtVenue", "venue")
  s = Replace(s, "txtHowPublished", "howpublished")
  s = Replace(s, "txtEid", "eid")
  s = Replace(s, "txtDoi", "doi")
  s = Replace(s, "txtUrl", "url")
  s = Replace(s, "txtIssn", "issn")
  s = Replace(s, "txtIsbn", "isbn")
  s = Replace(s, "txtIsmn", "ismn")
  s = Replace(s, "txtIsrn", "isrn")
  s = Replace(s, "txtIsan", "isan")
  s = Replace(s, "txtIswc", "iswc")
  s = Replace(s, "cmbPubState", "pubstate")
  s = Replace(s, "cmbPagination", "pagination")
  s = Replace(s, "txtAbstract", "abstract")
  s = Replace(s, "txtNote", "note")
  s = Replace(s, "txtLibrary", "library")
  s = Replace(s, "txtFile", "file")
  s = Replace(s, "txtIds", "ids")
  s = Replace(s, "cmbEprintType", "eprinttype")
  s = Replace(s, "cmbRelatedType", "relatedtype")
  s = Replace(s, "txtPreSort", "presort")
  s = Replace(s, "txtSeries", "series")
  s = Replace(s, "txtSortKey", "sortkey")
  s = Replace(s, "txtXref", "xref")
  s = Replace(s, "txtShortHand", "shorthand")
  s = Replace(s, "txtOptions", "options")

  Dim fecha As String

  fecha = Format(Now, "dd/mm/yyyy [hh:nn:ss]")

  s &= "\n\n@Comment{generado con gbpublisher; databaseType:biblatex; fecha de creación: " & fecha & "}"

  Dim outputFile As String
  outputFile = sRutaProyecto & "/files/" & sBaseNombreProyecto & ".bib"
  File.Save(outputFile, s)

End

Public Function ExportarRIS() As Boolean

  Dim s As String
  Dim f As ResultField
  Dim aFields As New String[]
  Dim i As Integer

  Dim sResultado As Result
  Dim filtrarBib As String
  Dim tipoRIS As String

  'me aseguro de que la búsqueda se encuentre entre comas
  filtrarBib = "select * from bibtex where id_revista = " & FMain.idMetadatoRevista.Text
  sResultado = m_OnOff_y_Red.meConn.Exec(filtrarBib)

  aFields.Clear
  For Each f In sResultado.Fields
    aFields.Add(f.Name)
  Next

  s = "" ' Inicializa la cadena vacía

  While sResultado.Available
    ' Mapear tipo de entrada BibTeX a tipo RIS
    tipoRIS = MapearTipoRIS(sResultado["cmbTipoDeEntrada"])
    s &= "TY  - " & tipoRIS & "\n"

    ' Procesar cada campo
    For i = 5 To aFields.Max
      If Not IsNull(sResultado[aFields[i]]) And Len(sResultado[aFields[i]]) > 0 Then
        Dim etiquetaRIS As String
        etiquetaRIS = MapearCampoRIS(aFields[i])
        If Len(etiquetaRIS) > 0 Then
          s &= etiquetaRIS & "  - " & sResultado[aFields[i]] & "\n"
        Endif
      Endif
    Next

    s &= "ER  - \n\n"
    sResultado.MoveNext
  Wend

  Dim fecha As String
  fecha = Format(Now, "dd/mm/yyyy [hh:nn:ss]")

  s &= "% Generado con gbpublisher; databaseType:RIS; fecha de creación: " & fecha & "\n"

  Dim outputFile As String
  outputFile = sRutaProyecto & "/files/" & sBaseNombreProyecto & ".ris"
  File.Save(outputFile, s)

  Return True

End

' Función auxiliar para mapear tipos de entrada BibTeX a tipos RIS
Private Function MapearTipoRIS(tipoBibTeX As String) As String

  Select Case LCase(tipoBibTeX)
    Case "article"
      Return "JOUR"
    Case "book"
      Return "BOOK"
    Case "booklet"
      Return "BOOK"
    Case "conference", "inproceedings"
      Return "CONF"
    Case "inbook"
      Return "CHAP"
    Case "incollection"
      Return "CHAP"
    Case "manual"
      Return "BOOK"
    Case "mastersthesis"
      Return "THES"
    Case "misc"
      Return "GEN"
    Case "phdthesis"
      Return "THES"
    Case "proceedings"
      Return "CONF"
    Case "techreport"
      Return "RPRT"
    Case "unpublished"
      Return "UNPB"
    Case "patent"
      Return "PAT"
    Case "online", "electronic"
      Return "ELEC"
    Case "artwork"
      Return "ART"
    Case "audio"
      Return "SOUND"
    Case "video"
      Return "VIDEO"
    Case "legislation"
      Return "BILL"
    Case "jurisdiction"
      Return "CASE"
    Case "standard"
      Return "STAND"
    Case "dataset"
      Return "DATA"
    Case "software"
      Return "COMP"
    Case Else
      Return "GEN"
  End Select

End

' Función auxiliar para mapear campos BibTeX a etiquetas RIS
Private Function MapearCampoRIS(campoBibTeX As String) As String

  Select Case LCase(campoBibTeX)
      ' Campos principales
    Case "txtauthor", "author"
      Return "AU"
    Case "txteditor", "editor"
      Return "ED"
    Case "txteditora", "editora"
      Return "ED"
    Case "txteditorb", "editorb"
      Return "ED"
    Case "txteditorc", "editorc"
      Return "ED"
    Case "txttitle", "title"
      Return "TI"
    Case "txtsubtitle", "subtitle"
      Return "TI"
    Case "txtjournaltitle", "journaltitle", "journal"
      Return "JO"
    Case "txtbooktitle", "booktitle"
      Return "BT"
    Case "txtmaintitle", "maintitle"
      Return "T2"
    Case "txtseries", "series"
      Return "T3"
    Case "txtpublisher", "publisher"
      Return "PB"
    Case "txtlocation", "location", "address"
      Return "CY"
    Case "txtdate", "date", "year"
      Return "PY"
    Case "txtvolume", "volume"
      Return "VL"
    Case "txtissue", "issue", "number"
      Return "IS"
    Case "txtpages", "pages"
      Return "SP"
    Case "txtdoi", "doi"
      Return "DO"
    Case "txturl", "url"
      Return "UR"
    Case "txturldate", "urldate"
      Return "Y2"
    Case "txtabstract", "abstract"
      Return "AB"
    Case "txtnote", "note"
      Return "N1"
    Case "txtannotation", "annotation"
      Return "N1"
    Case "txtisbn", "isbn"
      Return "SN"
    Case "txtissn", "issn"
      Return "SN"
    Case "txtlanguage", "language", "cmblanguage"
      Return "LA"
    Case "txtinstitution", "institution"
      Return "PB"
    Case "txtorganization", "organization"
      Return "PB"
    Case "txtschool", "school"
      Return "PB"
    Case "txtchapter", "chapter"
      Return "SP"
    Case "txtedition", "edition"
      Return "ET"
    Case "txtvolumes", "volumes"
      Return "NV"
    Case "txthowpublished", "howpublished"
      Return "PB"
    Case "txttype", "cmbtipodeentrada", "cmbtipodtesis"
      Return "M3"
    Case "txtfile", "file"
      Return "L1"
    Case "txtlibrary", "library"
      Return "DB"
    Case "txteprint", "eprint"
      Return "UR"
    Case "txteid", "eid"
      Return "M1"
    Case "txtversion", "version"
      Return "ET"
    Case "txtvenue", "venue"
      Return "C1"
    Case "txteventdate", "eventdate"
      Return "Y1"
    Case "txteventtitle", "eventtitle"
      Return "T2"
    Case "txtpart", "part"
      Return "IS"
    Case "txtlabel", "label"
      Return "LB"
    Case "txtgender", "gender"
      Return "M1"
    Case "txtholder", "holder"
      Return "A2"
    Case "txtforeword", "foreword"
      Return "A2"
    Case "txtafterword", "afterword"
      Return "A2"
    Case "txttranslator", "translator"
      Return "A2"
    Case "txtcommentator", "commentator"
      Return "A2"
    Case "txtintroduction", "introduction"
      Return "A2"
    Case "txtannotator", "annotator"
      Return "A2"
    Case "txtaddendum", "addendum"
      Return "N1"
    Case "txtshorthand", "shorthand"
      Return "J2"
    Case "txtshorttitle", "shorttitle"
      Return "J1"
    Case "txtshortauthor", "shortauthor"
      Return "A1"
    Case "txtindextitle", "indextitle"
      Return "T1"
    Case "txtoriglocation", "origlocation"
      Return "AD"
    Case "txtorigpublisher", "origpublisher"
      Return "A4"
    Case "txtorigdate", "origdate"
      Return "Y2"
    Case "cmblangid", "langid"
      Return "LA"
    Case "cmborignlanguage", "origlanguage"
      Return "LA"
    Case "cmbeprint", "eprinttype"
      Return "M3"
    Case "cmbpubstate", "pubstate"
      Return "M3"
    Case "cmbpagination", "pagination"
      Return "M3"
    Case Else
      Return "" ' Campo no mapeado
  End Select

End

Public Function ExportToIndexHTML(rutaTexto As String) As Boolean

  Dim plantilla As String
  Dim titulo As String
  Dim subtitulo As String
  Dim imagen As String
  Dim isbn As String
  Dim autoria As String
  Dim licencia As String
  Dim resumen As String
  Dim footnote As String
  Dim cabecera As String
  Dim outputFile As String

  ' Cargar la plantilla
  plantilla = File.Load(sRutaProyecto &/ "files/plantilla-ghp.html")
  If Error Then
    Message.Error("Error al cargar la plantilla: " & Error.Text)
    Return False
  Endif

  ' Obtener los datos del libro actual
  sSQL = "SELECT * FROM revistas WHERE id = " & FMain.idMetadatoRevista.Text
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL)
  If Error Then
    Message.Error("Error en la consulta: " & Error.Text)
    Return False
  Endif

  If rConsulta.Available Then
    cabecera = rConsulta["txtLogoCabecera"]
    titulo = rConsulta["txtRevistaTitulo"]
    subtitulo = rConsulta["txtLibroSubtitulo"]
    imagen = rConsulta["txtImagenTapita"]
    isbn = rConsulta["txtRevistaISSN"]
    autoria = rConsulta["txtLibroAutoria"]
    licencia = rConsulta["txtLicencia"]
    resumen = rConsulta["txtLibroResumenEs"]
    footnote = rConsulta["txtGhpFooter"]

    ' Reemplazar placeholders
    plantilla = Replace(plantilla, "{{IMAGEN_CABECERA}}", cabecera)
    plantilla = Replace(plantilla, "{{TITULO}}", titulo)
    plantilla = Replace(plantilla, "{{IMAGEN_TAPA}}", imagen)
    plantilla = Replace(plantilla, "{{ISBN}}", isbn)
    plantilla = Replace(plantilla, "{{AUTOR}}", autoria)
    plantilla = Replace(plantilla, "{{SUBTITULO}}", subtitulo)
    plantilla = Replace(plantilla, "{{LICENCIA}}", licencia)
    plantilla = Replace(plantilla, "{{RESUMEN}}", resumen)
    plantilla = Replace(plantilla, "{{FOOTER}}", footnote)

    ' Guardar resultado en docs/index.html
    outputFile = File.Dir(rutaTexto) & "/docs/index.html"
    File.Save(outputFile, plantilla)
    If Error Then
      Return False
    Endif
    Message.Info("El archivo <strong>index.html</strong> se generó correctamente en " & outputFile)
    Return True
  Else
    Message.Error("No se encontraron datos para este libro.")
    Return False
  End If

End
