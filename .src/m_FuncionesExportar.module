' Gambas module file

Private sRutaProyecto As String = File.Dir(FMain.txtProyecto.Text)            ' ruta del proyecto
Private sArchivoProyecto As String = File.Name(FMain.txtProyecto.Text)        ' nombre del proyecto con extension
Private sBaseNombreProyecto As String = File.BaseName(FMain.txtProyecto.Text) ' nombre del proyecto sin extension
Private sSQL As String                                                        ' consultas varias a la bbdd
Private rConsulta As Result                                                   ' resultados de las consultas
Private sComando As String

Public Sub ExportarBibTeX()

  Dim s As String
  Dim f As ResultField
  Dim aFields As New String[]
  Dim i As Integer
  Dim w As Integer
  Dim tab As String

  Dim sResultado As Result
  Dim filtrarBib As String

  'me aseguro de que la búsqueda se encuentre entre comas
  filtrarBib = "select * from bibtex where id_revista = " & FMain.idMetadatoRevista.Text
  sResultado = m_OnOff_y_Red.meConn.Exec(filtrarBib)

  aFields.Clear
  For Each f In sResultado.Fields
    aFields.Add(f.Name)
    If Len(f.Name) > w Then
      w = Len(f.Name)
    Endif
  Next

  s = "" ' Inicializa la cadena vacía

  While sResultado.Available
    s &= "\n@" & sResultado["cmbTipoDeEntrada"] & "{" & sResultado[aFields[4]] & ",\n"
    For i = 5 To aFields.Max
      If Not IsNull(sResultado[aFields[i]]) And Len(sResultado[aFields[i]]) > 0 Then
        tab = String(w - Len(aFields[i]), " ")
        s &= "  " & aFields[i] & tab & " = {" & sResultado[aFields[i]] & "},\n"
      Endif
    Next

    s &= "}\n"
    sResultado.MoveNext
  Wend

  ' Reemplazos ordenados por longitud descendente de las claves (completo)
  s = Replace(s, "txtBookTitleAddOn", "booktitleaddon")
  s = Replace(s, "txtJournalTitleAddOn", "journaltitleaddon")
  s = Replace(s, "txtMainTitleAddOn", "maintitleaddon")
  s = Replace(s, "txtIssueTitleAddOn", "issuetitleaddon")
  s = Replace(s, "txtEventTitleAddOn", "eventtitleaddon")
  s = Replace(s, "txtBookPagination", "bookpagination")
  s = Replace(s, "txtIndexSortTitle", "indexsorttitle")
  s = Replace(s, "txtShortHandIntro", "shorthandintro")
  s = Replace(s, "cmbEditorTypeC", "editortypec")
  s = Replace(s, "cmbEditorTypeB", "editortypeb")
  s = Replace(s, "cmbEditorTypeA", "editortypea")
  s = Replace(s, "cmbEditorType", "editortype")
  s = Replace(s, "cmbTipoDeTesis", "type")
  s = Replace(s, "cmbOrigLanguage", "origlanguage")
  s = Replace(s, "cmbHyphenation", "hyphenation")
  s = Replace(s, "txtBookAuthor", "bookauthor")
  s = Replace(s, "txtShortAuthor", "shortauthor")
  s = Replace(s, "txtOrigPublisher", "origpublisher")
  s = Replace(s, "txtJournalTitle", "journaltitle")
  s = Replace(s, "txtMainTitle", "maintitle")
  s = Replace(s, "txtBookTitle", "booktitle")
  s = Replace(s, "txtOrigLocation", "origlocation")
  s = Replace(s, "txtIndexTitle", "indextitle")
  s = Replace(s, "txtSubTitle", "subtitle")
  s = Replace(s, "txtTitleAddOn", "titleaddon")
  s = Replace(s, "txtEventTitle", "eventtitle")
  s = Replace(s, "txtIssueTitle", "issuetitle")
  s = Replace(s, "txtShortTitle", "shorttitle")
  s = Replace(s, "txtReprintTitle", "reprinttitle")
  s = Replace(s, "txtPageTotal", "pagetotal")
  s = Replace(s, "txtEntrySubType", "entrysubtype")
  s = Replace(s, "txtForeword", "foreword")
  s = Replace(s, "txtAfterword", "afterword")
  s = Replace(s, "txtPublisher", "publisher")
  s = Replace(s, "txtInstitution", "institution")
  s = Replace(s, "txtTranslator", "translator")
  s = Replace(s, "txtCommentator", "commentator")
  s = Replace(s, "txtIntroduction", "introduction")
  s = Replace(s, "txtAnnotator", "annotator")
  s = Replace(s, "txtAnnotation", "annotation")
  s = Replace(s, "txtHowPublished", "howpublished")
  s = Replace(s, "txtOrganization", "organization")
  s = Replace(s, "txtLandIdOpts", "landidopts")
  s = Replace(s, "txtEntrySet", "entryset")
  s = Replace(s, "txtRelatedString", "relatedstring")
  s = Replace(s, "txtSortTitle", "sorttitle")
  s = Replace(s, "txtSortName", "sortname")
  s = Replace(s, "txtSortYear", "sortyear")
  s = Replace(s, "txtSortHand", "sorthand")
  s = Replace(s, "txtCrossRef", "crossref")
  s = Replace(s, "txtAddendum", "addendum")
  s = Replace(s, "txtXdata", "xdata")
  s = Replace(s, "txtRelated", "related")
  s = Replace(s, "cmbBookPagination", "bookpagination")
  s = Replace(s, "txtNameAddOn", "nameaddon")
  s = Replace(s, "txtVolumes", "volumes")
  s = Replace(s, "txtChapter", "chapter")
  s = Replace(s, "txtLocation", "location")
  s = Replace(s, "txtLanguage", "language")
  s = Replace(s, "cmbLanguage", "language")
  s = Replace(s, "txtEprint", "eprint")
  s = Replace(s, "txtVolume", "volume")
  s = Replace(s, "txtEdition", "edition")
  s = Replace(s, "txtCommentator", "commentator")
  s = Replace(s, "txtTranslator", "translator")
  s = Replace(s, "txtAnnotator", "annotator")
  s = Replace(s, "txtLabel", "label")
  s = Replace(s, "txtPages", "pages")
  s = Replace(s, "txtNumber", "number")
  s = Replace(s, "txtGender", "gender")
  s = Replace(s, "txtHolder", "holder")
  s = Replace(s, "txtAuthor", "author")
  s = Replace(s, "txtEditorC", "editorc")
  s = Replace(s, "txtEditorB", "editorb")
  s = Replace(s, "txtEditorA", "editora")
  s = Replace(s, "txtEditor", "editor")
  s = Replace(s, "txtTitle", "title")
  s = Replace(s, "txtPart", "part")
  s = Replace(s, "txtIssue", "issue")
  s = Replace(s, "txtEventDate", "eventdate")
  s = Replace(s, "txtOrigDate", "origdate")
  s = Replace(s, "txtUrlDate", "urldate")
  s = Replace(s, "txtDate", "date")
  s = Replace(s, "txtYear", "year")
  s = Replace(s, "txtVersion", "version")
  s = Replace(s, "cmbLangId", "langid")
  s = Replace(s, "txtVenue", "venue")
  s = Replace(s, "txtHowPublished", "howpublished")
  s = Replace(s, "txtEid", "eid")
  s = Replace(s, "txtDoi", "doi")
  s = Replace(s, "txtUrl", "url")
  s = Replace(s, "txtIssn", "issn")
  s = Replace(s, "txtIsbn", "isbn")
  s = Replace(s, "txtIsmn", "ismn")
  s = Replace(s, "txtIsrn", "isrn")
  s = Replace(s, "txtIsan", "isan")
  s = Replace(s, "txtIswc", "iswc")
  s = Replace(s, "cmbPubState", "pubstate")
  s = Replace(s, "cmbPagination", "pagination")
  s = Replace(s, "txtAbstract", "abstract")
  s = Replace(s, "txtNote", "note")
  s = Replace(s, "txtLibrary", "library")
  s = Replace(s, "txtFile", "file")
  s = Replace(s, "txtIds", "ids")
  s = Replace(s, "cmbEprintType", "eprinttype")
  s = Replace(s, "cmbRelatedType", "relatedtype")
  s = Replace(s, "txtPreSort", "presort")
  s = Replace(s, "txtSeries", "series")
  s = Replace(s, "txtSortKey", "sortkey")
  s = Replace(s, "txtXref", "xref")
  s = Replace(s, "txtShortHand", "shorthand")
  s = Replace(s, "txtOptions", "options")

  Dim fecha As String

  fecha = Format(Now, "dd/mm/yyyy [hh:nn:ss]")

  s &= "\n\n@Comment{generado con gbpublisher; databaseType:biblatex; fecha de creación: " & fecha & "}"

  Dim outputFile As String
  outputFile = sRutaProyecto & "/files/" & sBaseNombreProyecto & ".bib"
  File.Save(outputFile, s)

End

' Exportamos el archivo glosario
Public Sub ExportarGlosarioTeX()

  Dim s As String
  Dim outputFile As String
  Dim rContenido As Result

  ' Exportamos los registros de la revista actual
  sSQL = "SELECT * FROM siglas WHERE id_revista = " & FMain.idMetadatoRevista.Text
  rContenido = m_OnOff_y_Red.meConn.Exec(sSQL)

  s = "" ' Inicializa la cadena vacía

  While rContenido.Available

    If rContenido["cmbTipoDeEntradaGlosario"] = "sigla" Then
      s &= "\n\\newglossaryentry{" & rContenido["txtClaveGlosario"] & "}{" & "\n"
      s &= "  type=\\acronymtype,\n"
    Else If rContenido["cmbTipoDeEntradaGlosario"] = "glosario" Then
      s &= "\n\\newglossaryentry{" & rContenido["txtClaveGlosario"] & "}{" & "\n"
    End If

    ' Campos opcionales
    If Not IsNull(rContenido["txtNameGlosario"]) Then
      s &= "  name={" & rContenido["txtNameGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtDescripcionGlosario"]) Then
      s &= "  description={" & rContenido["txtDescripcionGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtFirstGlosario"]) Then
      s &= "  first={" & rContenido["txtFirstGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtTextGlosario"]) Then
      s &= "  text={" & rContenido["txtTextGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtFirstPluraIGlosario"]) Then
      s &= "  firstplural={" & rContenido["txtFirstPluraIGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtPluralGlosario"]) Then
      s &= "  plural={" & rContenido["txtPluralGlosario"] & "},\n"
    End If
    If Not IsNull(rContenido["txtSortGlosario"]) Then
      s &= "  sort={" & rContenido["txtSortGlosario"] & "},\n"
    End If

    ' Cierra la entrada
    s &= "}\n"

    rContenido.MoveNext
  Wend

  ' Limpieza: eliminar ",}" sobrantes
  s = Replace(s, ",}", "}")

  ' Guarda el contenido acumulado en un solo archivo
  outputFile = sRutaProyecto & "/files/siglas.tex"
  File.Save(outputFile, s)

End

' exportamos el archivo metadatos para PDF libro
Public Sub ExportarMetadatosPDFlibro()

  Dim s As String
  Dim outputFile As String
  Dim rContenido As Result

  ' Exportamos los registros seleccionados
  sSQL = "SELECT * FROM revistas WHERE id = " & FMain.idMetadatoRevista.Text
  rContenido = m_OnOff_y_Red.meConn.Exec(sSQL)

  s = "" ' Inicializa la cadena vacía

  ' Si hay resultados, los procesamos, sino igual generamos el bloque fijo
  If rContenido.Available Then
    s &= "\\hypersetup{\n"

    If Not IsNull(rContenido["txtLibroAutoria"]) And Len(Trim(rContenido["txtLibroAutoria"])) > 0 Then
      s &= "  pdfauthor={" & rContenido["txtLibroAutoria"] & "},\n"
    End If
    If Not IsNull(rContenido["txtRevistaTitulo"]) And Len(Trim(rContenido["txtRevistaTitulo"])) > 0 Then
      s &= "  pdftitle={" & rContenido["txtRevistaTitulo"] & "},\n"
    End If
    If Not IsNull(rContenido["txtLibroSubtitulo"]) And Len(Trim(rContenido["txtLibroSubtitulo"])) > 0 Then
      s &= "  pdfsubtitle={" & rContenido["txtLibroSubtitulo"] & "},\n"
    End If
    If Not IsNull(rContenido["txtRevistaISSN"]) And Len(Trim(rContenido["txtRevistaISSN"])) > 0 Then
      s &= "  pdfisbn={" & rContenido["txtRevistaISSN"] & "},\n"
    End If
    If Not IsNull(rContenido["txtLibroPalabrasClaveEs"]) And Len(Trim(rContenido["txtLibroPalabrasClaveEs"])) > 0 Then
      s &= "  pdfkeywords={" & rContenido["txtLibroPalabrasClaveEs"] & "},\n"
    End If
    If Not IsNull(rContenido["txtLibroResumenEs"]) And Len(Trim(rContenido["txtLibroResumenEs"])) > 0 Then
      s &= "  pdfsubject={" & rContenido["txtLibroResumenEs"] & "},\n"
    End If
    If Not IsNull(rContenido["txtRevistaURL"]) And Len(Trim(rContenido["txtRevistaURL"])) > 0 Then
      s &= "  pdfurl={" & rContenido["txtRevistaURL"] & "},\n"
    End If
    If Not IsNull(rContenido["txtFechaPublicacion"]) And Len(Trim(rContenido["txtFechaPublicacion"])) > 0 Then
      Dim fecha As String = Trim(rContenido["txtFechaPublicacion"])
      Dim partes As String[] = Split(fecha, "-")
      Dim fechaPDF As String
      If partes.Count = 3 Then
        ' yyyy-mm-dd → yyyymmdd000000
        fechaPDF = partes[0] & partes[1] & partes[2] & "000000"
      Else
        ' Si no viene bien, metemos la original sin guiones
        fechaPDF = Replace(fecha, "-", "") & "000000"
      End If
      s &= "  pdfdate={" & fechaPDF & "},\n"
      s &= "  pdfcreationdate={" & fechaPDF & "},\n"
      s &= "  pdfmetadate={" & fechaPDF & "},\n"
    End If
    If Not IsNull(rContenido["txtRevistaIdioma"]) And Len(Trim(rContenido["txtRevistaIdioma"])) > 0 Then
      s &= "  pdflang={" & rContenido["txtRevistaIdioma"] & "},\n"
    End If
    If Not IsNull(rContenido["txtLicencia"]) And Len(Trim(rContenido["txtLicencia"])) > 0 Then
      s &= "  pdfcopyrightstatus={" & rContenido["txtLicencia"] & "},\n"
      s &= "  pdfcopyrightstatustype={Text},\n"
    End If

    ' Campos fijos que siempre se exportan
    s &= "  pdfpubtype={book},\n"
    s &= "  pdfrendition={default},\n"
    s &= "  pdfcreator={gbpublisher v. " & Application.Version & "},\n"
    s &= "  pdfproducer={Ecosistema de LaTeX},\n"
    s &= "  unicode=true,\n"
    s &= "  bookmarks=true,\n"
    s &= "  pdfdisplaydoctitle=true,\n"
    s &= "  pdfnewwindow=true\n"
    s &= "}\n"

  Else
    ' Si no hay filas, igual generamos algo por defecto
    s &= "\\hypersetup{\n"
    s &= "  pdfauthor={Documento sin autor},\n"
    s &= "  pdfpubtype={book},\n"
    s &= "  pdfrendition={default},\n"
    s &= "  unicode=true,\n"
    s &= "  bookmarks=true,\n"
    s &= "  pdfdisplaydoctitle=false,\n"
    s &= "  pdfnewwindow=true,\n"
    s &= "  pdfcreator={gbpublisher v. " & Application.Version & "},\n"
    s &= "  pdfproducer={Ecosistema de LaTeX}\n"
    s &= "}\n"
  End If

  ' Establece la ruta y el nombre del archivo de salida
  outputFile = sRutaProyecto &/ "files/metadatos.tex"

  ' Guarda el contenido acumulado en un solo archivo
  File.Save(outputFile, s)

End

' exportamos el archivo glosario en JSON
Public Sub ExportarGlosarioJSON()

  Dim s As String
  Dim outputFile As String
  Dim rContenido As Result
  Dim coma As String

  sSQL = "SELECT * FROM siglas WHERE id_revista = " & FMain.idMetadatoRevista.Text
  rContenido = m_OnOff_y_Red.meConn.Exec(sSQL)

  s = "{\n  \"entries\": [\n"
  coma = ""

  While rContenido.Available
    s &= coma & "    {\n"

    s &= "      \"key\": \"" & rContenido["txtClaveGlosario"] & "\",\n"
    s &= "      \"type\": \"" & rContenido["cmbTipoDeEntradaGlosario"] & "\",\n"

    If Not IsNull(rContenido["txtNameGlosario"]) Then
      s &= "      \"name\": \"" & rContenido["txtNameGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtDescripcionGlosario"]) Then
      s &= "      \"description\": \"" & rContenido["txtDescripcionGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtFirstGlosario"]) Then
      s &= "      \"first\": \"" & rContenido["txtFirstGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtTextGlosario"]) Then
      s &= "      \"text\": \"" & rContenido["txtTextGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtFirstPluraIGlosario"]) Then
      s &= "      \"firstplural\": \"" & rContenido["txtFirstPluraIGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtPluralGlosario"]) Then
      s &= "      \"plural\": \"" & rContenido["txtPluralGlosario"] & "\",\n"
    End If
    If Not IsNull(rContenido["txtSortGlosario"]) Then
      s &= "      \"sort\": \"" & rContenido["txtSortGlosario"] & "\",\n"
    End If

    ' Cerrar objeto eliminando coma final si la hay
    If Right(s, 2) = ",\n" Then
      s = Left(s, Len(s) - 2) & "\n"
    End If

    s &= "    }"
    rContenido.MoveNext
    If rContenido.Available Then coma = ",\n" Else coma = "\n"
  Wend

  s &= "  ]\n}\n"

  outputFile = sRutaProyecto &/ "files/siglas.json"
  File.Save(outputFile, s)

End
