' Gambas module file

Public UsuarioEnCurso As String
Public IdUsuario As Integer

Public Sub CerrarTodoMySQL()

  ' --- Marcar al usuario como desconectado antes de cerrar ---
  m_ConexionBD.mConn.Exec("UPDATE usuarios SET en_linea = 0 WHERE usuario = '" & UsuarioEnCurso & "'")
  m_ConexionBD.mConn.Commit

  ' --- Liberar el proyecto
  If FMain.txtProyecto.Text <> "" Then
    Dim sProyectoActual As String = File.Name(FMain.txtProyecto.Text)
    m_ConexionBD.mConn.Exec("UPDATE proyectos SET ocupado = 0 WHERE nombre = &1", sProyectoActual)
    m_ConexionBD.mConn.Commit
    m_Timer.DetenerContador()
  Endif

  ' --- Limpiar terminal y procesos ---
  Try FMain.TerminalViewProyecto.Input("rm -rf " & User.Home & "/.local/share/org.gambas.*" & "\n")
  Try FMain.TerminalViewProyecto.Input("clear" & "\n")
  Wait 0.2

  ' Detiene el proceso Bash (intentos cortos, no bloqueantes)
  If FMain.$Bash And FMain.$Bash.State = Process.Running Then
    Dim tries As Integer = 0
    While FMain.$Bash.State = Process.Running And tries < 20
      FMain.$Bash.Kill
      Wait 0.05
      tries = tries + 1
    Wend

    If FMain.$Bash.State = Process.Running Then
      FMain.$Bash.Terminate
      Wait 0.2
      If FMain.$Bash.State = Process.Running Then
        m_Sonido.sonar("Warning")
        Message.Warning("El proceso no pudo ser detenido.")
      Endif
    Endif
  Endif

  ' --- Limpiar interfaz ---
  FMain.txtProyecto.Clear
  FMain.DirViewProyecto.Root = User.Home
  FMain.TextBoxUsuario.Clear
  FMain.TextBoxServidor.Clear

  ' Cierra la conexión a la BBDD si existe y está abierta
  If Not IsNull(m_ConexionBD.mConn) Then
    If m_ConexionBD.mConn.Opened Then
      m_ConexionBD.mConn.Close()
    Endif
    m_ConexionBD.mConn = Null
  Endif

  ' Forzamos salida para no quedar en estado inconsistente
  Quit

End

Public Sub DirectorioOcultoApp()

  ' Lista de rutas que necesitas verificar/crear
  Dim rutasNecesarias As String[] = [
    User.Home & "/.gbpublisher",
    User.Home & "/.gbpublisher/sonido",
    User.Home & "/.gbpublisher/xsl",
    User.Home & "/.gbpublisher/fonts",
    User.Home & "/.gbpublisher/lua",
    User.Home & "/.gbpublisher/csl",
    User.Home & "/.gbpublisher/luapropios",
    User.Home & "/.gbpublisher/scripts",
    User.Home & "/.gbpublisher/estadisticas"

  ]

  ' Verificar y crear rutas si no existen
  For Each rutaDirSys As String In rutasNecesarias
    If Not Exist(rutaDirSys) Then
      Try Mkdir rutaDirSys  ' ← Intenta crear el directorio
      If Error Then
        m_Sonido.sonar("Error")
        Message.Error("Error al intentar crear los directorios del sistema.")
      Endif
    End If
  Next

  ' 'copiamos los archivos de configuracion general
  If Not File.RealPath(User.Home & "/.gbpublisher/.ips.txt") Then
    Copy "ips.txt" To User.Home & "/.gbpublisher/.ips.txt"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/falta-cabecera.png") Then
    Copy "falta-cabecera.png" To User.Home & "/.gbpublisher/falta-cabecera.png"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/sonido/Error.ogg") Then
    Copy "Error.ogg" To User.Home & "/.gbpublisher/sonido/Error.ogg"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/sonido/Question.ogg") Then
    Copy "Question.ogg" To User.Home & "/.gbpublisher/sonido/Question.ogg"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/sonido/Info.ogg") Then
    Copy "Info.ogg" To User.Home & "/.gbpublisher/sonido/Info.ogg"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/sonido/OpenApp.ogg") Then
    Copy "OpenApp.ogg" To User.Home & "/.gbpublisher/sonido/OpenApp.ogg"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/sonido/Warning.ogg") Then
    Copy "Warning.ogg" To User.Home & "/.gbpublisher/sonido/Warning.ogg"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/estadisticas/prueba.py") Then
    Copy "prueba.py" To User.Home & "/.gbpublisher/estadisticas/prueba.py"
  End If
  If Not File.RealPath(User.Home & "/.gbadoc/lua/filtro-pandoc.lua") Then
    Copy "filtro-pandoc.lua" To User.Home & "/.gbpublisher/lua/filtro-pandoc.lua"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/lua/filtro-editorial.lua") Then
    Copy "filtro-editorial.lua" To User.Home & "/.gbpublisher/lua/filtro-editorial.lua"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/lua/figure-bold-filter.lua") Then
    Copy "figure-bold-filter.lua" To User.Home & "/.gbpublisher/lua/figure-bold-filter.lua"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/lua/section-refs.lua") Then
    Copy "section-refs.lua" To User.Home & "/.gbpublisher/lua/section-refs.lua"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/fonts/georgia.ttf") Then
    Copy "./georgia.ttf" To User.Home & "/.gbpublisher/fonts/georgia.ttf"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/fonts/georgiab.ttf") Then
    Copy "./georgiab.ttf" To User.Home & "/.gbpublisher/fonts/georgiab.ttf"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/fonts/georgiai.ttf") Then
    Copy "./georgiai.ttf" To User.Home & "/.gbpublisher/fonts/georgiai.ttf"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/fonts/georgiaz.ttf") Then
    Copy "./georgiaz.ttf" To User.Home & "/.gbpublisher/fonts/georgiaz.ttf"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/csl/apa.csl") Then
    Copy "./apa.csl" To User.Home & "/.gbpublisher/csl/apa.csl"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/csl/ieee.csl") Then
    Copy "./ieee.csl" To User.Home & "/.gbpublisher/csl/ieee.csl"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/csl/mla.csl") Then
    Copy "./mla.csl" To User.Home & "/.gbpublisher/csl/mla.csl"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/csl/vancouver.csl") Then
    Copy "./vancouver.csl" To User.Home & "/.gbpublisher/csl/vancouver.csl"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/buscador.py") Then
    Copy "./buscador.py" To User.Home & "/.gbpublisher/buscador.py"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/scripts/contador.py") Then
    Copy "./contador.py" To User.Home & "/.gbpublisher/scripts/contador.py"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/scripts/repeticiones.py") Then
    Copy "./repeticiones.py" To User.Home & "/.gbpublisher/scripts/repeticiones.py"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/scripts/verificar.py") Then
    Copy "./verificar.py" To User.Home & "/.gbpublisher/scripts/verificar.py"
  End If
  If Not File.RealPath(User.Home & "/.gbpublisher/scripts/footnotes.py") Then
    Copy "./footnotes.py" To User.Home & "/.gbpublisher/scripts/footnotes.py"
  End If

End

Public Sub CargarUsuarios()

  Dim rUsuarios As Result
  Dim iRow As Integer
  Dim iCol As Integer

  rUsuarios = m_ConexionBD.mConn.Exec("SELECT usuario, en_linea FROM usuarios WHERE activo = 1 ORDER BY en_linea DESC, usuario ASC")

  ' Limpiar el GridView
  FMain.TableViewUsuarios.Clear

  ' Si no hay datos, establecer el grid vacío y salir
  If rUsuarios = Null Or rUsuarios.Count = 0 Then
    FMain.TableViewUsuarios.Rows.Count = 0
    FMain.TableViewUsuarios.Columns.Count = 0
    Return
  Endif

  ' Configurar columnas y filas
  FMain.TableViewUsuarios.Columns.Count = rUsuarios.Fields.Count
  FMain.TableViewUsuarios.Rows.Count = rUsuarios.Count
  FMain.TableViewUsuarios.MoveTo(0, 0)

  ' Poblar los datos del resultado en el GridView
  iRow = 0
  For Each rUsuarios
    For iCol = 0 To rUsuarios.Fields.Count - 1
      If IsNull(rUsuarios[iCol]) Then
        FMain.TableViewUsuarios[iRow, iCol].Text = ""
      Else
        ' Si es la columna "en_linea" (índice 1), mostrar texto
        If iCol = 1 Then
          FMain.TableViewUsuarios[iRow, iCol].Text = IIf(CBool(rUsuarios[iCol]), "Conectado", "")
        Else
          FMain.TableViewUsuarios[iRow, iCol].Text = rUsuarios[iCol]
        End If
      Endif
    Next
    iRow += 1
  Next

End

Public Sub DisenarTableViewUsuarios(grid As GridView)

  With grid
    .Header = True
    .Grid = True
    .Columns.Count = 3

    ' Configuración de columnas
    For i As Integer = 0 To 2
      Select Case i
        Case 0
          .Columns[i].Title = "Usuario"
          .Columns[i].Width = 150
        Case 1
          .Columns[i].Title = "Estado"
          .Columns[i].Width = 150
        Case 2
          .Columns[i].Title = "Proyecto"
          .Columns[i].Width = 300
      End Select
    Next
  End With

End

Public Sub CargarScripts()

  Dim rutaScripts As String = User.Home &/ ".gbpublisher/scripts"
  Dim archivos As String[]
  Dim archivo As String
  Dim linea As String
  Dim descripcion As String
  Dim archivoBase As String
  Dim hFile As File
  Dim extension As String
  Dim prefijo As String

  ' Verificar que el directorio existe
  If Not Exist(rutaScripts) Then
    m_Sonido.sonar("Error")
    Message.Error("El directorio de scripts no existe: " & rutaScripts)
    Return
  Endif

  FMain.ComboBoxScripts.Clear

  ' Definir las extensiones soportadas
  Dim extensiones As String[] = ["*.py", "*.lua", "*.sh", "*.pl"]
  Dim todosArchivos As New String[]

  ' Obtener archivos de todas las extensiones
  For Each extension In extensiones
    archivos = Dir(rutaScripts, extension)
    If Not Error Then
      For Each archivo In archivos
        todosArchivos.Add(archivo)
      Next
    Endif
  Next

  ' Verificar si hay archivos
  If todosArchivos.Count = 0 Then
    m_Sonido.sonar("Info")
    Message.Info("No se encontraron scripts en el directorio")
    Return
  Endif

  ' Procesar cada archivo
  For Each archivo In todosArchivos
    descripcion = "Sin descripción"
    extension = File.Ext(archivo)

    ' Determinar el prefijo de comentario según la extensión
    Select Case LCase(extension)
      Case "py"
        prefijo = "#"
      Case "lua"
        prefijo = "--"
      Case "sh"
        prefijo = "#"
      Case "pl"
        prefijo = "#"
      Default
        prefijo = "#"
    End Select

    ' Construir ruta completa del archivo
    Dim rutaCompleta As String = rutaScripts &/ archivo

    ' Intentar leer la primera línea del archivo para obtener descripción
    hFile = Open rutaCompleta For Read
    If Not Error Then
      Line Input #hFile, linea
      If Not Error And linea <> "" Then
        linea = Trim(linea)

        ' Saltar shebang si existe (#!/...)
        If Left(linea, 2) = "#!" Then
          If Not Eof(hFile) Then
            Line Input #hFile, linea
            linea = Trim(linea)
          Else
            linea = ""
          Endif
        Endif

        ' Verificar si la línea comienza con el prefijo de comentario
        If linea <> "" And Left(linea, Len(prefijo)) = prefijo Then
          ' Extraer descripción, eliminando el prefijo y espacios
          If Len(linea) > Len(prefijo) Then
            descripcion = Trim(Mid(linea, Len(prefijo) + 1))
          Endif
        Endif
      Endif
      Close #hFile
    Else
      descripcion = "Error al leer archivo"
    Endif

    ' Agregar al ComboBox con el nombre completo del archivo
    archivoBase = File.BaseName(archivo) & "." & extension
    FMain.ComboBoxScripts.Add(descripcion & " [" & archivoBase & "]")
  Next

End
