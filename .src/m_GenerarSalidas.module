' Gambas module file

Private sRutaProyecto As String = File.Dir(FMain.txtProyecto.Text)            ' ruta del proyecto
Private sArchivoProyecto As String = File.Name(FMain.txtProyecto.Text)        ' nombre del proyecto con extension
Private sBaseNombreProyecto As String = File.BaseName(FMain.txtProyecto.Text) ' nombre del proyecto sin extension
Private sSQL As String                                                        ' consultas varias a la bbdd
Private rConsulta As Result                                                   ' resultados de las consultas
Private sComando As String

Public Sub GenerarPDFdesdeLATEX()

  ' Verificar que hay un archivo seleccionado
  If File.Name(FMain.txtProyecto.Text) = "" Then
    Message.Warning("No hay ningún proyecto seleccionado")
    Return
  Endif

  Dim sPreambulo As String = File.Load(File.Dir(FMain.txtProyecto.Text) &/ "files/pdf-preambulo.tex")
  Dim sMetadatos As String = File.Load(File.Dir(FMain.txtProyecto.Text) &/ "files/metadatos.tex")
  Dim sContenido As String = File.Load(File.Dir(FMain.txtProyecto.Text) &/ File.Name(FMain.txtProyecto.Text))
  Dim sMain As String

  ' Hacemos las exportaciones
  m_FuncionesExportar.ExportarMetadatosPDFlibro()
  m_FuncionesExportar.ExportarBibTeX()
  m_FuncionesExportar.ExportarGlosarioTeX()

  ' Concatenar los archivos
  sMain = sPreambulo & gb.NewLine & sMetadatos & gb.NewLine & sContenido

  ' Guardar el archivo temporal con el contenido concatenado
  Dim outputFile As String
  outputFile = File.Dir(FMain.txtProyecto.Text) &/ "temporal.tex"
  File.Save(outputFile, sMain)

  ' Confirmamos estar en el directorio de trabajo del proyecto
  FMain.TerminalViewProyecto.Input("cd " & File.Dir(FMain.txtProyecto.Text) & "\n")
  FMain.TerminalViewProyecto.Input("clear" & "\n")

  ' Compilar con latexmk usando el proceso bash existente
  Dim compilar As String
  compilar = "latexmk -l -f -g --interaction=nonstopmode -pdflatex=lualatex -pdflua temporal.tex"
  FMain.TerminalViewProyecto.Input(compilar & "\n")
  Wait 1

  FMain.TerminalViewProyecto.Input("mv temporal.pdf" & " " & File.Dir(FMain.txtProyecto.Text) &/ "salidas/pdf/" & sBaseNombreProyecto & ".pdf" & "\n")

  m_FuncionesGenericas.BorrarArchivosAuxiliares

End

Public Sub GenerarPDFlibroMD()

  ' Exportamos las referencias
  m_FuncionesExportar.ExportarBibTeX()

  ' Esportamos los glosarios
  m_FuncionesExportar.ExportarGlosarioJSON

  sSQL = "SELECT * FROM revistas WHERE nombre_archivo = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, sArchivoProyecto)

  ' Verificar que la consulta devolvió resultados
  If rConsulta.Available = 0 Then
    Message.Error("No se encontró información para el proyecto: " & sArchivoProyecto)
    Return
  Endif
  '
  ' Obtener CSL
  Dim sCSL As String
  If IsNull(rConsulta!cmbTipoCSL) Or Trim(rConsulta!cmbTipoCSL) = "" Then
    sCSL = "apa.csl"
  Else
    Dim sTextoCompleto As String = Trim(rConsulta!cmbTipoCSL)
    ' Buscar texto entre corchetes
    If InStr(sTextoCompleto, "[") > 0 And InStr(sTextoCompleto, "]") > 0 Then
      sCSL = Replace(Replace(Split(sTextoCompleto, "[")[1], "]", ""), " ", "")
    Else
      sCSL = "apa.csl"
    Endif
  Endif

  ' Verificar si es varios autores para el filtro
  Dim iVariosAutores As Integer = rConsulta!cmbAutoriaLibro

  ' Construir comando pandoc para PDF
  Dim archivos As String[]
  Dim archivo As String
  Dim listaOrdenada As String = ""

  ' Definir orden específico de secciones editoriales
  Dim seccionesEspeciales As String[] = [
    "00-primeras.md",     ' Páginas de cortesía
    "01-portada.md",      ' Portada
    "02-portadilla.md",   ' Portadilla
    "03-legales.md",      ' Página legal
    "04-dedicatoria.md",  ' Dedicatoria (opcional)
    "05-sumario.md"       ' Sumario/índice
  ]

  ' Leer archivos con ruta completa
  archivos = Dir(sRutaProyecto &/ "articulos", "*.md")
  Print "Archivos encontrados: " & archivos.Count
  archivos.Sort()

  ' 1. Primero agregar secciones especiales en orden
  For Each archivo In seccionesEspeciales
    If archivos.Exist(archivo) Then
      listaOrdenada &= sRutaProyecto &/ "articulos" &/ archivo & " "
    Endif
  Next

  ' 2. Luego agregar el resto del contenido (caps, prólogos, etc.)
  For Each archivo In archivos
    ' Excluir secciones especiales ya procesadas y colofón
    If Not seccionesEspeciales.Exist(archivo) And InStr(archivo, "99-colofon") <> 1 Then
      listaOrdenada &= sRutaProyecto &/ "articulos" &/ archivo & " "
    Endif
  Next

  ' Construir comando pandoc completo
  sComando = sRutaProyecto &/ sBaseNombreProyecto & ".md " & listaOrdenada
  sComando &= " --filter pandoc-crossref"
  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/glosario.lua"
  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/sumario-pdf-control.lua"

  If iVariosAutores = 1 Then
    sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/section-refs.lua"
  Endif

  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/colofon.lua"
  sComando &= " --citeproc"
  sComando &= " --metadata lang=es-ES"
  sComando &= " --metadata-file=" & User.Home & "/.gbadoc/yaml/pdf-libro-md.yaml"
  '
  ' este archivo lo tengo que generar dinamicamente con los datos de la bbdd
  ' sComando &= " --metadata-file=" & RutaProyecto & "/files/metadatos.yaml"
  '
  sComando &= " --bibliography=" & sRutaProyecto &/ "files" &/ sBaseNombreProyecto & ".bib"
  sComando &= " --csl=" & User.Home & "/.gbadoc/csl/" & sCSL
  sComando &= " --from markdown+smart"
  sComando &= " --pdf-engine=latexmk"
  sComando &= " --pdf-engine-opt=-lualatex"
  sComando &= " --to pdf"
  sComando &= " --output=" & sRutaProyecto &/ "salidas" &/ "pdf" &/ sBaseNombreProyecto & ".pdf"
  sComando &= " --resource-path=" & sRutaProyecto & ":" & sRutaProyecto &/ "articulos" & ":" & sRutaProyecto &/ "media" & ":" & sRutaProyecto &/ "files"
  sComando &= " --standalone"
  sComando &= " --number-sections"
  sComando &= " --template=" & User.Home & "/.gbadoc/basetex/pdf-libro-md.tex "

  ' Ejecutar pandoc desde el directorio correcto
  FMain.TerminalViewProyecto.Input("cd " & sRutaProyecto & " && pandoc " & sComando & "\n")
  Wait 2

  ' Mostrar mensaje de finalización
  Dim ArchivoFinal As String
  ArchivoFinal = sRutaProyecto & "/salidas/pdf/" & sBaseNombreProyecto & ".pdf"

End

Public Sub GenerarXMLlibroIndesign()

  Dim sArchivoMD As String = sArchivoProyecto
  Dim sArchivoJATS As String = sRutaProyecto &/ "salidas/xml/libro-jats.xml"
  Dim sArchivoICML As String = sRutaProyecto &/ "salidas/xml/xml-indesign/libro.icml"
  Dim sFiltroLua As String = User.Home & "/.gbadoc/lua/jats-custom.lua"
  Dim sXSL As String = User.Home & "/.gbadoc/xsl/jats-to-icml.xsl"
  Dim sCSL As String

  ' Exportar BibTeX
  m_FuncionesExportar.ExportarBibTeX()

  ' Obtener datos del proyecto
  sSQL = "SELECT * FROM revistas WHERE id = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, FMain.idMetadatoRevista)

  ' Crear archivo temporal con todo el contenido
  Dim sArchivoCompleto As String = sRutaProyecto &/ "temp-libro-completo.md"
  Dim sContenidoCompleto As String

  ' 1️⃣ Cargar archivo principal
  sContenidoCompleto = File.Load(sArchivoMD)
  sContenidoCompleto &= gb.NewLine & gb.NewLine

  ' 2️⃣ Agregar todos los archivos de la carpeta articulos/
  Dim sCarpetaArticulos As String = sRutaProyecto &/ "articulos"
  Dim aArchivos As String[]

  If Exist(sCarpetaArticulos) Then
    aArchivos = Dir(sCarpetaArticulos, "*.md").Sort()
    Print "Archivos encontrados en articulos/:"
    For Each sArchivo As String In aArchivos
      Print "  - " & sArchivo
      Dim sRutaArticulo As String = sCarpetaArticulos &/ sArchivo
      sContenidoCompleto &= File.Load(sRutaArticulo) & gb.NewLine & gb.NewLine
    Next
  Else
    Message.Error("No existe la carpeta: " & sCarpetaArticulos)
    Return
  End If

  ' Obtener CSL
  If IsNull(rConsulta!cmbTipoCSL) Or Trim(rConsulta!cmbTipoCSL) = "" Then
    sCSL = "apa.csl"
  Else
    Dim sTextoCompleto As String = Trim(rConsulta!cmbTipoCSL)
    If InStr(sTextoCompleto, "[") > 0 And InStr(sTextoCompleto, "]") > 0 Then
      sCSL = Replace(Replace(Split(sTextoCompleto, "[")[1], "]", ""), " ", "")
    Else
      sCSL = "apa.csl"
    Endif
  Endif

  ' Guardar archivo temporal completo
  File.Save(sArchivoCompleto, sContenidoCompleto)
  Print "Archivo temporal creado: " & sArchivoCompleto
  Print "Tamaño total: " & CStr(Stat(sArchivoCompleto).Size) & " bytes"

  ' 3️⃣ Convertir archivo completo a JATS-XML
  sComando = "pandoc " & Quote(sArchivoCompleto) &
    " --to=jats" &
    " --lua-filter=" & Quote(sFiltroLua) &
    " --bibliography=files/" & sBaseNombreProyecto & ".bib" &
    " --csl=" & User.Home & "/.gbadoc/csl/" & sCSL &
    " --filter pandoc-crossref" &
    " --citeproc" &
    " --standalone" &
    " --wrap=preserve" &
    " -o " & Quote(sArchivoJATS)

  FMain.TerminalViewProyecto.Input(sComando & gb.NewLine)

  ' Esperar a que termine el primer comando
  Wait 3

  ' Verificar que el archivo JATS se creó
  If Not Exist(sArchivoJATS) Then
    Message.Error("Error: No se pudo generar el archivo JATS")
    Return
  End If

  ' 2️⃣ Convertir JATS-XML a ICML usando XSLTProc
  ' 2️⃣ Convertir JATS-XML a ICML usando XSLTProc (sin validación)
  sComando = "xsltproc --novalid " & Quote(sXSL) & " " & Quote(sArchivoJATS) & " > " & Quote(sArchivoICML)

  FMain.TerminalViewProyecto.Input(sComando & gb.NewLine)

  ' Esperar a que termine
  Wait 2

  ' Verificar resultado
  If Exist(sArchivoICML) Then
    Dim sSize As String = CStr(Stat(sArchivoICML).Size)
    Message.Info("Conversión completada." & gb.NewLine &
      "Archivo generado: " & sArchivoICML & gb.NewLine &
      "Tamaño: " & sSize & " bytes")
  Else
    Message.Error("Error: No se pudo generar el archivo ICML")
  End If

  FMain.TerminalViewProyecto.Input("rm -rf temp-libro-completo.md" & gb.NewLine)
  FMain.FileViewProyecto.Refresh

End

Public Sub GenerarEPUBlibroMD()

  Dim iVariosAutores As Integer
  Dim sImagenTapa As String
  Dim sCSL As String

  ' Exportar BibTeX
  m_FuncionesExportar.ExportarBibTeX()

  ' Exportamos los glosarios
  m_FuncionesExportar.ExportarGlosarioJSON()

  ' Obtener datos del proyecto
  sSQL = "SELECT * FROM revistas WHERE id = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, FMain.idMetadatoRevista.Text)

  If rConsulta.Available = 0 Then
    Message.Error("No se encontró información para el proyecto: " & FMain.idMetadatoRevista.Text)
    Return
  Endif

  ' Construir YAML (mantener el código existente del YAML)
  Dim sYAML As String = ""
  sYAML &= "title: " & Trim(rConsulta!txtRevistaTitulo) & "\n"

  If Not IsNull(rConsulta!txtLibroSubtitulo) Then
    sYAML &= "subtitle: " & Trim(rConsulta!txtLibroSubtitulo) & "\n"
  Endif

  If Not IsNull(rConsulta!txtLibroAutoria) Then
    Dim autores As String[] = Split(Trim(rConsulta!txtLibroAutoria), ",")
    sYAML &= "author:\n"
    For Each autor As String In autores
      sYAML &= "  - " & Trim(autor) & "\n"
    Next
  Endif

  ' Palabras clave, género y audiencia
  Dim aSubjects As New String[]
  If Not IsNull(rConsulta!txtLibroPalabrasClaveEs) Then
    Dim palabras As String[] = Split(Trim(rConsulta!txtLibroPalabrasClaveEs), ",")
    For Each palabra As String In palabras
      aSubjects.Add(Trim(palabra))
    Next
  Endif

  If Not IsNull(rConsulta!txtLibroGenero) Then
    aSubjects.Add(Trim(rConsulta!txtLibroGenero))
  Endif
  If Not IsNull(rConsulta!txtLibroAudiencia) Then
    aSubjects.Add(Trim(rConsulta!txtLibroAudiencia))
  Endif
  If aSubjects.Count > 0 Then
    sYAML &= "subject:\n"
    For Each item As String In aSubjects
      sYAML &= "  - \"" & item & "\"\n"
    Next
  Endif

  If Not IsNull(rConsulta!txtFechaPublicacion) Then
    sYAML &= "date: " & Trim(rConsulta!txtFechaPublicacion) & "\n"
  Endif
  If Not IsNull(rConsulta!txtRevistaISSN) And Trim(rConsulta!txtRevistaISSN) <> "" Then
    sYAML &= "isbn: " & Trim(rConsulta!txtRevistaISSN) & "\n"
  Endif
  If Not IsNull(rConsulta!txtRevistaEditorial) Then
    sYAML &= "publisher: " & Trim(rConsulta!txtRevistaEditorial) & "\n"
  Endif
  If Not IsNull(rConsulta!txtRevistaIdioma) Then
    sYAML &= "language: " & Trim(rConsulta!txtRevistaIdioma) & "\n"
  Endif
  If Not IsNull(rConsulta!txtLicencia) Then
    sYAML &= "rights: " & Trim(rConsulta!txtLicencia) & "\n"
  Endif
  If Not IsNull(rConsulta!txtLibroSerie) Then
    sYAML &= "series: " & Trim(rConsulta!txtLibroSerie) & "\n"
  Endif
  If Not IsNull(rConsulta!txtLibroSerieNumero) Then
    sYAML &= "index: " & Trim(rConsulta!txtLibroSerieNumero) & "\n"
  Endif
  If Not IsNull(rConsulta!txtLibroResumenEs) Then
    sYAML &= "description: " & Trim(rConsulta!txtLibroResumenEs) & "\n"
  Endif

  ' Identificadores
  If Not IsNull(rConsulta!txtRevistaISSN) And Trim(rConsulta!txtRevistaISSN) <> "" Then
    sYAML &= "identifier:\n"
    sYAML &= "  - scheme: \"ISBN\"\n"
    sYAML &= "    text: " & Trim(rConsulta!txtRevistaISSN) & "\n"
  Endif
  If Not IsNull(rConsulta!txtRevistaURL) And Trim(rConsulta!txtRevistaURL) <> "" Then
    If Not InStr(sYAML, "identifier:") Then sYAML &= "identifier:\n"
    sYAML &= "  - scheme: \"URI\"\n"
    sYAML &= "    text: " & Trim(rConsulta!txtRevistaURL) & "\n"
  Endif

  ' Extras para EPUB - Configuración mejorada
  sYAML &= "type: \"Text\"\n"
  sYAML &= "format: \"application/epub+zip\"\n"
  sYAML &= "link-citations: true\n"
  sYAML &= "reference-section-title: \"Referencias\"\n"
  sYAML &= "citations-hover: false\n"
  sYAML &= "figureTitle: \"Figura\"\n"
  sYAML &= "tableTitle: \"Cuadro\"\n"
  sYAML &= "listingTitle: \"Listado\"\n"
  sYAML &= "figPrefix:\n  - \"figura\"\n  - \"figuras\"\n"
  sYAML &= "eqnPrefix:\n  - \"ecuación\"\n  - \"ecuaciones\"\n"
  sYAML &= "tblPrefix:\n  - \"cuadro\"\n  - \"cuadros\"\n"
  sYAML &= "lstPrefix:\n  - \"listado\"\n  - \"listados\"\n"
  sYAML &= "secPrefix:\n  - \"sección\"\n  - \"secciones\"\n"
  sYAML &= "linkReferences: true\n"
  sYAML &= "nameInLink: true\n"
  sYAML &= "figLabels: arabic\n"
  sYAML &= "tblLabels: arabic\n"
  sYAML &= "eqnLabels: arabic\n"
  ' Configuración específica para EPUB3
  sYAML &= "epub-chapter-level: 1\n"
  sYAML &= "epub-subdirectory: \"text\"\n"
  sYAML &= "ibooks:\n"
  sYAML &= "  version: \"1.0.0\"\n"
  sYAML &= "  specified-fonts: true\n"
  sYAML &= "  iphone-orientation-lock: \"portrait-only\"\n"
  sYAML &= "book-producer: gbpublisher\n"

  ' Guardar YAML
  File.Save(sRutaProyecto & "/files/" & sBaseNombreProyecto & ".yaml", sYAML)

  ' Imagen de tapa
  If IsNull(rConsulta!txtImagenTapita) Or Trim(rConsulta!txtImagenTapita) = "" Then
    sImagenTapa = "cover.png"
  Else
    sImagenTapa = Trim(rConsulta!txtImagenTapita)
  Endif

  ' Obtener CSL
  If IsNull(rConsulta!cmbTipoCSL) Or Trim(rConsulta!cmbTipoCSL) = "" Then
    sCSL = "apa.csl"
  Else
    Dim sTextoCompleto As String = Trim(rConsulta!cmbTipoCSL)
    If InStr(sTextoCompleto, "[") > 0 And InStr(sTextoCompleto, "]") > 0 Then
      sCSL = Replace(Replace(Split(sTextoCompleto, "[")[1], "]", ""), " ", "")
    Else
      sCSL = "apa.csl"
    Endif
  Endif

  iVariosAutores = rConsulta!cmbAutoriaLibro

  ' Preparar lista ordenada de archivos (incluyendo colofón al final)
  Dim archivos As String[] = Dir(sRutaProyecto &/ "articulos", "*.md")
  archivos.Sort()
  Dim listaOrdenada As String = ""

  ' Primero las secciones especiales iniciales
  Dim seccionesEspeciales As String[] = [
    "00-primeras.md", "01-portada.md", "02-portadilla.md",
    "03-legales.md", "04-dedicatoria.md", "05-sumario.md"
  ]
  Dim archivo As String
  For Each archivo In seccionesEspeciales
    If archivos.Exist(archivo) Then
      listaOrdenada &= sRutaProyecto &/ "articulos" &/ archivo & " "
    Endif
  Next

  ' Luego el contenido principal (excluyendo colofón)
  For Each archivo In archivos
    If Not seccionesEspeciales.Exist(archivo) And InStr(archivo, "99-colofon") <> 1 Then
      listaOrdenada &= sRutaProyecto &/ "articulos" &/ archivo & " "
    Endif
  Next

  ' IMPORTANTE: Para EPUB, NO incluir directamente el colofón aquí
  ' El filtro lua lo agregará después de las referencias

  ' Construir comando pandoc - ORDEN SIMPLIFICADO PARA EPUB
  sComando = sBaseNombreProyecto & ".md " & listaOrdenada
  sComando &= " --from markdown"
  sComando &= " --to epub3"
  sComando &= " --output=salidas/epub/" & sBaseNombreProyecto & ".epub"
  sComando &= " --metadata-file=files/" & sBaseNombreProyecto & ".yaml"
  sComando &= " --bibliography=files/" & sBaseNombreProyecto & ".bib"
  sComando &= " --csl=" & User.Home & "/.gbadoc/csl/" & sCSL
  sComando &= " --filter pandoc-crossref"
  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/figure-bold-filter.lua"
  If iVariosAutores = 1 Then
    sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/section-refs.lua"
  Endif
  sComando &= " --citeproc"
  sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/colofon-epub.lua"
  sComando &= " --output=salidas/epub/" & sBaseNombreProyecto & ".epub"
  sComando &= " --from markdown"
  sComando &= " --to epub3"
  sComando &= " --epub-cover-image=media/" & sImagenTapa
  sComando &= " --css=files/stylesheet1.css"
  sComando &= " --resource-path=" & sRutaProyecto & ":" & sRutaProyecto &/ "articulos" & ":" & sRutaProyecto &/ "media" & ":" & sRutaProyecto &/ "files"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgia.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiab.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiai.ttf"
  sComando &= " --epub-embed-font=" & User.Home & "/.gbadoc/fonts/georgiaz.ttf"
  sComando &= " --embed-resources"
  sComando &= " --standalone"
  sComando &= " --toc"
  sComando &= " --toc-depth=2" ' Cambiar a 2 para EPUB
  sComando &= " --split-level=1"
  ' Opciones adicionales para mejor EPUB
  sComando &= " --epub-chapter-level=1"

  ' Ejecutar Pandoc
  FMain.TerminalViewProyecto.Input("cd " & sRutaProyecto & " && pandoc " & sComando & " --verbose --fail-if-warnings\n")
  Wait 0.5

  ' Validar con epubcheck
  Dim ArchivoFinal As String = sRutaProyecto & "/salidas/epub/" & sBaseNombreProyecto & ".epub"
  FMain.TerminalViewProyecto.Input("epubcheck " & ArchivoFinal & "\n")

End

Public Sub GenerarTEXlibroMD()

  Dim sComandoCompleto As String
  Dim ArchivoFinal As String

  ' generamos la exportacion del bib
  m_FuncionesExportar.ExportarBibTeX()

  sSQL = "SELECT * FROM revistas WHERE nombre_archivo = &1"
  rConsulta = m_OnOff_y_Red.meConn.Exec(sSQL, FMain.idMetadatoRevista.Text)

  ' Verificar que la consulta devolvió resultados
  If rConsulta.Available = 0 Then
    Message.Error("No se encontró información para el proyecto: " & FMain.idMetadatoRevista.Text)
    Return
  Endif

  ' Obtener CSL
  Dim sCSL As String
  If IsNull(rConsulta!cmbTipoCSL) Or Trim(rConsulta!cmbTipoCSL) = "" Then
    sCSL = "apa.csl"
  Else
    Dim sTextoCompleto As String = Trim(rConsulta!cmbTipoCSL)
    ' Buscar texto entre corchetes
    If InStr(sTextoCompleto, "[") > 0 And InStr(sTextoCompleto, "]") > 0 Then
      sCSL = Replace(Replace(Split(sTextoCompleto, "[")[1], "]", ""), " ", "")
    Else
      sCSL = "apa.csl"
    Endif
  Endif

  ' Verificar si es varios autores para el filtro
  Dim iVariosAutores As Integer = rConsulta!cmbAutoriaLibro

  sComando = sBaseNombreProyecto & ".md articulos/*.md"
  sComando &= " --filter pandoc-crossref"

  ' Condicional para section-refs.lua
  If iVariosAutores = 1 Then
    sComando &= " --lua-filter=" & User.Home & "/.gbadoc/lua/section-refs.lua"
  Endif

  sComando &= " --citeproc"
  sComando &= " --metadata lang=es-ES"
  sComando &= " --metadata-file=" & User.Home & "/.gbadoc/yaml/pdf-libro.yaml"
  sComando &= " --bibliography=files/" & sBaseNombreProyecto & ".bib"
  sComando &= " --csl=" & User.Home & "/.gbadoc/csl/" & sCSL
  sComando &= " --from markdown+smart"
  sComando &= " --template=" & User.Home & "/.gbadoc/basetex/pdf-libro-md.tex"
  sComando &= " --to latex"
  sComando &= " --output=salidas/tex/" & sBaseNombreProyecto & ".tex"
  sComando &= " --resource-path=" & sRutaProyecto & ":" & sRutaProyecto &/ "articulos" & ":" & sRutaProyecto &/ "media" & ":" & sRutaProyecto &/ "files"
  sComando &= " --standalone"
  sComando &= " --number-sections"

  ' Comando completo con pandoc
  sComandoCompleto = "pandoc " & sComando

  ' Ejecutar pandoc y capturar posibles errores
  FMain.TerminalViewProyecto.Input(sComandoCompleto & "\n")

  ' Esperar un poco más para que se complete el proceso
  Wait 2.0

  ' Verificar si se creó el archivo de salida
  ArchivoFinal = sRutaProyecto & "/salidas/tex/" & sBaseNombreProyecto & ".tex"

  If Exist(ArchivoFinal) Then
    Message.Info("Archivo LaTeX generado exitosamente: " & ArchivoFinal)
  Else
    Message.Error("El archivo LaTeX no se generó correctamente. Verifica el terminal para más detalles.")
  Endif

End
