name: Update Downloads Page

on:
  release:
    types: [published]
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  update-downloads:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest release info
      id: release
      run: |
        set -euo pipefail

        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest")

        if echo "$LATEST_RELEASE" | jq -e '.message' > /dev/null 2>&1; then
          HAS_RELEASE=false
        else
          HAS_RELEASE=true
        fi

        if [ "$HAS_RELEASE" = "true" ]; then
          TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name // "v0.0.0"')
          RELEASE_DATE=$(echo "$LATEST_RELEASE" | jq -r '.published_at' | cut -d'T' -f1)
          RELEASE_BODY=$(echo "$LATEST_RELEASE" | jq -r '.body // "Sin descripci√≥n"' | tr -d '\n\r' | sed 's/[*#]//' | cut -c1-100)
          DEB_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[]? | select(.name | endswith(".deb")) | .browser_download_url' | head -1)
          DEB_NAME=$(echo "$LATEST_RELEASE" | jq -r '.assets[]? | select(.name | endswith(".deb")) | .name' | head -1)

          if [ -z "$DEB_URL" ] || [ "$DEB_URL" = "null" ]; then
            DEB_URL="https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/package.deb"
            DEB_NAME="package.deb"
          fi

          {
            echo "tag_name=$TAG_NAME"
            echo "release_date=$RELEASE_DATE"
            echo "release_body=$RELEASE_BODY"
            echo "deb_url=$DEB_URL"
            echo "deb_name=$DEB_NAME"
            echo "has_release=true"
          } >> $GITHUB_OUTPUT
        else
          COMMIT_DATE=$(git log -1 --format="%Y-%m-%d")
          COMMIT_MESSAGE=$(git log -1 --format="%s" | tr -d '\n\r' | cut -c1-50)
          COMMIT_SHA=$(git log -1 --format="%h")

          {
            echo "tag_name=v0.0.0-dev"
            echo "release_date=$COMMIT_DATE"
            echo "release_body=$COMMIT_MESSAGE (commit $COMMIT_SHA)"
            echo "deb_url=https://github.com/${{ github.repository }}/releases/download/latest/package.deb"
            echo "deb_name=package.deb"
            echo "has_release=false"
          } >> $GITHUB_OUTPUT
        fi

    - name: Update downloads page
      env:
        RELEASE_TAG: ${{ steps.release.outputs.tag_name }}
        RELEASE_DATE: ${{ steps.release.outputs.release_date }}
        RELEASE_BODY: ${{ steps.release.outputs.release_body }}
        DEB_URL: ${{ steps.release.outputs.deb_url }}
        DEB_NAME: ${{ steps.release.outputs.deb_name }}
      run: |
        set -euo pipefail

        FILE="docs/downloads.md"

        if [ ! -f "$FILE" ]; then
          echo "‚ùå No se encontr√≥ $FILE"
          exit 1
        fi

        echo "=== Editando $FILE con la √∫ltima info de release ==="

        # Escapar &, / y \ en las variables antes de pasarlas como reemplazo a sed
        safe_url=$(printf '%s\n' "$DEB_URL" | sed 's/[&/\\]/\\&/g')
        safe_name=$(printf '%s\n' "$DEB_NAME" | sed 's/[&/\\]/\\&/g')

        # Reemplazar URL y nombre dentro de los marcadores (usa | como delimitador)
        sed -i "s|<!--URL_WGET-->.*<!--END_URL_WGET-->|<!--URL_WGET-->wget $safe_url<!--END_URL_WGET-->|" "$FILE"
        sed -i "s|<!--NOMBRE_DEB-->.*<!--END_NOMBRE_DEB-->|<!--NOMBRE_DEB-->$safe_name<!--END_NOMBRE_DEB-->|" "$FILE"

        # Agregar entrada al historial s√≥lo si la versi√≥n no existe a√∫n
        if grep -Fq "| $RELEASE_TAG |" "$FILE"; then
          echo "La versi√≥n $RELEASE_TAG ya existe en el historial, no se a√±ade."
        else
          # Buscar la l√≠nea separadora de la tabla (la que contiene ---)
          sep_line=$(grep -n '---' "$FILE" | head -n1 | cut -d: -f1 || true)

          if [ -n "$sep_line" ]; then
            # Insertar la nueva fila justo despu√©s de la l√≠nea separadora
            awk -v ln="$sep_line" -v version="$RELEASE_TAG" -v date="$RELEASE_DATE" -v changes="$RELEASE_BODY" \
              'NR==ln { print; print "| " version " | " date " | " changes " |"; next } { print }' \
              "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
          else
            # Si no encuentra la tabla, agregar al final como fallback
            echo "| $RELEASE_TAG | $RELEASE_DATE | $RELEASE_BODY |" >> "$FILE"
          fi
        fi

        echo "=== Contenido final ==="
        cat "$FILE"

    - name: Commit and push changes
      env:
        RELEASE_TAG: ${{ steps.release.outputs.tag_name }}
        RELEASE_DATE: ${{ steps.release.outputs.release_date }}
        DEB_NAME: ${{ steps.release.outputs.deb_name }}
      run: |
        set -euo pipefail

        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        git add docs/downloads.md

        if git diff --cached --quiet; then
          echo "‚ùå No hay cambios para commitear"
        else
          git commit -m "ü§ñ Actualizar p√°gina de descargas autom√°ticamente

- Versi√≥n: $RELEASE_TAG
- Fecha: $RELEASE_DATE
- Archivo: $DEB_NAME"
          git push
          echo "‚úÖ Cambios enviados correctamente"
        fi
