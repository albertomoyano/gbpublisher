name: Update Downloads Page

on:
  release:
    types: [published]
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  update-downloads:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest release info
      id: release
      run: |
        # Obtener informaci√≥n del √∫ltimo release
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest")

        # Verificar si la respuesta contiene un mensaje de error
        if echo "$LATEST_RELEASE" | jq -e '.message' > /dev/null 2>&1; then
          HAS_RELEASE=false
        else
          HAS_RELEASE=true
        fi

        if [ "$HAS_RELEASE" = "true" ]; then
          # Si hay releases disponibles
          TAG_NAME=$(echo "$LATEST_RELEASE" | jq -r '.tag_name // "v0.0.0"')
          RELEASE_DATE=$(echo "$LATEST_RELEASE" | jq -r '.published_at' | cut -d'T' -f1)

          # Limpiar el body del release de caracteres problem√°ticos
          RELEASE_BODY=$(echo "$LATEST_RELEASE" | jq -r '.body // "Sin descripci√≥n"' | tr -d '\n\r' | sed 's/[*#]//' | cut -c1-100)

          # Buscar archivos .deb en los assets
          DEB_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[]? | select(.name | endswith(".deb")) | .browser_download_url' | head -1)
          DEB_NAME=$(echo "$LATEST_RELEASE" | jq -r '.assets[]? | select(.name | endswith(".deb")) | .name' | head -1)

          # Si no encuentra .deb, usar valores por defecto
          if [ -z "$DEB_URL" ] || [ "$DEB_URL" = "null" ]; then
            DEB_URL="https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/package.deb"
            DEB_NAME="package.deb"
          fi

          {
            echo "tag_name=$TAG_NAME"
            echo "release_date=$RELEASE_DATE"
            echo "release_body=$RELEASE_BODY"
            echo "deb_url=$DEB_URL"
            echo "deb_name=$DEB_NAME"
            echo "has_release=true"
          } >> $GITHUB_OUTPUT
        else
          # Si no hay releases, usar informaci√≥n del commit m√°s reciente
          COMMIT_DATE=$(git log -1 --format="%Y-%m-%d")
          COMMIT_MESSAGE=$(git log -1 --format="%s" | tr -d '\n\r' | cut -c1-50)
          COMMIT_SHA=$(git log -1 --format="%h")

          {
            echo "tag_name=v0.0.0-dev"
            echo "release_date=$COMMIT_DATE"
            echo "release_body=$COMMIT_MESSAGE (commit $COMMIT_SHA)"
            echo "deb_url=https://github.com/${{ github.repository }}/releases/download/latest/package.deb"
            echo "deb_name=package.deb"
            echo "has_release=false"
          } >> $GITHUB_OUTPUT
        fi

    - name: Update downloads page sections
      run: |
        echo "=== Debug: Valores obtenidos ==="
        echo "Tag: ${{ steps.release.outputs.tag_name }}"
        echo "Date: ${{ steps.release.outputs.release_date }}"
        echo "DEB URL: ${{ steps.release.outputs.deb_url }}"
        echo "DEB Name: ${{ steps.release.outputs.deb_name }}"
        echo "Has Release: ${{ steps.release.outputs.has_release }}"

        # Verificar que el archivo existe
        if [ ! -f "docs/downloads.md" ]; then
          echo "‚ùå El archivo docs/downloads.md no existe"
          exit 1
        fi

        echo "=== Archivo encontrado, aplicando cambios ==="

        # Guardar las variables en archivos para evitar problemas de bash
        echo '${{ steps.release.outputs.deb_url }}' > /tmp/deb_url.txt
        echo '${{ steps.release.outputs.deb_name }}' > /tmp/deb_name.txt
        echo '${{ steps.release.outputs.tag_name }}' > /tmp/tag_name.txt
        echo '${{ steps.release.outputs.release_date }}' > /tmp/release_date.txt
        echo '${{ steps.release.outputs.release_body }}' > /tmp/release_body.txt

        # Leer las variables de los archivos
        DEB_URL=$(cat /tmp/deb_url.txt)
        DEB_NAME=$(cat /tmp/deb_name.txt)
        TAG_NAME=$(cat /tmp/tag_name.txt)
        RELEASE_DATE=$(cat /tmp/release_date.txt)
        RELEASE_BODY=$(cat /tmp/release_body.txt)

        # 1. Actualizar la URL del wget usando python para evitar problemas de bash
        python3 -c "
import re
with open('docs/downloads.md', 'r') as f:
    content = f.read()

# Reemplazar URL_WGET
new_url = '<!--URL_WGET-->wget ${DEB_URL}<!--END_URL_WGET-->'
content = re.sub(r'<!--URL_WGET-->.*?<!--END_URL_WGET-->', new_url, content)

# Reemplazar NOMBRE_DEB
new_name = '<!--NOMBRE_DEB-->./${DEB_NAME}<!--END_NOMBRE_DEB-->'
content = re.sub(r'<!--NOMBRE_DEB-->.*?<!--END_NOMBRE_DEB-->', new_name, content)

with open('docs/downloads.md', 'w') as f:
    f.write(content)
"

        echo "‚úÖ URLs actualizadas"

        # 2. Verificar si la versi√≥n ya existe en el historial para evitar duplicados
        if ! grep -q "${TAG_NAME}" docs/downloads.md; then
          echo "=== Agregando nueva versi√≥n al historial ==="

          # Usar python para agregar la l√≠nea al historial
          python3 -c "
import re

with open('docs/downloads.md', 'r') as f:
    content = f.read()

# Buscar la l√≠nea del separador de tabla
if re.search(r'\|\s*-+\s*\|\s*-+\s*\|\s*-+\s*\|', content):
    new_line = '| ${TAG_NAME} | ${RELEASE_DATE} | ${RELEASE_BODY} |'
    # Insertar despu√©s de la l√≠nea de separadores
    content = re.sub(
        r'(\|\s*-+\s*\|\s*-+\s*\|\s*-+\s*\|)\n',
        r'\1\n' + new_line + '\n',
        content,
        count=1
    )

    with open('docs/downloads.md', 'w') as f:
        f.write(content)
    print('Nueva versi√≥n agregada al historial')
else:
    print('No se encontr√≥ la tabla de historial')
"
        else
          echo "=== Versi√≥n ${TAG_NAME} ya existe en el historial, no se agrega duplicada ==="
        fi

        echo "=== Cambios aplicados correctamente ==="

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        echo "=== Estado del repositorio ==="
        git status

        # Verificar si hay cambios en el archivo
        if git diff --quiet docs/downloads.md; then
          echo "‚ùå No hay cambios en docs/downloads.md para commitear"
        else
          echo "‚úÖ Cambios detectados en docs/downloads.md, commiteando..."

          git add docs/downloads.md
          git commit -m "ü§ñ Actualizar p√°gina de descargas

          - Versi√≥n: ${{ steps.release.outputs.tag_name }}
          - Fecha: ${{ steps.release.outputs.release_date }}
          - URL actualizada: ${{ steps.release.outputs.deb_url }}
          - Archivo: ${{ steps.release.outputs.deb_name }}"

          echo "=== Pushing cambios ==="
          git push
          echo "‚úÖ Cambios enviados correctamente"
        fi
