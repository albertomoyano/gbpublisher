name: DEB Package Deployment
on:
  push:
    paths:
      - 'ubuntu/paquetes/*.deb'
    branches:
      - main  # o la rama principal que uses
jobs:
  release-deb:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      deployments: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if DEB files exist
      id: check-files
      run: |
        if ls ubuntu/paquetes/*.deb 1> /dev/null 2>&1; then
          echo "found=true" >> $GITHUB_OUTPUT
          echo "✅ Archivos .deb encontrados"
        else
          echo "found=false" >> $GITHUB_OUTPUT
          echo "❌ No se encontraron archivos .deb"
        fi

    - name: Get DEB info
      if: steps.check-files.outputs.found == 'true'
      id: deb-info
      run: |
        DEB_FILE=$(ls ubuntu/paquetes/*.deb | head -n 1)
        DEB_NAME=$(basename "$DEB_FILE")

        # Extraer versión del nombre del archivo .deb si es posible
        # Formato típico: package-name_version_architecture.deb
        VERSION=$(echo "$DEB_NAME" | sed -n 's/.*_\([0-9][^_]*\)_.*\.deb$/\1/p')

        # Si no se puede extraer la versión del nombre, usar fecha
        if [ -z "$VERSION" ]; then
          VERSION=$(date +"%Y.%m.%d.%H%M")
        fi

        echo "name=$DEB_NAME" >> $GITHUB_OUTPUT
        echo "path=$DEB_FILE" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=deb-v$VERSION" >> $GITHUB_OUTPUT

        echo "📦 Archivo: $DEB_NAME"
        echo "🏷️ Versión: $VERSION"
        echo "🔖 Tag: deb-v$VERSION"

    - name: Check if release exists
      if: steps.check-files.outputs.found == 'true'
      id: check-release
      run: |
        TAG_NAME="${{ steps.deb-info.outputs.tag }}"

        # Verificar si el tag ya existe
        if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME"; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "⚠️ El release $TAG_NAME ya existe"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✅ El release $TAG_NAME no existe, se puede crear"
        fi

    - name: Create Release
      if: steps.check-files.outputs.found == 'true' && steps.check-release.outputs.exists == 'false'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ steps.deb-info.outputs.path }}
        tag_name: ${{ steps.deb-info.outputs.tag }}
        name: "DEB Package v${{ steps.deb-info.outputs.version }}"
        body: |
          ## 📦 DEB Package Release

          **Archivo:** `${{ steps.deb-info.outputs.name }}`
          **Versión:** `${{ steps.deb-info.outputs.version }}`
          **Fecha:** `${{ github.event.head_commit.timestamp }}`

          Package deployed automatically from commit: ${{ github.sha }}
        draft: false
        prerelease: false

    - name: Create Deployment Record
      if: steps.check-files.outputs.found == 'true' && steps.check-release.outputs.exists == 'false'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              description: 'DEB Package Release v${{ steps.deb-info.outputs.version }}',
              environment: 'deb-packages',
              auto_merge: false,
              required_contexts: []
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              description: 'DEB package deployed successfully'
            });

            console.log('✅ Deployment record created successfully');
          } catch (error) {
            console.log('⚠️ Error creating deployment:', error.message);
          }

    - name: Summary
      if: always()
      run: |
        echo "## 📋 Resumen del Workflow" >> $GITHUB_STEP_SUMMARY
        echo "- **Archivos encontrados:** ${{ steps.check-files.outputs.found }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.check-files.outputs.found }}" == "true" ]; then
          echo "- **Archivo:** \`${{ steps.deb-info.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Versión:** \`${{ steps.deb-info.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Release existe:** ${{ steps.check-release.outputs.exists }}" >> $GITHUB_STEP_SUMMARY
        fi
